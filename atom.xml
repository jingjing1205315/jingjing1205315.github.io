<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>April的个人小站</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-10-10T05:31:30.964Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>April</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Javascript 加载方式async与defer的区别</title>
    <link href="http://yoursite.com/2021/10/09/Javascript-%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8Fasync%E4%B8%8Edefer%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2021/10/09/Javascript-%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8Fasync%E4%B8%8Edefer%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2021-10-09T13:53:36.000Z</published>
    <updated>2021-10-10T05:31:30.964Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt;|a&#x3D;1| D[结果1]</span><br><span class="line">    C --&gt;|a&#x3D;2| E[结果2]</span><br><span class="line">    F[横向流程图]</span><br></pre></td></tr></table></figure><p>11<br>mermaid<br>graph LR<br>A[方形] –&gt;B(圆角)<br>    B –&gt; C{条件a}<br>    C –&gt;|a=1| D[结果1]<br>    C –&gt;|a=2| E[结果2]<br>    F[横向流程图]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>长按不选中</title>
    <link href="http://yoursite.com/2021/08/12/%E9%95%BF%E6%8C%89%E4%B8%8D%E9%80%89%E4%B8%AD/"/>
    <id>http://yoursite.com/2021/08/12/%E9%95%BF%E6%8C%89%E4%B8%8D%E9%80%89%E4%B8%AD/</id>
    <published>2021-08-12T18:21:58.000Z</published>
    <updated>2021-10-10T05:31:30.972Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    -webkit-touch-callout:none; </span><br><span class="line">    -webkit-user-select:none; </span><br><span class="line">    -moz-user-select:none; </span><br><span class="line">    -ms-user-select:none; </span><br><span class="line">    user-select:none; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vue vue-router vuex</title>
    <link href="http://yoursite.com/2021/08/10/vue-vue-router-vuex/"/>
    <id>http://yoursite.com/2021/08/10/vue-vue-router-vuex/</id>
    <published>2021-08-10T14:48:12.000Z</published>
    <updated>2021-10-10T05:31:30.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h1><h3 id="父子组件的生命周期"><a href="#父子组件的生命周期" class="headerlink" title="父子组件的生命周期"></a>父子组件的生命周期</h3><h4 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h4><p>父 beforeCreated<br>父 created<br>父 beforeMounted<br>子 beforeCreated<br>子 created<br>子 beforeMounted<br>子 mounted<br>父 mounted</p><h4 id="子更新"><a href="#子更新" class="headerlink" title="子更新"></a>子更新</h4><p>父 beforeUpdate<br>子 beforeUpdate<br>子 updated<br>父 updated</p><h4 id="父更新"><a href="#父更新" class="headerlink" title="父更新"></a>父更新</h4><p>父 beforeupdate<br>父 updated</p><h4 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h4><p>父 beforeDestroy<br>子 beforeDestroy<br>子 destroyed<br>父 destroyed</p><p><strong>子组件必须是同步组件，否则子组件生命周期都在父组件之后</strong></p><h1 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h1><h3 id="完整的导航解析流程"><a href="#完整的导航解析流程" class="headerlink" title="完整的导航解析流程"></a>完整的导航解析流程</h3><ol><li>导航被触发。</li><li>在失活的组件里调用 beforeRouteLeave 守卫。</li><li>调用全局的 beforeEach 守卫。</li><li>在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。</li><li>在路由配置里调用 beforeEnter。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 beforeRouteEnter。</li><li>调用全局的 beforeResolve 守卫 (2.5+)。</li><li>导航被确认。</li><li>调用全局的 afterEach 钩子。</li><li>触发 DOM 更新。</li><li>调用 beforeRouteEnter 守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue&quot;&gt;&lt;a href=&quot;#vue&quot; class=&quot;headerlink&quot; title=&quot;vue&quot;&gt;&lt;/a&gt;vue&lt;/h1&gt;&lt;h3 id=&quot;父子组件的生命周期&quot;&gt;&lt;a href=&quot;#父子组件的生命周期&quot; class=&quot;headerlink&quot; title=&quot;父子组
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>正则学习</title>
    <link href="http://yoursite.com/2021/04/12/%E6%AD%A3%E5%88%99%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2021/04/12/%E6%AD%A3%E5%88%99%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-04-12T19:29:02.000Z</published>
    <updated>2021-10-10T05:31:30.972Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="分割多个匹配的字段"><a href="#分割多个匹配的字段" class="headerlink" title="| 分割多个匹配的字段"></a>| 分割多个匹配的字段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let str &#x3D;&quot;transform(&#39;1.25 发布&#39;)&quot;</span><br><span class="line">let replaceStr&#x3D; str.replace(&#x2F;(^transform\([\&#39;\&quot;]*)|&#x3D;g|&#x3D;|([\&quot;\&#39;]*\)$)&#x2F;g, (a) &#x3D;&gt; &#123;</span><br><span class="line">const info &#x3D; &#123;</span><br><span class="line">  &quot;transform(&#39;&quot;: &#39;&#39;,</span><br><span class="line">  &quot;&#39;)&quot;: &#39;&#39;,</span><br><span class="line">  &#39;&#x3D;&#39;: &#39;&lt;&#x2F;g&gt;&#39;,</span><br><span class="line">  &#39;&#x3D;g&#39;: &#39;&lt;g&gt;&#39;,</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">return info[a]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="原型继承，正则匹配替换、遍历获取json中的键和值"><a href="#原型继承，正则匹配替换、遍历获取json中的键和值" class="headerlink" title="原型继承，正则匹配替换、遍历获取json中的键和值"></a>原型继承，正则匹配替换、遍历获取json中的键和值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">String.prototype.render &#x3D; function(arr)&#123;</span><br><span class="line">var replaceKey &#x3D; [];</span><br><span class="line">var str &#x3D; [];</span><br><span class="line"></span><br><span class="line">for(var key in arr)&#123;</span><br><span class="line">   replaceKey.push(key);</span><br><span class="line">    str.push(arr[key]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var format &#x3D; this;</span><br><span class="line"></span><br><span class="line">for(var i&#x3D;0; i&lt;replaceKey.length;i++)&#123;</span><br><span class="line">    var reg &#x3D; new RegExp(&quot;\\$&#123;&quot; +replaceKey[i]+ &quot;&#125;&quot;, &quot;g&quot;);</span><br><span class="line">    format &#x3D; format.replace(reg,str[i]);</span><br><span class="line">    console.log(format);</span><br><span class="line">&#125;</span><br><span class="line">return format;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var greeting &#x3D; &#39;my name is $&#123;name&#125;, age $&#123;age&#125;&#39;;</span><br><span class="line">var result &#x3D; greeting.render(&#123;&#39;name&#39;:&#39;jack&#39;,&#39;age&#39;:16&#125;);</span><br><span class="line">&#x2F;&#x2F; my name is jack, age $&#123;age&#125;</span><br><span class="line">&#x2F;&#x2F; my name is jack, age 16</span><br></pre></td></tr></table></figure><p><strong>平时写正则是/${name}/就好，但是在new RegExp()不行，因为它的第一个参数是字符串，\在字符串中需要转义为\，所以需要双重转义符\.</strong></p><h3 id="校验手机号"><a href="#校验手机号" class="headerlink" title="校验手机号"></a>校验手机号</h3><h3 id="校验邮箱"><a href="#校验邮箱" class="headerlink" title="校验邮箱"></a>校验邮箱</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$</span><br></pre></td></tr></table></figure><p><strong>\w匹配的仅仅是中文，数字，字母和_</strong><br><strong>匹配中文字符的正则表达式：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[\u4e00-\u9fa5]</span><br></pre></td></tr></table></figure><p><strong>匹配双字节字符(包括汉字在内)：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[^\x00-\xff]</span><br></pre></td></tr></table></figure><p><strong>匹配中文，英文字母和数字及_:^[\u4e00-\u9fa5_a-zA-Z0-9]+$</strong></p><p>1、一个正则表达式，只含有汉字、数字、字母、下划线不能以下划线开头和结尾：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(?!_)(?!.*?_$)[a-zA-Z0-9_\u4e00-\u9fa5]+$</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h3 id=&quot;分割多个匹配的字段&quot;&gt;&lt;a href=&quot;#分割多个匹配的字段&quot; class=&quot;headerlink&quot; title=&quot;| 分割多个匹配的字段&quot;&gt;&lt;/a&gt;| 分割多个匹配的字段&lt;/h3&gt;&lt;figure class=&quot;highlig
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Array方法对比</title>
    <link href="http://yoursite.com/2021/04/12/Array%E6%96%B9%E6%B3%95%E5%AF%B9%E6%AF%94/"/>
    <id>http://yoursite.com/2021/04/12/Array%E6%96%B9%E6%B3%95%E5%AF%B9%E6%AF%94/</id>
    <published>2021-04-12T16:48:40.000Z</published>
    <updated>2021-10-10T05:31:30.964Z</updated>
    
    <content type="html"><![CDATA[<p>各方法的区别，什么情况下用哪个方法比较好</p><p>*因为map生成一个新数组，当你不打算使用返回的新数组却使用map是违背设计初衷的，请用forEach或者for-of替代。你不该使用map: A)你不打算使用返回的新数组，或/且 B) 你没有从回调函数中返回值。</p><p>——由此总结：</p><p>1）需要返回索引，用indexOf ，findIndex() 方法，能用前者不用后者；</p><p>2）需要返回布尔，用includes(), some(), every()；</p><p>3)  需要返回新数组，只要一个符合条件的新数组用find(),  要多个符合条件的新数组用filter(), 包含所有元素运算出来的新数组用map()；</p><p>4）需要循环所有元素，用forEach()</p><p>5)  需要循环部分，用for，符合条件，跳出</p><a id="more"></a><hr><h3 id="1、for-循环-（for…in-for…of）"><a href="#1、for-循环-（for…in-for…of）" class="headerlink" title="1、for 循环 （for…in  for…of）"></a>1、for 循环 （for…in  for…of）</h3><p>1)  in结果是key， of结果是value</p><p>2）in 不保证顺序</p><p>3）in 是可枚举属性<br>4)  in 可以是对象</p><h3 id="2、forEach-amp-map-——没有办法中止或跳出-forEach-循环"><a href="#2、forEach-amp-map-——没有办法中止或跳出-forEach-循环" class="headerlink" title="2、forEach() &amp; map() ——没有办法中止或跳出 forEach() 循环"></a>2、forEach() &amp; map() ——没有办法中止或跳出 forEach() 循环</h3><p>forEach() 方法对数组的每个元素执行一次提供的函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">arr.forEach(callback(currentValue [, index [, array]])[, thisArg]);</span><br><span class="line"></span><br><span class="line">const array1 &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;];</span><br><span class="line"></span><br><span class="line">array1.forEach(element &#x3D;&gt; console.log(element));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; expected output: &quot;a&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; expected output: &quot;b&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; expected output: “c&quot;</span><br></pre></td></tr></table></figure><p>map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var new_array &#x3D; arr.map(function callback(currentValue[, index[, array]]) &#123;</span><br><span class="line"></span><br><span class="line"> &#x2F;&#x2F; Return element for new_array </span><br><span class="line"></span><br><span class="line">&#125;[, thisArg])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const array1 &#x3D; [1, 4, 9, 16];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; pass a function to map</span><br><span class="line"></span><br><span class="line">const map1 &#x3D; array1.map(x &#x3D;&gt; x * 2);</span><br><span class="line"></span><br><span class="line">console.log(map1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; expected output: Array [2, 8, 18, 32]</span><br></pre></td></tr></table></figure><p>3、every() &amp; some() &amp; find() &amp;filter() —满足条件将不再循环</p><p><strong>every()</strong> 方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">arr.every(callback[, thisArg])</span><br><span class="line"></span><br><span class="line">const isBelowThreshold &#x3D; (currentValue) &#x3D;&gt; currentValue &lt; 40;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const array1 &#x3D; [1, 30, 39, 29, 10, 13];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(array1.every(isBelowThreshold));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; expected output: true</span><br></pre></td></tr></table></figure><p><strong>some()</strong> 方法测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">arr.some(callback(element[, index[, array]])[, thisArg])</span><br><span class="line"></span><br><span class="line">const array &#x3D; [1, 2, 3, 4, 5];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; checks whether an element is even</span><br><span class="line"></span><br><span class="line">const even &#x3D; (element) &#x3D;&gt; element % 2 &#x3D;&#x3D;&#x3D; 0;</span><br><span class="line"></span><br><span class="line">console.log(array.some(even));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; expected output: true</span><br></pre></td></tr></table></figure><p><strong>find()</strong> 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">arr.find(callback[, thisArg])</span><br><span class="line"></span><br><span class="line">const array1 &#x3D; [5, 12, 8, 130, 44];</span><br><span class="line"></span><br><span class="line">const found &#x3D; array1.find(element &#x3D;&gt; element &gt; 10);</span><br><span class="line"></span><br><span class="line">console.log(found);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; expected output: 12</span><br></pre></td></tr></table></figure><p><strong>filter()</strong> 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var newArray &#x3D; arr.filter(callback(element[, index[, array]])[, thisArg])</span><br><span class="line"></span><br><span class="line">const words &#x3D; [&#39;spray&#39;, &#39;limit&#39;, &#39;elite&#39;, &#39;exuberant&#39;, &#39;destruction&#39;, &#39;present&#39;];</span><br><span class="line"></span><br><span class="line">const result &#x3D; words.filter(word &#x3D;&gt; word.length &gt; 6);</span><br><span class="line"></span><br><span class="line">console.log(result);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; expected output: Array [&quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;]</span><br></pre></td></tr></table></figure><h3 id="4、indexOf-amp-findIndex-amp-includes-amp-find"><a href="#4、indexOf-amp-findIndex-amp-includes-amp-find" class="headerlink" title="4、indexOf() &amp; findIndex() &amp; includes() &amp; find()"></a>4、indexOf() &amp; findIndex() &amp; includes() &amp; find()</h3><p><strong>findIndex()</strong>方法返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">arr.findIndex(callback[, thisArg])</span><br><span class="line"></span><br><span class="line">const array1 &#x3D; [5, 12, 8, 130, 44];</span><br><span class="line"></span><br><span class="line">const isLargeNumber &#x3D; (element) &#x3D;&gt; element &gt; 13;</span><br><span class="line"></span><br><span class="line">console.log(array1.findIndex(isLargeNumber));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; expected output: 3</span><br></pre></td></tr></table></figure><p><strong>includes()</strong> 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">arr.includes(valueToFind[, fromIndex])</span><br><span class="line"></span><br><span class="line">const array1 &#x3D; [1, 2, 3];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(array1.includes(2));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; expected output: true</span><br></pre></td></tr></table></figure><p><strong>indexOf()</strong>方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr.indexOf(searchElement[, fromIndex])</span><br><span class="line"></span><br><span class="line">var array &#x3D; [2, 5, 9];</span><br><span class="line"></span><br><span class="line">array.indexOf(2);     &#x2F;&#x2F; 0</span><br><span class="line"></span><br><span class="line">array.indexOf(7);     &#x2F;&#x2F; -1</span><br></pre></td></tr></table></figure><p>举例：</p><p>增信中有includes</p><p>春节活动有find</p><p>小明的年级排名</p><p>字符串实例方法：padStart()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(1 +&#39;&#39;).padStart(2, ‘0’) &#x2F;&#x2F; “01”</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#39;12&#39;.padStart(10, &#39;YYYY-MM-DD&#39;) &#x2F;&#x2F; &quot;YYYY-MM-12&quot;</span><br><span class="line"></span><br><span class="line">&#39;09-12&#39;.padStart(10, &#39;YYYY-MM-DD&#39;) &#x2F;&#x2F; &quot;YYYY-09-12&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;各方法的区别，什么情况下用哪个方法比较好&lt;/p&gt;
&lt;p&gt;*因为map生成一个新数组，当你不打算使用返回的新数组却使用map是违背设计初衷的，请用forEach或者for-of替代。你不该使用map: A)你不打算使用返回的新数组，或/且 B) 你没有从回调函数中返回值。&lt;/p&gt;
&lt;p&gt;——由此总结：&lt;/p&gt;
&lt;p&gt;1）需要返回索引，用indexOf ，findIndex() 方法，能用前者不用后者；&lt;/p&gt;
&lt;p&gt;2）需要返回布尔，用includes(), some(), every()；&lt;/p&gt;
&lt;p&gt;3)  需要返回新数组，只要一个符合条件的新数组用find(),  要多个符合条件的新数组用filter(), 包含所有元素运算出来的新数组用map()；&lt;/p&gt;
&lt;p&gt;4）需要循环所有元素，用forEach()&lt;/p&gt;
&lt;p&gt;5)  需要循环部分，用for，符合条件，跳出&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>sql查询</title>
    <link href="http://yoursite.com/2021/03/11/sql%E6%9F%A5%E8%AF%A2/"/>
    <id>http://yoursite.com/2021/03/11/sql%E6%9F%A5%E8%AF%A2/</id>
    <published>2021-03-11T14:49:45.000Z</published>
    <updated>2021-10-10T05:31:30.968Z</updated>
    
    <content type="html"><![CDATA[<p>作为前端，可能认为数据层是后端的需要处理的事情。但现在是大数据时代，往往需要我们在页面中埋点来记录分析用户行为。我们如何检验我们的埋点是否埋上、埋对，就需要我们具有基础数据查询能力。</p><a id="more"></a><p>###基础查询<br>select 列名,列名,列名,列名,列名<br>from 表名<br>where 条件<br>and 条件<br>or 条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select date, user_id, distinct_id </span><br><span class="line">from</span><br><span class="line">events</span><br><span class="line">where date &gt;&#x3D; &#39;2021-03-01&#39;</span><br><span class="line">and event&#x3D;&#39;H5PageView&#39;</span><br><span class="line">and filename&#x3D;&#39;H5_WA_PaymentSuccess&#39;</span><br></pre></td></tr></table></figure><h3 id="limit-条数"><a href="#limit-条数" class="headerlink" title="limit 条数"></a>limit 条数</h3><p>假如不限制条数，查询的数据特别多的话，会非常慢，limit来限制返回多少条符合结果的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select date, user_id, distinct_id,project_uuid</span><br><span class="line">from</span><br><span class="line">events</span><br><span class="line">where date &gt;&#x3D; &#39;2021-03-01&#39;</span><br><span class="line">and event&#x3D;&#39;H5PageView&#39;</span><br><span class="line">and filename&#x3D;&#39;H5_WA_PaymentSuccess&#39;</span><br><span class="line">limit 10</span><br></pre></td></tr></table></figure><h3 id="group-by-列名"><a href="#group-by-列名" class="headerlink" title="group by 列名"></a>group by 列名</h3><p>将查询结果按**(列名)分组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select date</span><br><span class="line">from</span><br><span class="line">events</span><br><span class="line">where date &gt;&#x3D; &#39;2021-03-01&#39;</span><br><span class="line">and event&#x3D;&#39;H5PageView&#39;</span><br><span class="line">and filename&#x3D;&#39;H5_WA_PaymentSuccess&#39;</span><br><span class="line">group by date</span><br></pre></td></tr></table></figure><h3 id="distinct-列名"><a href="#distinct-列名" class="headerlink" title="distinct 列名"></a>distinct 列名</h3><p>根据列名去重</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select date, distinct user_id</span><br><span class="line">from</span><br><span class="line">events</span><br><span class="line">where date &gt;&#x3D; &#39;2021-03-01&#39;</span><br><span class="line">and event&#x3D;&#39;H5PageView&#39;</span><br><span class="line">and filename&#x3D;&#39;H5_WA_PaymentSuccess&#39;</span><br><span class="line">group by date</span><br></pre></td></tr></table></figure><h3 id="as-列名-as-自己起的名字"><a href="#as-列名-as-自己起的名字" class="headerlink" title="as (列名 as 自己起的名字)"></a>as (列名 as 自己起的名字)</h3><p>为列名起个别名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select date as &#39;日期&#39;, distinct user_id</span><br><span class="line">from</span><br><span class="line">events</span><br><span class="line">where date &gt;&#x3D; &#39;2021-03-01&#39;</span><br><span class="line">and event&#x3D;&#39;H5PageView&#39;</span><br><span class="line">and filename&#x3D;&#39;H5_WA_PaymentSuccess&#39;</span><br><span class="line">group by date</span><br></pre></td></tr></table></figure><h3 id="order-by-列名"><a href="#order-by-列名" class="headerlink" title="order by 列名"></a>order by 列名</h3><p>根据日期这一列来排序，可选择升序asc，和降序desc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select date as &#39;日期&#39;, distinct user_id</span><br><span class="line">from</span><br><span class="line">events</span><br><span class="line">where date &gt;&#x3D; &#39;2021-03-01&#39;</span><br><span class="line">and event&#x3D;&#39;H5PageView&#39;</span><br><span class="line">and filename&#x3D;&#39;H5_WA_PaymentSuccess&#39;</span><br><span class="line">order by date desc</span><br></pre></td></tr></table></figure><h3 id="count-列名"><a href="#count-列名" class="headerlink" title="count(列名)"></a>count(列名)</h3><p>根据列名统计总数，也可以用count(*)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select date as &#39;日期&#39;, count(distinct user_id)</span><br><span class="line">from</span><br><span class="line">events</span><br><span class="line">where date &gt;&#x3D; &#39;2021-03-01&#39;</span><br><span class="line">and event&#x3D;&#39;H5PageView&#39;</span><br><span class="line">and filename&#x3D;&#39;H5_WA_PaymentSuccess&#39;</span><br><span class="line">group by date desc</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>不同的数据库支持的函数不同。下面所用函数为<a href="https://impala.apache.org/docs/build/html/topics/impala_functions.html" target="_blank" rel="noopener">impala提供</a></p><p>Impala Mathematical Functions–数学方法<br>Impala Type Conversion Functions–转换方法<br>Impala Date and Time Functions–日期和事件方法<br>Impala Conditional Functions–条件方法<br>Impala String Functions–字符串方法<br>Impala Aggregate Functions–聚合方法<br>Impala Analytic Functions–分析方法<br>Impala Bit Functions–二进制方法<br>Impala Miscellaneous Functions–混杂方法</p><p>如下<br>cast( <strong>* as DECIMAL(9,8)) 将*</strong>转换为数字，精度为9，小数位为8</p><p>GET_JSON_OBJECT(字符串形式的json, ‘$.key值’) 将字符串形式的json转换为json，并取json中的这个key值。</p><p>replace(原始字符串, ‘要被替换的字符串’, ‘替换的字符串’) 替换字符串</p><p>parse_url(原始url, ‘QUERY’) –第二个参数可选值’PROTOCOL’, ‘HOST’, ‘PATH’, ‘REF’, ‘AUTHORITY’, ‘FILE’, ‘USERINFO’, or ‘QUERY’<br>第二个参数是’QUERY’，还可以有第三个参数parse_url(原始url, ‘QUERY’, ‘url参数的key’)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select date,</span><br><span class="line"> cast(GET_JSON_OBJECT(REPLACE(ExtraInfo, &#39;\\&#39;, &#39;&#39;),&#39;$.qscrnd&#39;) as DECIMAL(9,8)) as qscrnd ,</span><br><span class="line"> parse_url(origin_url, &#39;QUERY&#39;, &#39;projuuid&#39;) as project_uuid </span><br><span class="line">from</span><br><span class="line">events</span><br><span class="line">where date &gt;&#x3D; &#39;2021-03-01&#39;</span><br><span class="line">and event&#x3D;&#39;H5PageView&#39;</span><br><span class="line">and filename&#x3D;&#39;H5_WA_PaymentSuccess&#39;</span><br><span class="line">order by date</span><br></pre></td></tr></table></figure><h3 id="主表-join-副表-on-以-提交件"><a href="#主表-join-副表-on-以-提交件" class="headerlink" title="主表 join 副表 on 以**提交件"></a>主表 join 副表 on 以**提交件</h3><p>结合两张表来查询，也可以结合两个查询结果来查询。</p><h3 id="case-when-条件-then-输出-end"><a href="#case-when-条件-then-输出-end" class="headerlink" title="case when 条件 then 输出 end"></a>case when 条件 then 输出 end</h3><p>整合条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">select pv.date,</span><br><span class="line">case </span><br><span class="line">   when pv.qscrnd &lt; 0.5 </span><br><span class="line">   then &#39;&lt;0.5&#39;</span><br><span class="line">   when pv.qscrnd &gt;&#x3D; 0.5 </span><br><span class="line">   then &#39;&gt;0.5&#39;</span><br><span class="line">end as qscrnd,</span><br><span class="line"></span><br><span class="line">count(*) as pv, </span><br><span class="line">count(distinct pv.user_id) as uv</span><br><span class="line"></span><br><span class="line">from (</span><br><span class="line">    select date, user_id, distinct_id,project_uuid,</span><br><span class="line">      cast(GET_JSON_OBJECT(REPLACE(ExtraInfo, &#39;\\&#39;, &#39;&#39;),&#39;$.qscrnd&#39;) as DECIMAL(9,8)) as qscrnd </span><br><span class="line">    from</span><br><span class="line">    events</span><br><span class="line">    where date &gt;&#x3D; &#39;2021-03-01&#39;</span><br><span class="line">    and event&#x3D;&#39;H5PageView&#39;</span><br><span class="line">    and filename&#x3D;&#39;H5_WA_PaymentSuccess&#39;</span><br><span class="line">    --and filevalue&#x3D;&#39;H5_WA_PaymentSuccess&#39;</span><br><span class="line">  ) pv </span><br><span class="line">  </span><br><span class="line">  join (</span><br><span class="line">    select user_id, distinct_id,project_uuid</span><br><span class="line">    from</span><br><span class="line">    events</span><br><span class="line">    where date &gt;&#x3D; &#39;2021-03-01&#39;</span><br><span class="line">    and event &#x3D; &#39;FileClick&#39;</span><br><span class="line">    and filename&#x3D;&#39;Button_RedPocket&#39;</span><br><span class="line">    and filevalue&#x3D;&#39;H5_WA_PaymentSuccess&#39;</span><br><span class="line">  ) click</span><br><span class="line">  on pv.user_id &#x3D; click.user_id</span><br><span class="line">  --and pv.project_uuid &#x3D; click.project_uuid</span><br><span class="line"></span><br><span class="line">group by date, qscrnd</span><br><span class="line">order by date desc</span><br></pre></td></tr></table></figure><img style="margin: 0" src="/2021/03/11/sql%E6%9F%A5%E8%AF%A2/1615456235396.jpg">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为前端，可能认为数据层是后端的需要处理的事情。但现在是大数据时代，往往需要我们在页面中埋点来记录分析用户行为。我们如何检验我们的埋点是否埋上、埋对，就需要我们具有基础数据查询能力。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>网页性能优化</title>
    <link href="http://yoursite.com/2021/03/01/%E7%BD%91%E9%A1%B5%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-1/"/>
    <id>http://yoursite.com/2021/03/01/%E7%BD%91%E9%A1%B5%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-1/</id>
    <published>2021-03-01T09:42:28.000Z</published>
    <updated>2021-10-10T05:31:30.972Z</updated>
    
    <content type="html"><![CDATA[<p>一次性能优化实战经验总结</p><a id="more"></a><h3 id="关键节点数据采集"><a href="#关键节点数据采集" class="headerlink" title="关键节点数据采集"></a>关键节点数据采集</h3><p>如html加载完成时间点、js加载完成时间点、接口请求时间点、首屏渲染时间点</p><p>测试了请求6个并行接口和请求一个合并接口的时间，大致相同。400ms左右。后端检测到他们的时间是几十ms。优化意义不大。</p><p>因此，这次优化工作的重点放在前端。</p><h3 id="将首屏串行接口请求全部改为并行请求。"><a href="#将首屏串行接口请求全部改为并行请求。" class="headerlink" title="将首屏串行接口请求全部改为并行请求。"></a>将首屏串行接口请求全部改为并行请求。</h3><p>若依赖前一接口的返回，则和后端沟通是否合并接口。</p><h3 id="对需要登录的页面，去掉页面最开始是否登录的接口请求。"><a href="#对需要登录的页面，去掉页面最开始是否登录的接口请求。" class="headerlink" title="对需要登录的页面，去掉页面最开始是否登录的接口请求。"></a>对需要登录的页面，去掉页面最开始是否登录的接口请求。</h3><p>在请求首页页面数据接口时，会知道用户是否登录，如页面需强制登录，则根据某一字段判断是否跳转登录。这样，就减少了一个串行接口，大约减时400ms。</p><p>接下来是页面级的优化：</p><h3 id="首屏组件及任何父组件都应为同步加载"><a href="#首屏组件及任何父组件都应为同步加载" class="headerlink" title="首屏组件及任何父组件都应为同步加载"></a>首屏组件及任何父组件都应为同步加载</h3><p>对vue开发的网站，会先加载html，再加载html里引入的app.js，js中的代码去渲染页面，首屏代码不用同步方式加载的话，app.js下载完成，还需要串行去加载渲染首屏的的js。时间就被浪费掉了。</p><p>然后发现，app.js太大了，于是决定对js进行拆包。</p><h3 id="最大化利用浏览器并行请求数对首屏拆包，减小包的大小。用webpack-bundle-analyzer分析哪些可拆"><a href="#最大化利用浏览器并行请求数对首屏拆包，减小包的大小。用webpack-bundle-analyzer分析哪些可拆" class="headerlink" title="最大化利用浏览器并行请求数对首屏拆包，减小包的大小。用webpack-bundle-analyzer分析哪些可拆"></a>最大化利用浏览器并行请求数对首屏拆包，减小包的大小。用webpack-bundle-analyzer分析哪些可拆</h3><p>以chrome为例：同域名下最大并行请求数为6个。注意看有没有同域下的css、img占用资源数是否影响js的并行。</p><p>拆完包，发现首屏渲染速度反而变慢了……</p><h3 id="首屏同步加载部分组件"><a href="#首屏同步加载部分组件" class="headerlink" title="首屏同步加载部分组件"></a>首屏同步加载部分组件</h3><p>分析变慢的原因是整体包的大小，比未拆包前稍微大一点，而带宽资源有限。于是想首屏只加载部分组件，将整体包大小减小了1/3,上线后首屏渲染速度明显大幅提升</p><p> <strong>放在head中的js文件比body中的js文件加载优先级高</strong></p><h3 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h3><p>prefetch 预加载其它页面所需的资源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import(</span><br><span class="line">  &#96;.&#x2F;utilities&#x2F;divide&#96;</span><br><span class="line">  &#x2F;* webpackPrefetch: true *&#x2F;</span><br><span class="line">  &#x2F;* webpackChunkName: &quot;utilities&quot; *&#x2F;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>以上的导入会让<link rel="prefetch" as="script" href="utilities.js">被添加至页面的头部。因此浏览器会在空闲时间预先拉取该文件。</p><p>异步chunk会和父级chunk并行加载(webpack4.46并未实验成功)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* webpackPreload: true *&#x2F;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.cnblogs.com/powertoolsteam/p/10873677.html" target="_blank" rel="noopener">Webpack 4教程 - 第八部分 使用prefetch和preload进行动态加载</a></p><h3 id="去掉ajax的mothed为option的请求"><a href="#去掉ajax的mothed为option的请求" class="headerlink" title="去掉ajax的mothed为option的请求"></a>去掉ajax的mothed为option的请求</h3><p>由于浏览器的同源策略，非简单请求会发送option进行预检。猜测预检请求会影响加载速度，待验证</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://www.cnblogs.com/cczlovexw/p/11754301.html" target="_blank" rel="noopener">页面加载性能优化</a><br><a href="https://blog.csdn.net/haha223545/article/details/79675304" target="_blank" rel="noopener">H5首屏秒开方案探讨</a><br><a href="https://zhuanlan.zhihu.com/p/67098966" target="_blank" rel="noopener">页面性能优化办法有哪些？</a></p><p><a href="https://www.jianshu.com/p/cd7de34a759d" target="_blank" rel="noopener">Web性能优化-CSS和js的装载与执行</a></p><p><a href="https://blog.csdn.net/xiaoduanayu/article/details/78386508" target="_blank" rel="noopener">HTTP keep-alive详解</a><br><a href="https://www.cnblogs.com/skynet/archive/2010/12/11/1903347.html" target="_blank" rel="noopener">HTTP头字段总结</a><br><a href="https://www.cnblogs.com/TankXiao/archive/2012/10/10/2711777.html" target="_blank" rel="noopener">Wireshark基本介绍和学习TCP三次握手</a></p><p><a href="https://www.cnblogs.com/ljx20180807/p/13543487.html" target="_blank" rel="noopener">前端常用性能优化方法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一次性能优化实战经验总结&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>私有npm包创建及引用</title>
    <link href="http://yoursite.com/2021/01/29/%E7%A7%81%E6%9C%89npm%E5%8C%85%E5%88%9B%E5%BB%BA%E5%8F%8A%E5%BC%95%E7%94%A8/"/>
    <id>http://yoursite.com/2021/01/29/%E7%A7%81%E6%9C%89npm%E5%8C%85%E5%88%9B%E5%BB%BA%E5%8F%8A%E5%BC%95%E7%94%A8/</id>
    <published>2021-01-29T21:36:43.000Z</published>
    <updated>2021-10-10T05:31:30.972Z</updated>
    
    <content type="html"><![CDATA[<p>私有npm包创建和开发</p><a id="more"></a><h3 id="npm包创建"><a href="#npm包创建" class="headerlink" title="npm包创建"></a>npm包创建</h3><p>npm init</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">This utility will walk you through creating a package.json file.</span><br><span class="line">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class="line"></span><br><span class="line">See &#96;npm help json&#96; for definitive documentation on these fields</span><br><span class="line">and exactly what they do.</span><br><span class="line"></span><br><span class="line">Use &#96;npm install &lt;pkg&gt;&#96; afterwards to install a package and</span><br><span class="line">save it as a dependency in the package.json file.</span><br><span class="line"></span><br><span class="line">Press ^C at any time to quit.</span><br><span class="line">package name: (test)</span><br></pre></td></tr></table></figure><p>根据提示输入包名、版本、描述、入口文件、测试指令、keywords、author等，不需要更改的直接回车。</p><p>生成package.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;shareguidemask&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;a npm packege includes share guide mask&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [</span><br><span class="line">    &quot;shareGuideMask&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;author&quot;: &quot;jing&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;vue&quot;: &quot;^2.6.12&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写好程序，在入口文件index.js export</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import vue from &#39;vue&#39;;</span><br><span class="line">import app from &#39;.&#x2F;src&#x2F;index.vue&#39;;</span><br><span class="line">export default app;</span><br></pre></td></tr></table></figure><h3 id="推到仓库"><a href="#推到仓库" class="headerlink" title="推到仓库"></a>推到仓库</h3><p>加入git版本控制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>提交到gitHub仓库做实验</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git ci -m &#39;massege&#39;</span><br></pre></td></tr></table></figure><p>添加远程仓库地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:jingjing1205315&#x2F;</span><br></pre></td></tr></table></figure><p>推到远程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h3 id="私有项目用npm包的方式引入"><a href="#私有项目用npm包的方式引入" class="headerlink" title="私有项目用npm包的方式引入"></a>私有项目用npm包的方式引入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;npm包名&gt; --registry&#x3D;&lt;npm包源&gt;</span><br></pre></td></tr></table></figure><h3 id="打包报错"><a href="#打包报错" class="headerlink" title="打包报错"></a>打包报错</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Vue warn]: You are using the runtime-only build of Vue where the template c</span><br></pre></td></tr></table></figure><p>因为vue包入口文件是runtime模式,这样引入的单文件组件就不能compiler，解决方式是webpack config中设置到compiler模式的vue别名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    &#x2F;&#x2F; 省略...</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        alias: &#123;</span><br><span class="line">            &#39;vue&#39;: &#39;vue&#x2F;dist&#x2F;vue.js&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/wxl1555/article/details/83187647" target="_blank" rel="noopener">You are using the runtime-only build of Vue where the template compiler is not available. Either pre</a></p><p><a href="https://www.pianshen.com/article/4406262022/" target="_blank" rel="noopener">VUE问题：You are using the runtime-only build of Vue where the template compiler is not available.</a></p><h3 id="开发阶段修改私有npm包"><a href="#开发阶段修改私有npm包" class="headerlink" title="开发阶段修改私有npm包"></a>开发阶段修改私有npm包</h3><p>npm包修改，需要重新发版。项目中要安装相应的npm包版本，非常繁琐。找到了软连接的方式来做npm包修改的调试。</p><p>进入npm包的文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm link</span><br></pre></td></tr></table></figure><p>回到项目的文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm link &lt;包名&gt;</span><br></pre></td></tr></table></figure><p>这时，修改npm包的内容，可以实时展现在项目中。调试起来很方便。</p><p><a href="https://www.jianshu.com/p/d0c887cf730e?utm_campaign" target="_blank" rel="noopener">npm 私有包依赖 本地开发调试频繁更新解决方案</a></p><h3 id="引入项目-No-ESLint-configuration-found报错"><a href="#引入项目-No-ESLint-configuration-found报错" class="headerlink" title="引入项目 No ESLint configuration found报错"></a>引入项目 No ESLint configuration found报错</h3><p> vue cli3解决办法 // vue.config.js添加如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  chainWebpack: config &#x3D;&gt; config.resolve.symlinks(false)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>webpack项目 webpack.config.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  &#x2F;&#x2F;...</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    symlinks: false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_35261296/article/details/103990046" target="_blank" rel="noopener">webpack项目，link本地包出现No ESLint configuration found 问题解决</a></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://www.cnblogs.com/cag2050/p/10724196.html" target="_blank" rel="noopener">如何安装私有 npm 包？</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;私有npm包创建和开发&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>git 命令</title>
    <link href="http://yoursite.com/2021/01/20/git-%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2021/01/20/git-%E5%91%BD%E4%BB%A4/</id>
    <published>2021-01-20T20:10:50.000Z</published>
    <updated>2021-10-10T05:31:30.964Z</updated>
    
    <content type="html"><![CDATA[<p>log,diff,reset,checkout</p><a id="more"></a><h3 id="冲突解决"><a href="#冲突解决" class="headerlink" title="冲突解决"></a>冲突解决</h3><p>查看暂存区中记录的冲突文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-files -s</span><br></pre></td></tr></table></figure><p>日志如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">100644 ea9df2ef42c073de18bde4ebdf50e0ac6b1cdd2d 2 README.txt </span><br><span class="line">100644 633d2ed9d0ae01d0d07136c5b5bd857e4d945c14 3 README.txt </span><br><span class="line">100644 17874eaa4a398cc94ed294c93fdbf50f7f843d88 0 team&#x2F;user1.txt </span><br><span class="line">100644 2dcb7b6ac06d93ea8e6af21ded690f5e171a407c 0 team&#x2F;user2.txt</span><br></pre></td></tr></table></figure><p>编号为2表示暂存区用于保存冲突文件在当前分支中修改的副本，查看该文件的内容执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show :2:README.txt</span><br></pre></td></tr></table></figure><p>编号为3的为暂存区用于保存当前冲突文件在合并版本中修改的副本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show :3:README.txt</span><br></pre></td></tr></table></figure><p>最后看看工作区的README.txt文件的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat README.txt</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD&quot;</span><br><span class="line">Hello, user2.</span><br><span class="line">&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;</span><br><span class="line">&quot;Hello, user1.&quot;</span><br><span class="line">“&gt;&gt;&gt;&gt;&gt;&gt;&gt; 04eed972e27e23a9874f984f08d6567e565d3436”</span><br></pre></td></tr></table></figure><p>手动解决这个冲突</p><p>选择我的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">todo</span><br></pre></td></tr></table></figure><p>选择他人的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">todo</span><br></pre></td></tr></table></figure><p>工作区和暂存区都干净时，都不要了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard FETCH_HEAD</span><br><span class="line">或</span><br><span class="line">git merge --abort</span><br></pre></td></tr></table></figure><p>git add -u -u参数表示把工作区被跟踪的文件添加到暂存区</p><p>编号都变成0，这样就说明已经成功解决了冲突。</p><h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">commit 96f50451c6f24a221c58c58a8cae136858fed97e (HEAD -&gt; master)</span><br><span class="line">Author: April &lt;zhangyajing1205315@163.com&gt;</span><br><span class="line">Date:   Thu Jan 21 19:57:50 2021 +0800</span><br><span class="line"></span><br><span class="line">    change readme.md</span><br><span class="line"></span><br><span class="line">commit 347e5597bb222237bc4c61d87a232cfb5ab24916</span><br><span class="line">Author: April &lt;zhangyajing1205315@163.com&gt;</span><br><span class="line">Date:   Thu Jan 21 19:56:37 2021 +0800</span><br><span class="line"></span><br><span class="line">    add a readme.md</span><br><span class="line"></span><br><span class="line">commit 4d4ddfc6ca37c81b62a576bf47b47144cb63bd3e</span><br><span class="line">Author: April &lt;zhangyajing1205315@163.com&gt;</span><br><span class="line">Date:   Thu Jan 21 19:54:08 2021 +0800</span><br><span class="line"></span><br><span class="line">    init</span><br></pre></td></tr></table></figure><p>这时的git reflog 是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">96f5045 (HEAD -&gt; master) HEAD@&#123;0&#125;: commit: change readme.md</span><br><span class="line">347e559 HEAD@&#123;1&#125;: commit: add a readme.md</span><br><span class="line">4d4ddfc HEAD@&#123;2&#125;: commit (initial): init</span><br></pre></td></tr></table></figure><p>(第四条操作)在干净的工作区，git reset –hard 什么也不会发生</p><p>(第五条操作）回退一个版本 git reset –hard HEAD^ <strong>（log记录仅剩两条）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">commit 347e5597bb222237bc4c61d87a232cfb5ab24916 (HEAD -&gt; master)</span><br><span class="line">Author: April &lt;zhangyajing1205315@163.com&gt;</span><br><span class="line">Date:   Thu Jan 21 19:56:37 2021 +0800</span><br><span class="line"></span><br><span class="line">    add a readme.md</span><br><span class="line"></span><br><span class="line">commit 4d4ddfc6ca37c81b62a576bf47b47144cb63bd3e</span><br><span class="line">Author: April &lt;zhangyajing1205315@163.com&gt;</span><br><span class="line">Date:   Thu Jan 21 19:54:08 2021 +0800</span><br><span class="line"></span><br><span class="line">    init</span><br><span class="line">(END)</span><br></pre></td></tr></table></figure><p>这时 git reflog 是这样<strong>(用来记录你的每一次命令，保留了所有的log)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">347e559 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to HEAD^</span><br><span class="line">96f5045 HEAD@&#123;1&#125;: reset: moving to HEAD</span><br><span class="line">96f5045 HEAD@&#123;2&#125;: commit: change readme.md</span><br><span class="line">347e559 (HEAD -&gt; master) HEAD@&#123;3&#125;: commit: add a readme.md</span><br><span class="line">4d4ddfc HEAD@&#123;4&#125;: commit (initial): init</span><br></pre></td></tr></table></figure><h4 id="git-log-–pretty-oneline"><a href="#git-log-–pretty-oneline" class="headerlink" title="git log –pretty=oneline"></a>git log –pretty=oneline</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f571563b5593893b5daed871fc03575b32133046 (HEAD -&gt; learn_git_branch) Merge branch &#39;prelive&#39; of code.qschou.com:qschou&#x2F;h5_fund into prelive</span><br><span class="line">9d51a3471043a39203be9178cbafc98b0e70d71d Merge branch &#39;feature-73979557-zyj更换项目分享内容&#39; into prelive</span><br><span class="line">ebf3439722718482b1bf283d45cd4ac70c681392 Merge branch &#39;xc-baodai&#39; into prelive</span><br><span class="line">566971c7776e9b9c699a33b3ecb6f35f35b65e91 (origin&#x2F;xc-baodai) no message</span><br></pre></td></tr></table></figure><h3 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h3><p>追踪当前<strong>修改</strong>内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">diff --git a&#x2F;source&#x2F;_posts&#x2F;Linux-Command.md b&#x2F;source&#x2F;_posts&#x2F;Linux-Command.md</span><br><span class="line">index b65319c..b53b18d 100644</span><br><span class="line">--- a&#x2F;source&#x2F;_posts&#x2F;Linux-Command.md</span><br><span class="line">+++ b&#x2F;source&#x2F;_posts&#x2F;Linux-Command.md</span><br><span class="line">@@ -9,7 +9,7 @@ tags:</span><br><span class="line"> print working directory</span><br><span class="line"> touch 文件名</span><br><span class="line"></span><br><span class="line">-</span><br><span class="line">+### mkdir 新建目录</span><br></pre></td></tr></table></figure><p> 新建的文件不会出现在这里。这时的git st 是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> On branch gh-pages</span><br><span class="line">Your branch is up to date with &#39;origin&#x2F;gh-pages&#39;.</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">new file:   &quot;source&#x2F;_posts&#x2F;git-\345\221\275\344\273\244.md&quot;</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">modified:   source&#x2F;_posts&#x2F;Linux-Command.md</span><br></pre></td></tr></table></figure><h3 id="git-reset-–hard-恢复文件为HEAD版本"><a href="#git-reset-–hard-恢复文件为HEAD版本" class="headerlink" title="git reset –hard 恢复文件为HEAD版本"></a>git reset –hard 恢复文件为HEAD版本</h3><p>可以恢复Changes not staged for commit中的文件。</p><p>这时<strong>git st</strong>的结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">n branch master</span><br><span class="line">Your branch is up to date with &#39;origin&#x2F;master&#39;.</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line"></span><br><span class="line">        ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;css&#x2F;main_4b080aac.min.css</span><br><span class="line">        ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;js&#x2F;0.4b080aac.lazy.js</span><br><span class="line">        ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;js&#x2F;1.4b080aac.lazy.js</span><br><span class="line">        ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;js&#x2F;2.4b080aac.lazy.js</span><br><span class="line">        ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;js&#x2F;3.4b080aac.lazy.js</span><br><span class="line">        ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;js&#x2F;main_4b080aac.min.js</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br></pre></td></tr></table></figure><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>有两种方式，revert和reset</p><h4 id="git-revert-n-版本号"><a href="#git-revert-n-版本号" class="headerlink" title="git revert -n 版本号"></a>git revert -n 版本号</h4><p>指不要这个提交，其它提交还保留</p><h4 id="git-reset-–hard-版本号"><a href="#git-reset-–hard-版本号" class="headerlink" title="git reset –hard 版本号"></a>git reset –hard 版本号</h4><p>指回退到这个版本，后面的提交都不要。</p><p>在Git中，用HEAD表示当前版本，也就是最新的提交1094adb…（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 回到前一个版本</span><br><span class="line">$ git reset --hard HEAD^</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 去到任一版本，cimmit记录的版本号1094a</span><br><span class="line">$ git reset --hard 1094a</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 所有版本的记录</span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><p>打包后未add<br>出现两部分内容<br>Changes not staged for commit:（对之前文件的修改）<br>Untracked files:（新生产的文件）<br><strong>git st</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">On branch master</span><br><span class="line">Your branch is up to date with &#39;origin&#x2F;master&#39;.</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add&#x2F;rm &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">        deleted:    ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;css&#x2F;main_bdeaeb84.min.css</span><br><span class="line">        modified:   ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;index.html</span><br><span class="line">        deleted:    ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;js&#x2F;0.bdeaeb84.lazy.js</span><br><span class="line">        deleted:    ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;js&#x2F;1.bdeaeb84.lazy.js</span><br><span class="line">        deleted:    ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;js&#x2F;2.bdeaeb84.lazy.js</span><br><span class="line">        deleted:    ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;js&#x2F;3.bdeaeb84.lazy.js</span><br><span class="line">        deleted:    ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;js&#x2F;main_bdeaeb84.min.js</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line"></span><br><span class="line">        ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;css&#x2F;main_4b080aac.min.css</span><br><span class="line">        ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;js&#x2F;0.4b080aac.lazy.js</span><br><span class="line">        ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;js&#x2F;1.4b080aac.lazy.js</span><br><span class="line">        ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;js&#x2F;2.4b080aac.lazy.js</span><br><span class="line">        ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;js&#x2F;3.4b080aac.lazy.js</span><br><span class="line">        ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;js&#x2F;main_4b080aac.min.js</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure><h4 id="git-checkout-–-文件名"><a href="#git-checkout-–-文件名" class="headerlink" title="git checkout – 文件名"></a>git checkout – 文件名</h4><p>– 文件名 不可少，要不然会变成切换分支<br>也可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout</span><br></pre></td></tr></table></figure><p><strong>下面文字的理解是：checkout 只能恢复没有add的修改</strong></p><blockquote><p>–以下来自廖雪峰的git<br>命令git checkout – readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：</p></blockquote><blockquote><p>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p></blockquote><blockquote><p>一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p></blockquote><blockquote><p>总之，就是让这个文件回到最近一次git commit或git add时的状态。</p></blockquote><ol><li>如果已经add 了，用git reset HEAD <file>,文件修改保留，只是从暂存区回到了工作区</file></li><li>已commit，用git reset HEAD^ 回退到上一个版本。文件修改保留，修改从仓库回到了工作区</li><li>git reset HEAD –hard 回到最后一次commit的版本，并且修改不会保留(无论修改是在工作区还是暂存区)(对untrack的修改没有)</li><li>git rm 只能删除版本库里的文件，对untrack的也没用。untrack文件add进暂存区，可以用git rm 文件名 –catched回到工作区。用git rm 文件名 -f 可以彻底删除文件。</li><li>git clean -f 清空工作区的untrack,但对not  staged的修改无效。</li></ol><p>参考：<br><a href="https://blog.csdn.net/weixin_43664308/article/details/100083246" target="_blank" rel="noopener">Git 清空工作区和暂存区</a><br><a href="https://www.liaoxuefeng.com/wiki/896043488029600/897271968352576" target="_blank" rel="noopener">廖雪峰Git教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;log,diff,reset,checkout&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Linux Command</title>
    <link href="http://yoursite.com/2021/01/14/Linux-Command/"/>
    <id>http://yoursite.com/2021/01/14/Linux-Command/</id>
    <published>2021-01-14T19:05:45.000Z</published>
    <updated>2021-10-10T05:31:30.964Z</updated>
    
    <content type="html"><![CDATA[<p>vim, cat, pwd, mkdir,touch, ls, chmod, chown, chgrp</p><a id="more"></a><hr><h3 id="sudo-lsof-i-1025-查看端口1025被什么程序占用"><a href="#sudo-lsof-i-1025-查看端口1025被什么程序占用" class="headerlink" title="sudo lsof -i:1025 查看端口1025被什么程序占用"></a>sudo lsof -i:1025 查看端口1025被什么程序占用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COMMAND   PID USER   FD   TYPE             DEVICE SIZE&#x2F;OFF NODE NAME</span><br><span class="line">node    63350 jing   24u  IPv4 0x506ba2f2071e30df      0t0  TCP localhost:blackjack (LISTEN)</span><br></pre></td></tr></table></figure><p>杀掉pid未63350的进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo kill -9 63350</span><br></pre></td></tr></table></figure><h3 id="vim-gitignore"><a href="#vim-gitignore" class="headerlink" title="vim .gitignore"></a>vim .gitignore</h3><p>编辑文件</p><h3 id="cat-gitignore"><a href="#cat-gitignore" class="headerlink" title="cat .gitignore"></a>cat .gitignore</h3><p>查看文件</p><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><p>print working directory<br>touch 文件名</p><h3 id="mkdir-新建目录"><a href="#mkdir-新建目录" class="headerlink" title="mkdir 新建目录"></a>mkdir 新建目录</h3><p>mkdir 目录名</p><h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><p>创建文件<br>touch 文件名</p><h3 id="ls-a"><a href="#ls-a" class="headerlink" title="ls -a"></a>ls -a</h3><p>可看到隐藏文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls -a</span><br><span class="line"></span><br><span class="line">.                 .DS_Store         .gitignore        _config.yml       node_modules      package.json      scaffolds         themes</span><br><span class="line">..                .git              .travis.yml       db.json           package-lock.json public            source</span><br></pre></td></tr></table></figure><h3 id="ls-l"><a href="#ls-l" class="headerlink" title="ls -l"></a>ls -l</h3><p>查看文件权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">total 0</span><br><span class="line">drwxr-xr-x  31 jing  staff  992 Jan 14 19:09 _posts</span><br><span class="line">drwxr-xr-x   3 jing  staff   96 Jul  7  2020 about</span><br><span class="line">drwxr-xr-x   3 jing  staff   96 Jul  7  2020 archives</span><br><span class="line">drwxr-xr-x   3 jing  staff   96 Jul  7  2020 categories</span><br><span class="line">drwxr-xr-x   3 jing  staff   96 Jul  7  2020 tags</span><br></pre></td></tr></table></figure><p><strong>字段含义：<br>-文件类型权限<br>-文件硬链接数（如果是一个目录，则第2字段表示该目录所含子目录的个数。空文件为2，1个目录为指向自己，一个目录为指向附近）<br>-所属用户<br>-所属群组<br>-文件所占用的空间(以字节为单位)<br>-文件（目录）<br>-最近访问（修改）时间<br>-文件名</strong></p><p><strong>权限：</strong><br>drwxr-xr-x/-rwxr-xr-x共10位，第一位代表类型，后面三位一组分别代表：文件拥有者的权限，文件所属组拥有的权限，其他用户拥有的权限</p><p><strong>权限中第一位类型：</strong></p><ol><li>d: directory</li><li>-: 普通文件</li><li>l: 链接文件link</li><li>b: 块设备文件(block)一般置于/dev目录下，设备文件是普通文件和程序访问硬件设备的入口，是很特殊的文件。没有文件大小，只有一个主设备号和一个辅设备号。一次传输数据为一整块的被称为块设备，如硬盘、光盘等。最小数据传输单位为一个数据块(通常一个数据块的大小为512字节)</li><li>c: 字符设备文件(character) 一般置于/dev目录下，一次传输一个字节的设备被称为字符设备，如键盘、字符终端等，传输数据的最小单位为一个字节。</li><li>p: 命令管道文件。与shell编程有关的文件。</li><li>s: sock文件。与shell编程有关的文件。</li></ol><p><strong>权限字母其余位字母含义：</strong><br>r: read<br>w: write<br>x: eXecute</p><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><p><strong>例:对/opt/Oracle/目录下的所有文件与子目录执行相同的权限变更：</strong></p><p>chmod -R(递归) 700(权限) 目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 700 &#x2F;opt&#x2F;oracle&#x2F;</span><br></pre></td></tr></table></figure><p>-R参数是<strong>递归</strong> 处理目录下的所有文件以及子文件夹</p><p>700是变更后的权限表示（只有所有者有读和写以及执行的权限）</p><p>/opt/oracle/ 是需要执行的目录</p><h3 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h3><p><strong>例:对 /opt/oracle/  目录下的所有文件与子目录执行相同的所有者变更，使所有者修改为oinstall用户组的oracle用户</strong></p><p>chown -R(递归) 用户:用户组 目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R oracle:oinstall &#x2F;opt&#x2F;oracle&#x2F;</span><br></pre></td></tr></table></figure><p>oracle:oinstall oinstall用户组的oracle，用户组不必须</p><h3 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h3><p>chgrp 组名 目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp localaccounts mysql-init</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vim, cat, pwd, mkdir,touch, ls, chmod, chown, chgrp&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ios 兼容问题Safari调试&amp;真机调试</title>
    <link href="http://yoursite.com/2021/01/13/ios-%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98Safari%E8%B0%83%E8%AF%95/"/>
    <id>http://yoursite.com/2021/01/13/ios-%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98Safari%E8%B0%83%E8%AF%95/</id>
    <published>2021-01-13T13:33:55.000Z</published>
    <updated>2021-10-10T05:31:30.964Z</updated>
    
    <content type="html"><![CDATA[<p> ios手机和Safari真机调试</p><a id="more"></a><h3 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h3><p>Mac电脑，iPhone手机，数据线</p><h3 id="1、mac中Safari设置："><a href="#1、mac中Safari设置：" class="headerlink" title="1、mac中Safari设置："></a>1、mac中Safari设置：</h3><p>打开Safari偏好者设置，选中“高级菜单”，将页面最下方的“在菜单中显示开发菜单”复选框打钩，这样设置完毕后就能在Safari菜单中看到开发菜单</p><img style="margin: 0" src="/2021/01/13/ios-%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98Safari%E8%B0%83%E8%AF%95/20181112144458575.png"><h3 id="2、iPhone-设置："><a href="#2、iPhone-设置：" class="headerlink" title="2、iPhone 设置："></a>2、iPhone 设置：</h3><p>打开iPhone手机设置——&gt;选择Safari，找到高级选项，有JavaScript开关、web检查器开关，将两个开关打开</p><img style="margin: 0" src="/2021/01/13/ios-%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98Safari%E8%B0%83%E8%AF%95/20181112144511290.png"><h3 id="3、iPhone连接mac上，打开Safari浏览器，运行App（开发版）或者手机Safari的web页面，在开发菜单中选择连接的手机，找到调试的网页，就能在Safari里面调试"><a href="#3、iPhone连接mac上，打开Safari浏览器，运行App（开发版）或者手机Safari的web页面，在开发菜单中选择连接的手机，找到调试的网页，就能在Safari里面调试" class="headerlink" title="3、iPhone连接mac上，打开Safari浏览器，运行App（开发版）或者手机Safari的web页面，在开发菜单中选择连接的手机，找到调试的网页，就能在Safari里面调试"></a>3、iPhone连接mac上，打开Safari浏览器，运行App（开发版）或者手机Safari的web页面，在开发菜单中选择连接的手机，找到调试的网页，就能在Safari里面调试</h3><img style="margin: 0" src="/2021/01/13/ios-%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98Safari%E8%B0%83%E8%AF%95/aHR0cHM6Ly93d3cud2FuZ3lhbmFuLm9ubGluZS9tZWRpYS8yMDE4LzEyLzYucG5n.png"><p>4、定位问题出现区域的布局和样式<br><img style="margin: 0" src="/2021/01/13/ios-%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98Safari%E8%B0%83%E8%AF%95/aHR0cHM6Ly93d3cud2FuZ3lhbmFuLm9ubGluZS9tZWRpYS8yMDE4LzEyLzcucG5n.png"></p><p>扩展： Chrome调试 Android web页面<br>1、安装Chrome浏览器<br>2、使用Android 真机连接电脑<br>3、最后，打开Chrome ,输入：chrome://inspect<br><a href="https://blog.csdn.net/whh181/article/details/77930870" target="_blank" rel="noopener">https://blog.csdn.net/whh181/article/details/77930870</a></p><p>参考原文：<br><a href="https://blog.csdn.net/heqiang2015/article/details/83991986" target="_blank" rel="noopener">Safari 调试iPhone web页面（App为开发版）</a><br><a href="https://blog.csdn.net/longlc123/article/details/56370004?utm_medium=distribute.pc_feed_404.none-task-blog-BlogCommendFromBaidu-1.nonecase&depth_1-utm_source=distribute.pc_feed_404.none-task-blog-BlogCommendFromBaidu-1.nonecas" target="_blank" rel="noopener">chrome实现pc端调试-移动端调试（Android）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; ios手机和Safari真机调试&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>npm packege 遇到的坑</title>
    <link href="http://yoursite.com/2020/12/31/npm-packege-%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>http://yoursite.com/2020/12/31/npm-packege-%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</id>
    <published>2020-12-31T14:56:12.000Z</published>
    <updated>2021-10-10T05:31:30.968Z</updated>
    
    <content type="html"><![CDATA[<p>2020年的最后一天，就用来记录下这些日子来使用npm包遇到的坑。给自己加深下记忆。</p><a id="more"></a><h3 id="vue-infinite-scroll无限加载"><a href="#vue-infinite-scroll无限加载" class="headerlink" title="vue-infinite-scroll无限加载"></a>vue-infinite-scroll无限加载</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-infinite-scroll --save</span><br></pre></td></tr></table></figure><h4 id="使用（vue中）"><a href="#使用（vue中）" class="headerlink" title="使用（vue中）"></a>使用（vue中）</h4><h5 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import infiniteScroll from &#39;vue-infinite-scroll&#39;</span><br><span class="line">Vue.use(infiniteScroll)</span><br></pre></td></tr></table></figure><h5 id="或者在组件中directive引入"><a href="#或者在组件中directive引入" class="headerlink" title="或者在组件中directive引入"></a>或者在组件中directive引入</h5><h5 id="代码中片段"><a href="#代码中片段" class="headerlink" title="代码中片段"></a>代码中片段</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-infinite-scroll&#x3D;&quot;loadMore&quot; infinite-scroll-disabled&#x3D;&quot;busy&quot; infinite-scroll-distance&#x3D;&quot;10&quot;&gt;</span><br><span class="line">    &lt;div v-for&#x3D;&quot;item in data&quot; :key&#x3D;&quot;item.index&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 0,</span><br><span class="line">      data: [],</span><br><span class="line">      busy: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    loadMore: function() &#123;</span><br><span class="line">      this.busy &#x3D; true</span><br><span class="line">      setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        for (var i &#x3D; 0, j &#x3D; 10; i &lt; j; i++) &#123;</span><br><span class="line">          this.data.push(&#123;name: this.count++ &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(this.data)</span><br><span class="line">        this.busy &#x3D; false</span><br><span class="line">      &#125;, 1000)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>v-infinite-scroll=”loadMore”表示回调函数是loadMore<br>infinite-scroll-disabled=”busy”表示由变量busy决定是否执行loadMore，false则执行loadMore，true则不执行，看清楚，busy表示繁忙，繁忙的时候是不执行的。<br>infinite-scroll-distance=”10”这里10决定了页面滚动到离页尾多少像素的时候触发回调函数，10是像素值。通常我们会在页尾做一个几十像素高的“正在加载中…”，这样的话，可以把这个div的高度设为infinite-scroll-distance的值即可。</p><p>其他选项：</p><p>infinite-scroll-immediate-check 默认值为true，该指令意思是，应该在绑定后立即检查busy的值和是否滚动到底。如果你的初始内容高度不够高、不足以填满可滚动的容器的话，你应设为true，这样会立即执行一次loadMore，会帮你填充一些初始内容。<br>infinite-scroll-listen-for-event 当事件在Vue实例中发出时，无限滚动将再次检查。<br>infinite-scroll-throttle-delay 检查busy的值的时间间隔，默认值是200，因为vue-infinite-scroll的基础原理就是，vue-infinite-scroll会循环检查busy的值，以及是否滚动到底，只有当：busy为false且滚动到底，回调函数才会执行。</p><h4 id="我遇到的坑"><a href="#我遇到的坑" class="headerlink" title="我遇到的坑"></a>我遇到的坑</h4><p>承载v-infinite-scroll=”loadMore” infinite-scroll-disabled=”busy” infinite-scroll-distance=”10”的元素上有个<strong><em>v-if</em></strong>，导致loadMore根本就不会执行，这块一定要特别注意</p><h3 id="swiper-轮播图"><a href="#swiper-轮播图" class="headerlink" title="swiper 轮播图"></a>swiper 轮播图</h3><p>引用，以下或者cdn</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;CommonJs</span><br><span class="line">var Swiper &#x3D; require(&#39;swiper&#39;);    </span><br><span class="line">var mySwiper &#x3D; new Swiper(&#39;.swiper-container&#39;, &#123; &#x2F;* ... *&#x2F; &#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;ES</span><br><span class="line">import Swiper from &#39;swiper&#39;;    </span><br><span class="line">var mySwiper &#x3D; new Swiper(&#39;.swiper-container&#39;, &#123; &#x2F;* ... *&#x2F; &#125;);</span><br></pre></td></tr></table></figure><p>html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;swiper-container&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;swiper-wrapper&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;swiper-slide&quot;&gt;Slide 1&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;swiper-slide&quot;&gt;Slide 2&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;swiper-slide&quot;&gt;Slide 3&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- 如果需要分页器 --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;swiper-pagination&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 如果需要导航按钮 --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;swiper-button-prev&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;swiper-button-next&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 如果需要滚动条 --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;swiper-scrollbar&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">导航等组件可以放在container之外</span><br></pre></td></tr></table></figure><p>初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script&gt;        </span><br><span class="line">  var mySwiper &#x3D; new Swiper (&#39;.swiper-container&#39;, &#123;</span><br><span class="line">    direction: &#39;vertical&#39;, &#x2F;&#x2F; 垂直切换选项</span><br><span class="line">    loop: true, &#x2F;&#x2F; 循环模式选项</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 如果需要分页器</span><br><span class="line">    pagination: &#123;</span><br><span class="line">      el: &#39;.swiper-pagination&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 如果需要前进后退按钮</span><br><span class="line">    navigation: &#123;</span><br><span class="line">      nextEl: &#39;.swiper-button-next&#39;,</span><br><span class="line">      prevEl: &#39;.swiper-button-prev&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 如果需要滚动条</span><br><span class="line">    scrollbar: &#123;</span><br><span class="line">      el: &#39;.swiper-scrollbar&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)        </span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="不同版本API变化"><a href="#不同版本API变化" class="headerlink" title="不同版本API变化"></a>不同版本API变化</h4><img style="margin: 0 " src="/2020/12/31/npm-packege-%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/zujianhua.png"><h4 id="swiper6"><a href="#swiper6" class="headerlink" title="swiper6"></a>swiper6</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import Swiper, &#123; Autoplay, Pagination &#125; from &quot;swiper&quot;;</span><br><span class="line">Swiper.use([Autoplay, Pagination]);</span><br><span class="line">import &quot;swiper&#x2F;swiper-bundle.min.css&quot;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">new Swiper(&quot;.swiper-container&quot;, &#123;</span><br><span class="line">                initialSlide: 2,</span><br><span class="line">                speed: 300,</span><br><span class="line">                autoplay: &#123;</span><br><span class="line">                    delay: 3000,</span><br><span class="line">                &#125;,</span><br><span class="line">                loop: true,</span><br><span class="line">                slidesPerView: 3,</span><br><span class="line">                spaceBetween: &#39;6%&#39;,</span><br><span class="line">                centeredSlides: true,</span><br><span class="line">                &#x2F;&#x2F; pagination: &#123;</span><br><span class="line">                &#x2F;&#x2F;     el: &quot;.swiper-pagination&quot;,</span><br><span class="line">                &#x2F;&#x2F;     clickable: true,</span><br><span class="line">                &#x2F;&#x2F; &#125;,</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure><h4 id="使用文档API"><a href="#使用文档API" class="headerlink" title="使用文档API"></a>使用文档API</h4><p><a href="https://www.swiper.com.cn/api/index.html" target="_blank" rel="noopener">使用文档API</a></p><h4 id="使用swiper遇到的坑"><a href="#使用swiper遇到的坑" class="headerlink" title="使用swiper遇到的坑"></a>使用swiper遇到的坑</h4><p>不同的版本调用不用api，巨坑！<br>一定要注意版本！一定要注意版本！！一定要注意版本！！！</p><h3 id="html2canvas"><a href="#html2canvas" class="headerlink" title="html2canvas"></a>html2canvas</h3><ol><li>图片跨域——前后端都需设置crossorigin，允许跨域</li><li>css样式导致ios手机报错不能生成图——某css中背景图未设置background-size</li><li>图片未加载完成就开始绘制导致失败——绘制放在所有图片onload后</li><li>安卓手机多次保存，有时保存的非绘制图（1.0.0-rc.7）</li><li>ios手机带3DTouch,长按出蓝色半透明遮罩出光标（1.0.0-rc.7）</li></ol><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://www.zhihu.com/question/265838834" target="_blank" rel="noopener">浏览器端网页截图方案详解</a><br><a href="https://www.jianshu.com/p/e3a59a9fb817" target="_blank" rel="noopener">html2canvas踩坑记</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2020年的最后一天，就用来记录下这些日子来使用npm包遇到的坑。给自己加深下记忆。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>webpack config遇到的系列问题</title>
    <link href="http://yoursite.com/2020/12/23/webpack-config/"/>
    <id>http://yoursite.com/2020/12/23/webpack-config/</id>
    <published>2020-12-23T15:48:28.000Z</published>
    <updated>2021-10-10T05:31:30.972Z</updated>
    
    <content type="html"><![CDATA[<p>webpack5、npm包的兼容及遇到的错误解决</p><a id="more"></a><p><a href="https://blog.csdn.net/weixin_40906515/article/details/109376256" target="_blank" rel="noopener">webpack 中最易混淆的 5 个知识点</a><br><a href="https://www.cnblogs.com/sloong/p/5689162.html" target="_blank" rel="noopener">webpack - 多页面/入口支持 &amp; 公共组件单独打包</a></p><h3 id="webpack-5-与-webpack-dev-server-3兼容性问题"><a href="#webpack-5-与-webpack-dev-server-3兼容性问题" class="headerlink" title="webpack 5 与 webpack-dev-server 3兼容性问题"></a>webpack 5 与 webpack-dev-server 3兼容性问题</h3><p>用webpack-dev-server启动项目失败，报错：Error: Cannot find module ‘webpack-cli/bin/config-yargs’</p><p>解决办法：使用 webpack serve </p><p>此时已实现live reload</p><h3 id="npm安装webpack插件报checkPermissions错误"><a href="#npm安装webpack插件报checkPermissions错误" class="headerlink" title="npm安装webpack插件报checkPermissions错误"></a>npm安装webpack插件报checkPermissions错误</h3><p>起因是运行webpack-dev-server时，各种报错Cannot find module，然后卸载、安装npm包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">npm WARN deprecated chokidar@2.1.8: Chokidar 2 will break on node v14+. Upgrade to chokidar 3 with 15x less dependencies.</span><br><span class="line">npm WARN deprecated fsevents@1.2.13: fsevents 1 will break on node v14+ and could be using insecure binaries. Upgrade to fsevents 2.</span><br><span class="line">npm WARN deprecated resolve-url@0.2.1: https:&#x2F;&#x2F;github.com&#x2F;lydell&#x2F;resolve-url#deprecated</span><br><span class="line">npm WARN deprecated urix@0.1.0: Please see https:&#x2F;&#x2F;github.com&#x2F;lydell&#x2F;urix#deprecated</span><br><span class="line">npm WARN checkPermissions Missing write access to &#x2F;Users&#x2F;jing&#x2F;Documents&#x2F;testwebpack&#x2F;node_modules&#x2F;_p-locate@5.0.0@p-locate&#x2F;node_modules&#x2F;p-limit</span><br><span class="line">npm WARN checkPermissions Missing write access to &#x2F;Users&#x2F;jing&#x2F;Documents&#x2F;testwebpack&#x2F;node_modules&#x2F;_schema-utils@3.0.0@schema-utils&#x2F;node_modules&#x2F;ajv</span><br><span class="line">npm WARN checkPermissions Missing write access to &#x2F;Users&#x2F;jing&#x2F;Documents&#x2F;testwebpack&#x2F;node_modules&#x2F;_schema-utils@3.0.0@schema-utils&#x2F;node_modules&#x2F;ajv-keywords</span><br><span class="line">npm WARN checkPermissions Missing write access to &#x2F;Users&#x2F;jing&#x2F;Documents&#x2F;testwebpack&#x2F;node_modules&#x2F;ajv-errors</span><br><span class="line">npm WARN checkPermissions Missing write access to &#x2F;Users&#x2F;jing&#x2F;Documents&#x2F;testwebpack&#x2F;node_modules&#x2F;assign-symbols</span><br><span class="line">npm WARN checkPermissions Missing write access to &#x2F;Users&#x2F;jing&#x2F;Documents&#x2F;testwebpack&#x2F;node_modules&#x2F;async-limiter</span><br><span class="line">npm WARN checkPermissions Missing write access to &#x2F;Users&#x2F;jing&#x2F;Documents&#x2F;testwebpack&#x2F;node_modules&#x2F;default-gateway</span><br></pre></td></tr></table></figure><p>然后用sudo npm i，还是会报错。</p><p>有人说可能是npm和cnpm交叉使用造成的。</p><p>于是暴利删除node_modules.</p><p>再运行下面代码，终于不再报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm i</span><br></pre></td></tr></table></figure><h3 id="hotModule不起效果"><a href="#hotModule不起效果" class="headerlink" title="hotModule不起效果"></a>hotModule不起效果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">log.js:26 [HMR] Update failed: ChunkLoadError: Loading hot update chunk 143 failed.</span><br><span class="line">(missing: http:&#x2F;&#x2F;localhost:8080&#x2F;143.f7a142c5c6905a4f3f57.hot-update.js)</span><br><span class="line">    at http:&#x2F;&#x2F;localhost:8080&#x2F;app.bundle.js:2:233347</span><br><span class="line">    at new Promise (&lt;anonymous&gt;)</span><br><span class="line">    at s (http:&#x2F;&#x2F;localhost:8080&#x2F;app.bundle.js:2:233299)</span><br><span class="line">    at http:&#x2F;&#x2F;localhost:8080&#x2F;app.bundle.js:2:237441</span><br><span class="line">    at Array.forEach (&lt;anonymous&gt;)</span><br><span class="line">    at Object.o.hmrC.jsonp (http:&#x2F;&#x2F;localhost:8080&#x2F;app.bundle.js:2:237387)</span><br><span class="line">    at http:&#x2F;&#x2F;localhost:8080&#x2F;app.bundle.js:2:229707</span><br><span class="line">    at Array.reduce (&lt;anonymous&gt;)</span><br><span class="line">    at http:&#x2F;&#x2F;localhost:8080&#x2F;app.bundle.js:2:229669</span><br></pre></td></tr></table></figure><p>解决方案：入口文件改为一个。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">    app: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class="line">    &#x2F;&#x2F;print: &#39;.&#x2F;src&#x2F;print.js&#39;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p><strong>注意</strong><br>这时候更改入口index.js引入的print.js里的内容，并不能起到热更新的效果。想要print.js的修改也适用热更新。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+ if (module.hot) &#123;</span><br><span class="line">+   module.hot.accept(&#39;.&#x2F;print.js&#39;, function() &#123;</span><br><span class="line">+     console.log(&#39;Accepting the updated printMe module!&#39;);</span><br><span class="line">+     printMe();</span><br><span class="line">+   &#125;)</span><br><span class="line">+ &#125;</span><br></pre></td></tr></table></figure><p>热更新会在css、vue文件中起效果。因为style-loader、vue-loder已经替我们做了 module.hot.accept</p><h3 id="webpack版本"><a href="#webpack版本" class="headerlink" title="webpack版本"></a>webpack版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;webpack&quot;: &quot;^5.11.0&quot;,</span><br><span class="line">&quot;webpack-cli&quot;: &quot;^4.2.0&quot;,</span><br><span class="line">&quot;webpack-dev-server&quot;: &quot;^3.11.0&quot;</span><br></pre></td></tr></table></figure><h3 id="webpack-config"><a href="#webpack-config" class="headerlink" title="webpack config"></a>webpack config</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">const path &#x3D; require(&#39;path&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line">const &#123; CleanWebpackPlugin &#125; &#x3D; require(&#39;clean-webpack-plugin&#39;);</span><br><span class="line">const webpack &#x3D; require(&#39;webpack&#39;);</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class="line">    &#x2F;&#x2F;print: &#39;.&#x2F;src&#x2F;print.js&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;[name].bundle.js&#39;,</span><br><span class="line">    path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">  devtool: &#39;inline-source-map&#39;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: &#39;.&#x2F;dist&#39;,</span><br><span class="line">    hot: true,</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.css$&#x2F;,</span><br><span class="line">        use: [</span><br><span class="line">          &#39;style-loader&#39;,</span><br><span class="line">          &#39;css-loader&#39;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.(png|svg|jpg|gif)$&#x2F;,</span><br><span class="line">        use: [</span><br><span class="line">          &#39;file-loader&#39;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.(xml)$&#x2F;,</span><br><span class="line">        use: [</span><br><span class="line">          &#39;xml-loader&#39;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins:[</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      title: &#39;Output Management&#39;</span><br><span class="line">    &#125;),</span><br><span class="line">    new CleanWebpackPlugin(&#123;</span><br><span class="line">      cleanOnceBeforeBuildPatterns: &#39;dist&#39;</span><br><span class="line">    &#125;),</span><br><span class="line">    &#x2F;&#x2F; new webpack.NamedModulesPlugin(),</span><br><span class="line">    new webpack.HotModuleReplacementPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="入口文件hotModule测试"><a href="#入口文件hotModule测试" class="headerlink" title="入口文件hotModule测试"></a>入口文件hotModule测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">index.js</span><br><span class="line">import _ from &#39;lodash&#39;;</span><br><span class="line">import &#39;.&#x2F;style.css&#39;;</span><br><span class="line">import MyImage from &#39;.&#x2F;icon.png&#39;;</span><br><span class="line">import data from &#39;.&#x2F;mock&#x2F;data.xml&#39;;</span><br><span class="line">import printMe from &#39;.&#x2F;print.js&#39;;</span><br><span class="line"></span><br><span class="line">function component() &#123;</span><br><span class="line">  var element &#x3D; document.createElement(&#39;div&#39;);</span><br><span class="line">  var btn &#x3D; document.createElement(&#39;button&#39;);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; Lodash（目前通过一个 script 脚本引入）对于执行这一行是必需的</span><br><span class="line">  element.innerHTML &#x3D; _.join([&#39;Hello&#39;, &#39;webpack&#39;], &#39; &#39;);</span><br><span class="line">  element.classList.add(&#39;hello&#39;);</span><br><span class="line"></span><br><span class="line">  btn.innerHTML &#x3D; &#39;Click me and check the console!&#39;;</span><br><span class="line">  btn.onclick &#x3D; printMe;</span><br><span class="line"></span><br><span class="line">  element.appendChild(btn);</span><br><span class="line">  return element;</span><br><span class="line">&#125;</span><br><span class="line">document.body.appendChild(component());</span><br><span class="line">if (module.hot) &#123;</span><br><span class="line">  module.hot.accept(&#39;.&#x2F;print.js&#39;, function () &#123;&#x2F;&#x2F; print.js 文件改动会触发hotModule</span><br><span class="line">    console.log(&#39;Accepting the updated printMe module!&#39;); </span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line">  module.hot.accept(); &#x2F;&#x2F; index文件有改动会触发hotModule，不加这行，index文件的改动触发的是liveReload</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print.js</span><br><span class="line">export default function printMe() &#123;</span><br><span class="line">    console.log(&#39;I got called from print.js!&#39;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>问题是：print文件改动了，点击按钮时 btn.onclick触发的仍旧是旧的printMe。</p><p>index文件改动了，页面会再写入一条component();</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="http://www.qiutianaimeili.com/html/page/2020/02/zde66zxtxpd.html" target="_blank" rel="noopener">npm安装webpack插件报checkPermissions错误</a></p><p><a href="https://blog.csdn.net/sxs7970/article/details/88746939" target="_blank" rel="noopener">解决报错Cannot find module ‘webpack-cli/bin/config-yargs’</a></p><p><a href="https://www.cnblogs.com/xiaorong-9/p/14069684.html" target="_blank" rel="noopener">webpack 5 与 webpack-dev-server 3兼容性问题</a></p><p><a href="https://segmentfault.com/a/1190000003872635" target="_blank" rel="noopener">Webpack 用来做模块热替换(hot module replacement)</a></p><p><a href="http://www.myjscode.com/page/article109.html" target="_blank" rel="noopener">模块热替换api</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;webpack5、npm包的兼容及遇到的错误解决&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>write bug</title>
    <link href="http://yoursite.com/2020/12/01/write-bug/"/>
    <id>http://yoursite.com/2020/12/01/write-bug/</id>
    <published>2020-12-01T17:48:39.000Z</published>
    <updated>2021-10-10T05:31:30.972Z</updated>
    
    <content type="html"><![CDATA[<p>开发中遇到的一些bug</p><a id="more"></a><h3 id="IOS手机在微信登录时报redirect-uri错误"><a href="#IOS手机在微信登录时报redirect-uri错误" class="headerlink" title="IOS手机在微信登录时报redirect_uri错误"></a>IOS手机在微信登录时报redirect_uri错误</h3><p>原因是redirect_uri长度有限制，可能要求解析后不可超过1024字符。</p><h3 id="一些布尔值判断转义问题"><a href="#一些布尔值判断转义问题" class="headerlink" title="一些布尔值判断转义问题"></a>一些布尔值判断转义问题</h3><p>null == 0 || null &gt;0<br>=&gt;false<br>null &gt;= 0<br>=&gt;true<br>undefined &gt;= 0<br>=&gt;false<br>undefined &gt; 0 || undefined == 0<br>=&gt;false</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发中遇到的一些bug&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>自签名ssl证书生成与使用-知识搬运</title>
    <link href="http://yoursite.com/2020/11/26/ssl%E8%AF%81%E4%B9%A6%E7%94%9F%E6%88%90%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/11/26/ssl%E8%AF%81%E4%B9%A6%E7%94%9F%E6%88%90%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2020-11-26T19:32:46.000Z</published>
    <updated>2021-10-10T05:31:30.968Z</updated>
    
    <content type="html"><![CDATA[<p>nginx的https证书配置</p><a id="more"></a><h3 id="创建密钥"><a href="#创建密钥" class="headerlink" title="创建密钥"></a>创建密钥</h3><p>首先，进入 nginx 配置目录，创建 openssl 配置文件 <strong>req.conf</strong>，其中的 CN, DNS.1, DNS.2 等需要替换为自己的域名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[req]</span><br><span class="line">distinguished_name &#x3D; req_distinguished_name</span><br><span class="line">x509_extensions &#x3D; v3_req</span><br><span class="line">prompt &#x3D; no</span><br><span class="line">[req_distinguished_name]</span><br><span class="line">C &#x3D; US</span><br><span class="line">ST &#x3D; VA</span><br><span class="line">L &#x3D; SomeCity</span><br><span class="line">O &#x3D; MyCompany</span><br><span class="line">OU &#x3D; MyDivision</span><br><span class="line">CN &#x3D; www.company.com</span><br><span class="line">[v3_req]</span><br><span class="line">keyUsage &#x3D; keyEncipherment, dataEncipherment</span><br><span class="line">extendedKeyUsage &#x3D; serverAuth</span><br><span class="line">subjectAltName &#x3D; @alt_names</span><br><span class="line">[alt_names]</span><br><span class="line">DNS.1 &#x3D; www.company.net</span><br><span class="line">DNS.2 &#x3D; company.com</span><br><span class="line">DNS.3 &#x3D; company.net</span><br></pre></td></tr></table></figure><p>如果域名较多，且都隶属于同一个主域名，可以将 DNS.1、DNS.2 等简化为 *.example.com。即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">[alt_names]</span><br><span class="line">DNS.1 &#x3D; *.example.com</span><br></pre></td></tr></table></figure><p>接着，执行如下命令，创建证书：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -x509 -nodes -days 730 -newkey rsa:2048 -keyout cert.pem -out cert.pem -config req.conf -extensions &#39;v3_req&#39;</span><br></pre></td></tr></table></figure><h3 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name www.example.com;</span><br><span class="line">    ssl_certificate cert.pem;</span><br><span class="line">    ssl_certificate_key cert.pem;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        root &#x2F;Users&#x2F;example&#x2F;hello&#x2F;world;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务器证书（ssl_certificate）是一个公开文件，每个请求连接的客户端都会收到一份。私有密钥（ssl_certificate_key）是加密单元，需要存储在保密的地方，但要确保 nginx 主线程可访问。私有密钥一般和证书存储到同一位置。</p><p>cert.pem 就是上一个步骤产生的证书和密钥，在一个文件中。</p><h3 id="配置浏览器"><a href="#配置浏览器" class="headerlink" title="配置浏览器"></a>配置浏览器</h3><p>打开 Chrome 的开发者工具下的【security】选项卡，查看当前的证书，然后下载下来，双击添加到操作系统中，修改为始终信任就可以了。</p><h3 id="采坑"><a href="#采坑" class="headerlink" title="采坑"></a>采坑</h3><p>1、mac-keychain Access 找到对应的证书改为 Always Trust</p><img style="margin: 0 " src="/2020/11/26/ssl%E8%AF%81%E4%B9%A6%E7%94%9F%E6%88%90%E4%B8%8E%E4%BD%BF%E7%94%A8/1606391025496.jpg"><p>2、如果钥匙串中没有相应证书，找到nginx中配置的证书，双击添加到钥匙串中。</p><p>2、由于我是在原证书中加了一个域名，重新生成的证书，发现刷新、重启浏览器、删除老证书，都不能让本地起的nginx服务变安全。解决方法是重启nginx。配置成功！<br><img style="margin: 0 " src="/2020/11/26/ssl%E8%AF%81%E4%B9%A6%E7%94%9F%E6%88%90%E4%B8%8E%E4%BD%BF%E7%94%A8/1606391344586.jpg"></p><h3 id="转载自"><a href="#转载自" class="headerlink" title="转载自"></a>转载自</h3><p><a href="https://www.1zh.tech/2017/12/15/setup-local-https/" target="_blank" rel="noopener">设置本地 nginx 的 HTTPS</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nginx的https证书配置&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>hexo+github上传图片到博客(知识搬运)</title>
    <link href="http://yoursite.com/2020/11/26/hexo-github%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2020/11/26/hexo-github%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-11-26T18:03:10.000Z</published>
    <updated>2021-10-10T05:31:30.964Z</updated>
    
    <content type="html"><![CDATA[<p>hexo使用及如何添加图片</p><a id="more"></a><p>1、cd到博客根目录下 查看_config.yml文件 查找 post_asset_folder 字段确定post_asset_folder 设置为true -&gt; post_asset_folder:true</p><p>2、当您设置 post_asset_folder 参数后，在建立文件时，Hexo 会自动建立一个与文章同名的文件夹，您可以把与该文章相关的所有资源都放到此文件夹内，这样就可以更方便的使用资源。</p><p>3、到博客的根目录下执行以下命令来进行插件的安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https:&#x2F;&#x2F;github.com&#x2F;CodeFalling&#x2F;hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>4、然后创建一文章 hexo new “test” 然后查看博客的 ../source/_posts 目录下的文件，会看到存在一个test 文件夹 和 test.md 文件<br><img style="margin:0" src="/2020/11/26/hexo-github%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0%E5%8D%9A%E5%AE%A2/203414-3e5d297effdff3d6.webp"></p><p>5、将所需要的图片资源放到test 文件夹 内 目录结构如下：<br><img style="margin:0" src="/2020/11/26/hexo-github%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0%E5%8D%9A%E5%AE%A2/203414-7a4566f5a8901158.webp"></p><p>6、书写文章使用test文件内 的图片<br><img style="margin:0" src="/2020/11/26/hexo-github%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0%E5%8D%9A%E5%AE%A2/203414-670dc6930c83cb4c.webp"></p><p>7、使用hexo s 命令运行本地博客如图<br><img style="margin:0" src="/2020/11/26/hexo-github%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0%E5%8D%9A%E5%AE%A2/203414-26eb8fcdcd17ceee.webp"></p><p>8、使用hexo clean hexo g hexo deploy 将本地博客推送到远程，即可看到文章中的图片。<br>✅Done！</p><p>9、看效果不是很满意，图片居中，很丑。需html语法让图片居左。由于编译器给img加了margin:0 auto，还是会居中，需在设置一下style</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img style&#x3D;&quot;margin:0&quot; src&#x3D;&quot;hexo-github上传图片到博客&#x2F;203414-26eb8fcdcd17ceee.webp&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>作者：iOS收藏家<br>链接：<a href="https://www.jianshu.com/p/8d28027fec76" target="_blank" rel="noopener">https://www.jianshu.com/p/8d28027fec76</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo使用及如何添加图片&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>postman 使用</title>
    <link href="http://yoursite.com/2020/11/18/postman%20%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/11/18/postman%20%E4%BD%BF%E7%94%A8/</id>
    <published>2020-11-18T00:00:00.000Z</published>
    <updated>2021-10-10T05:31:30.968Z</updated>
    
    <content type="html"><![CDATA[<p>Postman是一款功能强大的接口调试工具</p><a id="more"></a><p>1、发送put、get、post请求</p><p>2、Headers设置</p><p>3、Body：post请求时必须要带的参数，里面放一些key-value键值对</p><p>4、params：get请求的参数出现在这里</p><p>5、tests检测response</p><p>6、Pre-requerst Script请求前设置请求数据<br>7、设置全局变量、环境变量</p><p>8、文件夹run自动化测试</p><p>参考文章：<br><a href="https://www.jianshu.com/p/97ba64888894" target="_blank" rel="noopener">Postman教程大全</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Postman是一款功能强大的接口调试工具&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>网页性能优化</title>
    <link href="http://yoursite.com/2020/11/01/%E7%BD%91%E9%A1%B5%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2020/11/01/%E7%BD%91%E9%A1%B5%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</id>
    <published>2020-11-01T00:00:00.000Z</published>
    <updated>2021-10-10T05:31:30.972Z</updated>
    
    <content type="html"><![CDATA[<p>页面速度和访客的滞留时间，跳出率以及收入都有直接的关系。<br>小于2秒的页载入时间被认为是优良的，而且高达4秒是可接受的。而大于5秒的页面载入时间不仅影响你网站的搜索引擎排名，还会严重影响用户体验。<br>网页性能优化分为很多维度，在各个维度我们需要做什么？</p><a id="more"></a><h3 id="一、网络"><a href="#一、网络" class="headerlink" title="一、网络"></a>一、网络</h3><p>1、减少DNS<br>域名解析的时候页面是没有任何反应的，需要解析的域名越多，页面加载时长会越长。</p><p>2、减少请求<br>1）css sprite<br>2）小图片转为base64<br>3）使用浏览器缓存</p><p>3、优化TCP协议<br>1）TCP连接复用，使用keep-alive：连接回复加上请求头：keep-alive。第一次请求不断开，第二次请求复用。<br>2）使用http 2.0版本：多路复用，连接复用率会更高</p><p>4、同时发送多个请求（浏览器自带）IE8可以同时请求下载4个的css文件，Chrome可以同时请求下载8个 。</p><p>5、减小cookie体积，每个请求都会附带cookie，所以不要滥用cookie。</p><h3 id="二、服务器"><a href="#二、服务器" class="headerlink" title="二、服务器"></a>二、服务器</h3><p>1、使用CDN<br>2、接口keep-alive<br>3、最小化重定向<br>4、Accept-Encoding: gzip, deflate</p><h3 id="三、渲染"><a href="#三、渲染" class="headerlink" title="三、渲染"></a>三、渲染</h3><p>1、减少回流和重绘</p><p>2、懒加载、预加载</p><h3 id="四、图片"><a href="#四、图片" class="headerlink" title="四、图片"></a>四、图片</h3><p>1、选择正确的格式。<br>1）最适合网页的格式是webp<br>2）色彩多适宜用jpg<br>3）半透明、透明图片适宜用png<br>4）动图适宜用gif<br>2、选择合适的尺寸<br>2、压缩图片<br>有很多工具可以压缩图片，压缩的程度需与视觉效果做权衡<br>3、能用文字代替最好用文字</p><h3 id="五、js"><a href="#五、js" class="headerlink" title="五、js"></a>五、js</h3><p>1、压缩js<br>去掉注释、空格等多余的行，减少js的大小；<br>长变量名用简单的字母代替，使用压缩工具可以实现</p><p>2、减少不必要的引用<br>一个文件只需要引用一次</p><p>3、去掉不必要的插件</p><p>4、Ajax的get可缓存</p><p>5、减少监听器，使用事件委托</p><p>6、减少或合并DOM操作或使用虚拟DOM</p><p>7、对大量数据计算使用缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(var i &#x3D; 0,len &#x3D; data.length;i &lt; len;i++)&#123;</span><br><span class="line">     &#x2F;&#x2F; do something...</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="六、html"><a href="#六、html" class="headerlink" title="六、html"></a>六、html</h3><p>1、减少嵌套层级</p><p>2、css放在head中，js放在最后</p><h3 id="七、css"><a href="#七、css" class="headerlink" title="七、css"></a>七、css</h3><p>1、避免CSS表达式<br>2、压缩<br>3、精简（合并相同的属性、删除不用的class）</p><h3 id="八、优化用户体验"><a href="#八、优化用户体验" class="headerlink" title="八、优化用户体验"></a>八、优化用户体验</h3><p>用户看到哪些内容就请求哪些内容<br>加一个loading动画用户会感觉时间变快</p><p>参考文章：<br><a href="https://www.diybloghome.com/frontlogy/1036.html" target="_blank" rel="noopener">10种优化页面加载速度的方法</a><br><a href="https://www.cnblogs.com/yzhihao/p/9385467.html" target="_blank" rel="noopener">Web前端性能优化——如何提高页面加载速度</a><br><a href="https://zhuanlan.zhihu.com/p/59681837" target="_blank" rel="noopener">web前端性能优化——如何提高页面加载速度</a><br><a href="https://www.cnblogs.com/xianyulaodi/p/5755079.html" target="_blank" rel="noopener">【原】雅虎前端优化的35条军规</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;页面速度和访客的滞留时间，跳出率以及收入都有直接的关系。&lt;br&gt;小于2秒的页载入时间被认为是优良的，而且高达4秒是可接受的。而大于5秒的页面载入时间不仅影响你网站的搜索引擎排名，还会严重影响用户体验。&lt;br&gt;网页性能优化分为很多维度，在各个维度我们需要做什么？&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Mac du disk usage命令统计文件夹大小</title>
    <link href="http://yoursite.com/2020/10/31/mac%20du%E5%91%BD%E4%BB%A4%E7%BB%9F%E8%AE%A1%E6%96%87%E4%BB%B6%E5%A4%B9%E5%A4%A7%E5%B0%8F/"/>
    <id>http://yoursite.com/2020/10/31/mac%20du%E5%91%BD%E4%BB%A4%E7%BB%9F%E8%AE%A1%E6%96%87%E4%BB%B6%E5%A4%B9%E5%A4%A7%E5%B0%8F/</id>
    <published>2020-10-31T08:00:00.000Z</published>
    <updated>2021-10-10T05:31:30.968Z</updated>
    
    <content type="html"><![CDATA[<p>查看文件夹的大小适用命令</p><a id="more"></a><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du [-abcDhHklmsSx][-L &lt;符号连接&gt;][-X &lt;文件&gt;][--block-size][--exclude&#x3D;&lt;目录或文件&gt;][--max-depth&#x3D;&lt;目录层数&gt;][--help][--version][目录或文件]</span><br></pre></td></tr></table></figure><h4 id="当du不带任何参数时，会递归显示当前目录下的所有文件夹和子文件夹的大小。"><a href="#当du不带任何参数时，会递归显示当前目录下的所有文件夹和子文件夹的大小。" class="headerlink" title="当du不带任何参数时，会递归显示当前目录下的所有文件夹和子文件夹的大小。"></a>当du不带任何参数时，会递归显示当前目录下的所有文件夹和子文件夹的大小。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">32.&#x2F;const</span><br><span class="line">248.</span><br></pre></td></tr></table></figure><p>参数</p><table><thead><tr><th>参数</th><th>含义</th><th></th></tr></thead><tbody><tr><td>h</td><td>Humanbeing readable 好读模式</td><td></td></tr><tr><td>d</td><td>deep 1—一级目录  2—二级目录……</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -h -d 2</span><br></pre></td></tr></table></figure><h3 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h3><p>-a或-all 显示目录中个别文件的大小。<br>-b或-bytes 显示目录或文件大小时，以byte为单位。<br>-c或–total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。<br>-D或–dereference-args 显示指定符号连接的源文件大小。<br>-h或–human-readable 以K，M，G为单位，提高信息的可读性。<br>-H或–si 与-h参数相同，但是K，M，G是以1000为换算单位。<br>-k或–kilobytes 以1024 bytes为单位。<br>-l或–count-links 重复计算硬件连接的文件。<br>-L&lt;符号连接&gt;或–dereference&lt;符号连接&gt; 显示选项中所指定符号连接的源文件大小。<br>-m或–megabytes 以1MB为单位。<br>-s或–summarize 仅显示总计。<br>-S或–separate-dirs 显示个别目录的大小时，并不含其子目录的大小。<br>-x或–one-file-xystem 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。<br>-X&lt;文件&gt;或–exclude-from=&lt;文件&gt; 在&lt;文件&gt;指定目录或文件。<br>–exclude=&lt;目录或文件&gt; 略过指定的目录或文件。<br>–max-depth=&lt;目录层数&gt; 超过指定层数的目录后，予以忽略。<br>–help 显示帮助。<br>–version 显示版本信息。</p><p>参考文章：<br><a href="https://www.runoob.com/linux/linux-comm-du.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-comm-du.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;查看文件夹的大小适用命令&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>大图详情页问题</title>
    <link href="http://yoursite.com/2020/09/23/%E5%A4%A7%E5%9B%BE%E6%A8%A1%E5%BC%8F%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2020/09/23/%E5%A4%A7%E5%9B%BE%E6%A8%A1%E5%BC%8F%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-09-23T20:00:00.000Z</published>
    <updated>2021-10-10T05:31:30.972Z</updated>
    
    <content type="html"><![CDATA[<p>开发中遇到的问题<br>检测全面屏<br>-webkit-overflow-scrolling:touch<br>冒泡导致问题<br>swiper要定义好高度<br>meta referre问题</p><a id="more"></a><h2 id="检测全面屏"><a href="#检测全面屏" class="headerlink" title="检测全面屏"></a>检测全面屏</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function judgeBigScreen() &#123;  </span><br><span class="line">    &#x2F;&#x2F; 这里根据返回值 true 或false ,返回true的话 则为全面屏</span><br><span class="line">     var result &#x3D; false;</span><br><span class="line">     var rate &#x3D; window.screen.height &#x2F; window.screen.width;</span><br><span class="line">     var limit &#x3D;  window.screen.height &#x3D;&#x3D; window.screen.availHeight ? 1.8 : 1.65; &#x2F;&#x2F; 临界判断值</span><br><span class="line"> </span><br><span class="line">     &#x2F;&#x2F; window.screen.height为屏幕高度</span><br><span class="line">     &#x2F;&#x2F;  window.screen.availHeight 为浏览器 可用高度</span><br><span class="line">     if (rate &gt; limit) &#123;</span><br><span class="line">         result &#x3D; true;</span><br><span class="line">     &#125;</span><br><span class="line">     return result;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="overflow-hidden和-webkit-overflow-scrolling-touch引起的一系列问题"><a href="#overflow-hidden和-webkit-overflow-scrolling-touch引起的一系列问题" class="headerlink" title="overflow:hidden和-webkit-overflow-scrolling:touch引起的一系列问题"></a>overflow:hidden和-webkit-overflow-scrolling:touch引起的一系列问题</h2><ol><li><p>有-webkit-overflow-scrolling:touch属性，会导致正常的横屏滑动（某些ios），划过去不渲染的问题。需上下滑动，才能渲染出。</p></li><li><p>去掉overflow:hidden和-webkit-overflow-scrolling:touch，导致页面之前的scroll事件监听都失效了。需监听document.documentElement。</p></li><li><p>滚动到指点位置的设置，Iphone中设置document.documentElement.scrollTop；Android中设置document.body.scrollTop；</p></li><li><p>输入完成点击支付，软键盘收起，在某些手机支付按钮的焦点并不在你可视的位置。为解决这个问题设置的收起软键盘后scrollTop(0,0)。还会发现，弹窗中的支付按钮，点击时，软键盘收起，并没有跳转到支付页。需在软键盘关闭后再点击一次。去掉overflow:hidden和-webkit-overflow-scrolling:touch，无需再设置scrollTop(0,0)。在软键盘打开的情况下，点击支付按钮，就可以调走。</p></li></ol><p>总结：如非必要，不要用-webkit-overflow-scrolling:touch！<br>不要用-webkit-overflow-scrolling:touch！<br>不要用-webkit-overflow-scrolling:touch！<br>都是坑！</p><h2 id="冒泡导致问题"><a href="#冒泡导致问题" class="headerlink" title="冒泡导致问题"></a>冒泡导致问题</h2><p>前端埋点用来数据统计。<br>用冒泡事件监听body，在遇到需跳转的按钮时，click事件很少能捕捉到。而监听当前元素的点击，发送的click事件则大部分可以被捕捉。</p><p>–在跳转的按钮上，另有click需发送请求，最好不要用冒泡在body上监听。往往服务端接受不到此请求。</p><p>–又遇到一种情况，但点击“查看更多“时，会变为“加载中……“，“查看更多”按钮上的埋点，如果加在父标签上，事件的发送都是通过body上的click检测父标签有没有一个属性，有则发送埋点请求。<br>这时就遇到问题了。点击的目标元素event.target会一直存在，即使父标签已移除，依然可以拿到event.target。但event.target.parentNode这时候就会使null。检测它上面的属性就会检测不到。<br>event.target从DOM中删除了，但还存在内存中。</p><h2 id="swiper要定义好高度"><a href="#swiper要定义好高度" class="headerlink" title="swiper要定义好高度"></a>swiper要定义好高度</h2><p>高度自适应且slide图片有大有小时，会在某些ios手机上滑动方向相反的一边闪屏。</p><h2 id="1px问题"><a href="#1px问题" class="headerlink" title="1px问题"></a>1px问题</h2><p>设计稿上1px的边框，通常我们会用0.5px来实现，一般在ios可以表现正常。但在某些Android手机可能会出现线条出不来的问题。<br>解决：设为1px；用transform:scale(0.5),来启动GPU加速，就会正常渲染</p><p><a href="https://baijiahao.baidu.com/s?id=1564835558133838&wfr=spider&for=pc" target="_blank" rel="noopener">关于GPU</a></p><h2 id="referre问题"><a href="#referre问题" class="headerlink" title="referre问题"></a>referre问题</h2><p>chrome浏览器重85后的版本,meta—referrer的content默认是改为’strict-origin-when-cross-origin’,即跨域请求时，后端拿到的referrer只包括origin，不含路径。在之前的版本上默认no-referrer-when-downgrade，即降级从https到http时，才会只传origin。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name&#x3D;&quot;referrer&quot; content&#x3D;&quot;no-referrer-when-downgrade&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>content后面的“属性值”，常见有以下几种：</p><ol><li><p>no-referrer：任何情况下都不发送Referrer信息；</p></li><li><p>no-referrer-when-downgrade：仅当协议降级（如从HTTPS页面跳转到HTTP页面）时不发送Referrer信息。是大部分浏览器默认策略。</p></li><li><p>origin：发送只包含host部分的referrer信息，也就是只包含了协议和域名的url，不包含域名后面部分，比如，来源网页url是<a href="https://www.liudaima.com/1.html，但referrer值只包含http://www.liudaima.com；" target="_blank" rel="noopener">https://www.liudaima.com/1.html，但referrer值只包含http://www.liudaima.com；</a></p></li><li><p>origin-when-cross-origin：仅在发生跨域访问时，发送只包含host的Referer信息，但在同域下还是完整的，而只有协议、域名和端口都一致时，浏览器才认为是同域。</p></li><li><p>unsafe-url：全部都发送Referrer信息，是最宽松，也是最不安全的策略</p></li></ol><p>参考文章：</p><ol><li><a href="https://www.liudaima.com/a/132.html" target="_blank" rel="noopener">meta标签name=”referrer”属性的写法和用法</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Referrer-Policy" target="_blank" rel="noopener">MDN:Referrer-Policy </a></li><li><a href="https://developers.google.cn/web/updates/2020/07/referrer-policy-new-chrome-default" target="_blank" rel="noopener">chrome 修改日志</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发中遇到的问题&lt;br&gt;检测全面屏&lt;br&gt;-webkit-overflow-scrolling:touch&lt;br&gt;冒泡导致问题&lt;br&gt;swiper要定义好高度&lt;br&gt;meta referre问题&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
