<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>April的个人小站</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2022-02-14T11:36:30.008Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>April</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构</title>
    <link href="http://yoursite.com/2022/02/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2022/02/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2022-02-14T17:53:07.000Z</published>
    <updated>2022-02-14T11:36:30.008Z</updated>
    
    <content type="html"><![CDATA[<p>栈、队列、双端队列、</p><a id="more"></a><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>先进后出</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>函数执行、历史记录回退</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="基于数组"><a href="#基于数组" class="headerlink" title="基于数组"></a>基于数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Stack&#123;</span><br><span class="line">    construstor()&#123;</span><br><span class="line">        this.items &#x3D; [];</span><br><span class="line">    &#125;</span><br><span class="line">    push(item)&#123;</span><br><span class="line">        this.items.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">    pop()&#123;</span><br><span class="line">        return this.items.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    peek()&#123;</span><br><span class="line">        return this.items[this.items.length - 1];</span><br><span class="line">    &#125;</span><br><span class="line">    size()&#123;</span><br><span class="line">        return this.items.length;</span><br><span class="line">    &#125;</span><br><span class="line">    isEmpty()&#123;</span><br><span class="line">        return this.items.length &#x3D;&#x3D;&#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">    clear()&#123;</span><br><span class="line">        this.items &#x3D; [];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个问题： 1、实例的items不是私有变量，可以随意修改。<br>2、基于数组创建的stack类，方法的实现都是对数组的循环。</p><p>对于问题2，可以基于对象来实现stack。</p><h3 id="基于对象"><a href="#基于对象" class="headerlink" title="基于对象"></a>基于对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">class Stack&#123;</span><br><span class="line">    construstor()&#123;</span><br><span class="line">        this.items &#x3D; &#123;&#125;;</span><br><span class="line">        this.count &#x3D; 0;</span><br><span class="line">        this.last &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">    push(item)&#123;</span><br><span class="line">        this.items[count](item);</span><br><span class="line">        this.count++;</span><br><span class="line">    &#125;</span><br><span class="line">    pop()&#123;</span><br><span class="line">        if(this.isEmpt())) return;</span><br><span class="line">        this.count--;</span><br><span class="line">        const result &#x3D; this.items[this.count];</span><br><span class="line">        del this.items[this.count];</span><br><span class="line">        return result</span><br><span class="line">    &#125;</span><br><span class="line">    peek()&#123;</span><br><span class="line">        if(this.isEmpt())) return;</span><br><span class="line">        return this.items[this.count - 1];</span><br><span class="line">    &#125;</span><br><span class="line">    size()&#123;</span><br><span class="line">        return this.count;</span><br><span class="line">    &#125;</span><br><span class="line">    isEmpty()&#123;</span><br><span class="line">        return this.count &#x3D;&#x3D;&#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">    clear()&#123;</span><br><span class="line">        this.items &#x3D; &#123;&#125;;</span><br><span class="line">        this.count &#x3D; 0</span><br><span class="line">    &#125;</span><br><span class="line">    toString()&#123;</span><br><span class="line">        if(this.isEmpt())) return &#39;&#39;;</span><br><span class="line">        let result &#x3D; this.items[0];</span><br><span class="line">        return Object.values(this.items).reduce((result,item) &#x3D;&gt; &#123;</span><br><span class="line">            result &#x3D; &#96;$&#123;result&#125;,$&#123;item&#125;&#96;</span><br><span class="line">        &#125;, &#39;&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于原型类没有私有属性，基于对象与基于数组创建的stack都有同样的问题，对于问题1，可以尝试用Weak Map来实现</p><h3 id="基于WeakMap"><a href="#基于WeakMap" class="headerlink" title="基于WeakMap"></a>基于WeakMap</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">const items &#x3D; new WeakMap();</span><br><span class="line">class Stack&#123;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        items.set(this, []);</span><br><span class="line">    &#125;</span><br><span class="line">    push(item)&#123;</span><br><span class="line">        const s &#x3D; items.get(this);</span><br><span class="line">        s.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">    pop()&#123;</span><br><span class="line">        const s &#x3D; items.get(this);</span><br><span class="line">        return s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    peek()&#123;</span><br><span class="line">        const s &#x3D; items.get(this);</span><br><span class="line">        return s[s.length - 1];</span><br><span class="line">    &#125;</span><br><span class="line">    size()&#123;</span><br><span class="line">        const s &#x3D; items.get(this);</span><br><span class="line">        return s.length;</span><br><span class="line">    &#125;</span><br><span class="line">    isEmpty()&#123;</span><br><span class="line">        const s &#x3D; items.get(this);</span><br><span class="line">        return s.length &#x3D;&#x3D;&#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">    clear()&#123;</span><br><span class="line">        items.set(this, []);</span><br><span class="line">    &#125;</span><br><span class="line">    toString()&#123;</span><br><span class="line">        const s &#x3D; items.get(this);</span><br><span class="line">        return s.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可以解决的问题"><a href="#可以解决的问题" class="headerlink" title="可以解决的问题"></a>可以解决的问题</h2><h3 id="十进制转二进制"><a href="#十进制转二进制" class="headerlink" title="十进制转二进制"></a>十进制转二进制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let num &#x3D; 10;</span><br><span class="line">function decimalToBinary(num)&#123;</span><br><span class="line">    let stack &#x3D; new Stack();</span><br><span class="line">    while(num &gt; 0)&#123;</span><br><span class="line">        stack.push(num % 2);</span><br><span class="line">        num &#x3D; Math.floor(num &#x2F; 2);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; stack 0,1,0,1</span><br><span class="line">    let binaryString &#x3D; &#39;&#39;;</span><br><span class="line">    while(!stack.isEmpty())&#123;</span><br><span class="line">        binaryString &#x3D; &#96;$&#123;result&#125;$&#123;stack.pop()&#125;&#96;;</span><br><span class="line">    &#125;</span><br><span class="line">    return binaryString</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进制转换算法"><a href="#进制转换算法" class="headerlink" title="进制转换算法"></a>进制转换算法</h3><p>36进制 待补充<br>1-9a-z</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;栈、队列、双端队列、&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>http code</title>
    <link href="http://yoursite.com/2022/01/18/http-code/"/>
    <id>http://yoursite.com/2022/01/18/http-code/</id>
    <published>2022-01-18T16:20:16.000Z</published>
    <updated>2022-02-14T11:36:29.999Z</updated>
    
    <content type="html"><![CDATA[<p>302，403，405</p><a id="more"></a><h1 id="302-暂时性转移-Temporarily-Moved"><a href="#302-暂时性转移-Temporarily-Moved" class="headerlink" title="302: 暂时性转移(Temporarily Moved)"></a>302: 暂时性转移(Temporarily Moved)</h1><p>简单的理解为该资源原本确实存在，但已经被临时改变了位置。就是请求的资源暂时驻留在不同的URI下，故而除非特别指定了缓存头部指示，该状态码不可缓存</p><p>场景：打开网站，css样式不生效。查看response，Content-Type: text/html; charset=utf-8。猜测是服务器对非html类型文件设置的content-type不正确</p><h1 id="403-Forbidden-禁止"><a href="#403-Forbidden-禁止" class="headerlink" title="403 Forbidden(禁止)"></a>403 Forbidden(禁止)</h1><p>Web客户端发送的请求被Web服务器拒绝了，如果服务器想说明为什么拒绝请求，可以包含实体的主体部分来对原因进行描述。但这个状态码通常是服务器不想说明拒绝原因。</p><p>场景：服务器上的文件所属用户与用户组不正确。如：非root用户。可以用chown -R root:root 文件目录来修改目录隶属用户，并用chmod -R 777 文件目录 修改用户、用户组的读写执行权限</p><h1 id="405-Method-Not-Allowed"><a href="#405-Method-Not-Allowed" class="headerlink" title="405 Method Not Allowed"></a>405 Method Not Allowed</h1><p>表明服务器禁止了使用当前 HTTP 方法的请求。需要注意的是，GET 与 HEAD 两个方法不得被禁止，当然也不得返回状态码 405</p><p>场景：应该用get方法请求时，使用错误，用了post</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;302，403，405&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>常用工具方法</title>
    <link href="http://yoursite.com/2022/01/11/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2022/01/11/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95/</id>
    <published>2022-01-11T14:34:48.000Z</published>
    <updated>2022-02-14T11:36:30.008Z</updated>
    
    <content type="html"><![CDATA[<p>全屏展示<br>时间转化</p><a id="more"></a><h1 id="全屏展示"><a href="#全屏展示" class="headerlink" title="全屏展示"></a>全屏展示</h1><p>css 设置全屏样式<br>#canvas:fullscreen{background:#fff}<br>@params ele DOM元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function fullscreen(ele)&#123;</span><br><span class="line">    if(ele.requestFullscreen) ele.requestFullscreen()</span><br><span class="line">    else if (ele.msRequestFullscreen) ele.msRequestFullscreen()</span><br><span class="line">    else if (ele.mozRequestFullScreen) ele.mozRequestFullScreen()</span><br><span class="line">    else if (ele.webkitRequestFullScreen) ele.webkitRequestFullScreen()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>退出全屏 ele.exitFullscreen() || ele.cancelFullScreen || ele.webkitCancelFullScreen || ele.mozCancelFullScreen</p><p>参考<a href="https://www.jb51.net/article/101692.htm" target="_blank" rel="noopener">JS或jQuery实现全屏</a></p><h1 id="时间转化"><a href="#时间转化" class="headerlink" title="时间转化"></a>时间转化</h1><h2 id="秒-为年天时分秒"><a href="#秒-为年天时分秒" class="headerlink" title="秒 - 为年天时分秒"></a>秒 - 为年天时分秒</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function formatTime(s)&#123;</span><br><span class="line">    let aFormatTime &#x3D; []; </span><br><span class="line">    const aJoinTime &#x3D; [&#39;年&#39;, &#39;天&#39;, &#39;小时&#39;, &#39;分&#39;, &#39;秒&#39;],</span><br><span class="line">        yearToS &#x3D; 365 * 24 * 60 * 60,</span><br><span class="line">        dayToS &#x3D; 24 * 60 * 60,</span><br><span class="line">        hourToS &#x3D; 60 * 60;</span><br><span class="line">    aFormatTime[0] &#x3D; Math.floor(s &#x2F; yearToS);</span><br><span class="line">    s %&#x3D;  yearToS;</span><br><span class="line">    aFormatTime[1] &#x3D;  Math.floor(s &#x2F; dayToS);</span><br><span class="line">    s %&#x3D; dayToS </span><br><span class="line">    aFormatTime[2] &#x3D; Math.floor(s &#x2F; hourToS);</span><br><span class="line">    s %&#x3D; hourToS;</span><br><span class="line">    aFormatTime[3] &#x3D; Math.floor(s &#x2F; 60);</span><br><span class="line">    s %&#x3D; 60;</span><br><span class="line">    aFormatTime[4] &#x3D; s;</span><br><span class="line">    return aFormatTime.reduce(</span><br><span class="line">        (result,item, i) &#x3D;&gt; &#123;</span><br><span class="line">            return result +&#x3D; item &gt; 0 ?  item + aJoinTime[i] : &#39;&#39;;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#39;&#39;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;全屏展示&lt;br&gt;时间转化&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Nginx学习</title>
    <link href="http://yoursite.com/2021/11/14/Nginx%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2021/11/14/Nginx%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-11-14T22:51:23.000Z</published>
    <updated>2022-02-14T11:36:29.995Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx</p><a id="more"></a><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>sudo nginx</p><h1 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h1><p>sudo nginx -s reload</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">user  jing staff;</span><br><span class="line">worker_processes  4;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       9999;</span><br><span class="line">        #listen       somename:8080;</span><br><span class="line">        server_name  localhost somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root   &#x2F;Users&#x2F;jing&#x2F;Documents&#x2F;QAX&#x2F;nsg&#x2F;control-plane&#x2F;service&#x2F;webauth&#x2F;webui&#x2F;;</span><br><span class="line">            index  login.html index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    server &#123;</span><br><span class="line">        listen       8888;</span><br><span class="line">        #listen       somename:8080;</span><br><span class="line">        server_name  localhost somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080;</span><br><span class="line">            index  login.html index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location &#x2F; &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line">    include servers&#x2F;*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nginx&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JS类型转换</title>
    <link href="http://yoursite.com/2021/11/05/JS%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>http://yoursite.com/2021/11/05/JS%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</id>
    <published>2021-11-05T22:28:03.000Z</published>
    <updated>2022-02-14T11:36:29.995Z</updated>
    
    <content type="html"><![CDATA[<p>隐式类型转换：1、== 2、if条件</p><a id="more"></a><h1 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h1><h1 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h1><h2 id="隐式类型转换-1"><a href="#隐式类型转换-1" class="headerlink" title="== 隐式类型转换"></a>== 隐式类型转换</h2><h3 id="String、Number与Boolean本质是不同类型都转为数字去比较"><a href="#String、Number与Boolean本质是不同类型都转为数字去比较" class="headerlink" title="String、Number与Boolean本质是不同类型都转为数字去比较"></a>String、Number与Boolean本质是不同类型都转为<strong>数字</strong>去比较</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0 &#x3D;&#x3D; false &#x2F;&#x2F; true</span><br><span class="line">&#39;&#39; &#x3D;&#x3D; false &#x2F;&#x2F; true</span><br><span class="line">&#39;0&#39;&#x3D;&#x3D;false &#x2F;&#x2F; true</span><br><span class="line">&#39;&#39; &#x3D;&#x3D; &#39;0&#39; &#x2F;&#x2F; false</span><br><span class="line">1 &#x3D;&#x3D; &#39;1&#39; &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><p>假如，不同类型与boolean比较转化为boolean来比较，那么第三个就应该为false,因为!!’0’为true；<br>假如，转化为字符串比较，那么false转化为’false’,那么1，2，3都未false；<br>以上这些，说明不同类型==比较时，会隐式转化为数字来进行比较</p><h3 id="对象与基础类型"><a href="#对象与基础类型" class="headerlink" title="对象与基础类型"></a>对象与基础类型</h3><h4 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#39;a&#39; &#x3D;&#x3D; [&#39;a&#39;] &#x2F;&#x2F; true</span><br><span class="line">&#39;[object Object]&#39; &#x3D;&#x3D; &#123;&#125; &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><p>首先调用对象[‘a’].toString() // ‘a’ ，因此 == 成立；<br>({}).toString() // ‘[object Object]’, 因此 ‘[object Object]’ == {} 也成立</p><h4 id="Number与Boolean"><a href="#Number与Boolean" class="headerlink" title="Number与Boolean"></a>Number与Boolean</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[]&#x3D;&#x3D;![] &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><p>也就是 [] == false; Number([]) 为0，Number(false)也为0，<strong>成立！</strong><br>Number([])涉及到的类型转化应为[].toString() // ‘’, 然后Number(‘’)为0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&#123;&#125;) &#x3D;&#x3D; false &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure><p>Number({}) 为NaN，Number(false)为0，<strong>不成立！</strong><br>Number({})涉及到的类型转化应为({}).toString() // ‘[object Object]’, 然后Number(‘[object Object]’)为NaN</p><h4 id="undefined-与-null"><a href="#undefined-与-null" class="headerlink" title="undefined 与 null"></a>undefined 与 null</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">null &#x3D;&#x3D; null &#x2F;&#x2F; true</span><br><span class="line">undefined &#x3D;&#x3D; undefined &#x2F;&#x2F; true</span><br><span class="line">undefined &#x3D;&#x3D; null  &#x2F;&#x2F; true</span><br><span class="line">0 &#x3D;&#x3D; null  &#x2F;&#x2F; false</span><br><span class="line">&#39;&#39; &#x3D;&#x3D; null &#x2F;&#x2F; false</span><br><span class="line">&#39;&#39; &#x3D;&#x3D; undefined &#x2F;&#x2F; false</span><br><span class="line">0 &#x3D;&#x3D; undefined &#x2F;&#x2F; false</span><br><span class="line">false &#x3D;&#x3D; null &#x2F;&#x2F; false</span><br><span class="line">false &#x3D;&#x3D; undefined &#x2F;&#x2F; false</span><br><span class="line">true &#x3D;&#x3D; null &#x2F;&#x2F; false</span><br><span class="line">true &#x3D;&#x3D; undefined  &#x2F;&#x2F;false</span><br></pre></td></tr></table></figure><p>即使 Number(undefined) 为 NaN， Number(null) 为 0，可以看到undefined和null并不能再==运算时，遇到String、Number及  Boolean 做隐式类型转化 </p><h4 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NaN &#x3D;&#x3D; NaN  &#x2F;&#x2F; false</span><br><span class="line">NaN &#x3D;&#x3D; false &#x2F;&#x2F; false</span><br><span class="line">NaN &#x3D;&#x3D; true  &#x2F;&#x2F; false</span><br><span class="line">NaN &#x3D;&#x3D; undefined &#x2F;&#x2F; false</span><br><span class="line">NaN &#x3D;&#x3D; null   &#x2F;&#x2F;false</span><br><span class="line">NaN &#x3D;&#x3D; &#39;&#39; &#x2F;&#x2F; false</span><br><span class="line">NaN &#x3D;&#x3D; 0 &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure><h2 id="If条件与"><a href="#If条件与" class="headerlink" title="If条件与!!"></a>If条件与!!</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Boolean(NaN) &#x2F;&#x2F; false</span><br><span class="line">Boolean(undefined) &#x2F;&#x2F; false</span><br><span class="line">Boolean(null) &#x2F;&#x2F; false</span><br><span class="line">Boolean(&#39;&#39;) &#x2F;&#x2F; false</span><br><span class="line">Boolean(&#39;0&#39;) &#x2F;&#x2F; false</span><br><span class="line">Boolean(0) &#x2F;&#x2F; false</span><br><span class="line">Boolean([]) &#x2F;&#x2F; true</span><br><span class="line">Boolean(&#123;&#125;) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;隐式类型转换：1、== 2、if条件&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>react学习</title>
    <link href="http://yoursite.com/2021/10/16/react%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2021/10/16/react%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-10-16T20:27:07.000Z</published>
    <updated>2022-02-14T11:36:30.008Z</updated>
    
    <content type="html"><![CDATA[<p>react入门学习，来自bilibili腾讯课堂，<br><a href="https://react.docschina.org/" target="_blank" rel="noopener">react官网</a></p><a id="more"></a><h1 id="react入门"><a href="#react入门" class="headerlink" title="react入门"></a>react入门</h1><h2 id="可以做什么"><a href="#可以做什么" class="headerlink" title="可以做什么"></a>可以做什么</h2><p>pc/h5 App  小程序（京东程序编译）</p><h2 id="使用版本"><a href="#使用版本" class="headerlink" title="使用版本"></a>使用版本</h2><p>react16.12.0<br>react-router^5.12.0</p><h2 id="特色"><a href="#特色" class="headerlink" title="特色"></a>特色</h2><p>函数组件和hooks</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="Node安装使用"><a href="#Node安装使用" class="headerlink" title="Node安装使用"></a>Node安装使用</h3><p>nodejs 是基于chrome v8引擎的JavaScript运行环境</p><h4 id="前端开发环境"><a href="#前端开发环境" class="headerlink" title="前端开发环境"></a>前端开发环境</h4><p>webpack  npm插件  server</p><h4 id="服务端动态编程语言"><a href="#服务端动态编程语言" class="headerlink" title="服务端动态编程语言"></a>服务端动态编程语言</h4><p>写接口、链接数据库、Node web</p><h4 id="node黑盒"><a href="#node黑盒" class="headerlink" title="node黑盒"></a>node黑盒</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node</span><br></pre></td></tr></table></figure><p>就进入node的编程环境</p><h3 id="npm-使用"><a href="#npm-使用" class="headerlink" title="npm 使用"></a>npm 使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm adduser | npm publish &#x2F;&#x2F; 发布一个包，登录后发布</span><br><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npmjs.org&#x2F; &#x2F;&#x2F; npm真正的地址</span><br><span class="line">npm config set registry  https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F; &#x2F;&#x2F; 下载包地址换位淘宝映射</span><br><span class="line">npm unpublish[包名] --force &#x2F;&#x2F; 删除包</span><br></pre></td></tr></table></figure><h3 id="yarn使用"><a href="#yarn使用" class="headerlink" title="yarn使用"></a>yarn使用</h3><h4 id="yarn概念"><a href="#yarn概念" class="headerlink" title="yarn概念"></a>yarn概念</h4><p>前端包管理器，去npm平台下载包<br>速度快，更安全，更可靠</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install yarn -g</span><br><span class="line">npm upgrade yarn -g</span><br></pre></td></tr></table></figure><h4 id="yarn使用-1"><a href="#yarn使用-1" class="headerlink" title="yarn使用"></a>yarn使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yarn -v</span><br><span class="line">yarn init</span><br><span class="line">yarn install</span><br><span class="line">yarn add&#x2F;remove &#x2F;&#x2F; 对应npm install 包名</span><br><span class="line">yarn publish&#x2F;login&#x2F;logout</span><br><span class="line">yarn run</span><br></pre></td></tr></table></figure><h1 id="react介绍"><a href="#react介绍" class="headerlink" title="react介绍"></a>react介绍</h1><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>声明式 组件化 灵活<br>组件化：侧重UI层<br>模块化：侧重功能<br>单/多页面 服务端渲染 RN-App</p><h2 id="编写Hello-world"><a href="#编写Hello-world" class="headerlink" title="编写Hello world"></a>编写Hello world</h2><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><h4 id="react核心库"><a href="#react核心库" class="headerlink" title="react核心库"></a>react核心库</h4><p>建议加crossorigin，同时建议验证使用的 CDN 是否设置了 Access-Control-Allow-Origin: * HTTP 请求头：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script crossorigin src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;react@16&#x2F;umd&#x2F;react.development.js&quot;&gt;&lt;&#x2F;script&gt; &#x2F;&#x2F; 开发环境</span><br><span class="line">&lt;script crossorigin src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;react@17&#x2F;umd&#x2F;react.production.min.js&quot;&gt;&lt;&#x2F;script&gt; &#x2F;&#x2F; 生成环境</span><br></pre></td></tr></table></figure><h4 id="reactDOM"><a href="#reactDOM" class="headerlink" title="reactDOM"></a>reactDOM</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script crossorigin src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;react-dom@16&#x2F;umd&#x2F;react-dom.development.js&quot;&gt;&lt;&#x2F;script&gt;  &#x2F;&#x2F; 开发环境</span><br><span class="line">&lt;script crossorigin src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;react-dom@17&#x2F;umd&#x2F;react-dom.production.min.js&quot;&gt;&lt;&#x2F;script&gt; &#x2F;&#x2F; 生成环境</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add react react-dom --save &#x2F;&#x2F;将核心库和reactDOM下载到本地，直接引入本地node包中的文件</span><br><span class="line">&lt;script crossorigin src&#x3D;&quot;.&#x2F;node_modules&#x2F;react&#x2F;umd&#x2F;react.development.js&quot;&gt;&lt;&#x2F;script&gt; </span><br><span class="line">&lt;script crossorigin src&#x3D;&quot;.&#x2F;node_modules&#x2F;react&#x2F;umd&#x2F;react.production.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="babel-解析ES6语法-解析jsx"><a href="#babel-解析ES6语法-解析jsx" class="headerlink" title="babel 解析ES6语法 解析jsx"></a>babel 解析ES6语法 解析jsx</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script crossorigin src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;babel-standalone@6&#x2F;babel.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="核心语法"><a href="#核心语法" class="headerlink" title="核心语法"></a>核心语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reactDom.render()</span><br><span class="line">react.creatElement()</span><br><span class="line">react.components()</span><br></pre></td></tr></table></figure><h3 id="react核心语法应用"><a href="#react核心语法应用" class="headerlink" title="react核心语法应用"></a>react核心语法应用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var hello &#x3D; React.createElement(&#39;h1&#39;, &#123;</span><br><span class="line">        className: &#39;red&#39;,</span><br><span class="line">        name: &#39;liming&#39;,</span><br><span class="line">    &#125;, &#39;hello world&#39;);</span><br><span class="line">    ReactDOM.render(hello, document.getElementById(&#39;app&#39;));</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="JSX介绍"><a href="#JSX介绍" class="headerlink" title="JSX介绍"></a>JSX介绍</h2><p>JSX， 一种 JavaScript 的语法扩展。元素是构成 React 应用的最小单位，JSX 就是用来声明 React 当中的元素。 在js中编写html代码</p><ul><li><p>添加自定义属性需要使用 data- 前缀。</p></li><li><p>在 JSX 中不能使用 if else 语句，但可以使用 conditional (三元运算) 表达式来替代</p></li><li><p>注释需要写在花括号中</p></li><li><p>JSX 允许在模板中插入数组，数组会自动展开所有成员：</p></li><li><p>一些标识符像 class 和 for 不建议作为 XML 属性名。作为替代，React DOM 使用 className 和 htmlFor 来做对应的属性。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script crossorigin src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;babel-standalone@6&#x2F;babel.min.js&quot;&gt;&lt;&#x2F;script&gt;  &#x2F;&#x2F; 增加babel解析</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;babel&quot;&gt; &#x2F;&#x2F; script 必须定义类型</span><br><span class="line">    var name &#x3D; &#39;liming&#39;;</span><br><span class="line">    ReactDOM.render(</span><br><span class="line">        &lt;h1 className&#x3D;&quot;red&quot; name&#x3D;&quot;liming&quot;&gt;hello &#123;name&#125;&lt;&#x2F;h1&gt;, &#x2F;&#x2F; html语法可以直接卸载render里</span><br><span class="line">        document.getElementById(&#39;app&#39;));</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="元素渲染"><a href="#元素渲染" class="headerlink" title="元素渲染"></a>元素渲染</h2><p>model</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;babel&quot;&gt;</span><br><span class="line">    function tick()&#123;</span><br><span class="line">        var time &#x3D; new Date().toLocaleTimeString();</span><br><span class="line">        var name &#x3D; &#39;liming&#39;;</span><br><span class="line">        var dom &#x3D; &lt;div&gt; &#x2F;&#x2F; 多个标签时一定要有根元素</span><br><span class="line">                &lt;h1 className&#x3D;&quot;red&quot; name&#x3D;&quot;liming&quot;&gt;hello &#123;name&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">                &lt;h2&gt;现在是：&#123;time&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        ReactDOM.render(</span><br><span class="line">            dom,</span><br><span class="line">            document.getElementById(&#39;app&#39;));</span><br><span class="line">    &#125;</span><br><span class="line">    setInterval(tick, 1000);</span><br><span class="line">    </span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>view<br>可以在html结构中看到，有差异才渲染，变动的只有：<br><img src="/2021/10/16/react%E5%AD%A6%E4%B9%A0/1634394697551.jpg" style="width: 400px;text-align: left;margin:0;"></p><h2 id="组件和props"><a href="#组件和props" class="headerlink" title="组件和props"></a>组件和props</h2><h3 id="React-createClass-废弃，笨重，不灵活"><a href="#React-createClass-废弃，笨重，不灵活" class="headerlink" title="React.createClass(); // 废弃，笨重，不灵活"></a>React.createClass(); // 废弃，笨重，不灵活</h3><h3 id="函数式组件（无状态组件）"><a href="#函数式组件（无状态组件）" class="headerlink" title="函数式组件（无状态组件）"></a>函数式组件（无状态组件）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;babel&quot;&gt;</span><br><span class="line">    function Hello(props)&#123; &#x2F;&#x2F; 函数式组件，无生命周期</span><br><span class="line">        return &lt;div&gt;</span><br><span class="line">                &lt;h1 className&#x3D;&quot;red&quot;&gt;hello &#123;props.name&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">                &lt;h2&gt;现在是：&#123;props.time&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ReactDOM.render(</span><br><span class="line">        &lt;Hello time&#x3D;&quot;晚上&quot; name&#x3D;&#39;LiMing&#39; &#x2F;&gt;,</span><br><span class="line">        document.getElementById(&#39;app&#39;));</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="React-Component"><a href="#React-Component" class="headerlink" title="React.Component"></a>React.Component</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;babel&quot;&gt;</span><br><span class="line">    class Hello extends React.Component&#123; &#x2F;&#x2F; 正常组件，有生命周期</span><br><span class="line">        render()&#123;</span><br><span class="line">            return &lt;div&gt;</span><br><span class="line">                &lt;h1 className&#x3D;&quot;red&quot;&gt;hello &#123; this.props.name&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">                &lt;h2&gt;现在是：&#123; this.props.time&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ReactDOM.render(</span><br><span class="line">        &lt;Hello time&#x3D;&quot;晚上&quot; name&#x3D;&#39;LiMing&#39; &#x2F;&gt;,</span><br><span class="line">        document.getElementById(&#39;app&#39;));</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="React生命周期"><a href="#React生命周期" class="headerlink" title="React生命周期"></a>React生命周期</h2><p>执行过程，四个阶段：<br>组件初始化阶段<br>组件加载阶段<br>组件更新阶段<br>组件销毁阶段</p><img src="/2021/10/16/react%E5%AD%A6%E4%B9%A0/16775500-8d325f8093591c76.webp" style="width: 100%;text-align: left;margin:0;"><h3 id="初始化和加载阶段"><a href="#初始化和加载阶段" class="headerlink" title="初始化和加载阶段"></a>初始化和加载阶段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;babel&quot;&gt;        </span><br><span class="line">    class Hello extends React.Component&#123; &#x2F;&#x2F; 正常组件，有生命周期</span><br><span class="line">        constructor(props)&#123;</span><br><span class="line">            console.log(&#39;初始化阶段&#39;)</span><br><span class="line">            &#x2F;&#x2F; 初始化props</span><br><span class="line">            super(props)</span><br><span class="line">            &#x2F;&#x2F; 初始化状态</span><br><span class="line">            this.state &#x3D; &#123;</span><br><span class="line">                name: &#39;Liming&#39;,</span><br><span class="line">                time: &#39;晚上&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        componentWillMount()&#123;</span><br><span class="line">            console.log(&#39;组件加载前&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">        componentDidMount()&#123;</span><br><span class="line">            console.log(&#39;组件加载后&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        render()&#123;</span><br><span class="line">            console.log(&#39;组件加载或组件更新&#39;)</span><br><span class="line">            return &lt;div&gt;</span><br><span class="line">                &lt;h1 className&#x3D;&quot;red&quot;&gt;hello &#123; this.state.name&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">                &lt;h2&gt;现在是：&#123; this.state.time&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">                &lt;button onClick&#x3D;&#123;this.updateUser&#125; &gt;更新&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ReactDOM.render(</span><br><span class="line">        &lt;Hello time&#x3D;&quot;晚上&quot; name&#x3D;&#39;LiMing&#39; &#x2F;&gt;,</span><br><span class="line">        document.getElementById(&#39;app&#39;));</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>打印顺序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">初始化阶段constructor</span><br><span class="line">组件加载前componentWillMount</span><br><span class="line">组件加载或组件更新render</span><br><span class="line">组件加载后componentDidMount</span><br></pre></td></tr></table></figure><h3 id="更新阶段"><a href="#更新阶段" class="headerlink" title="更新阶段"></a>更新阶段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;babel&quot;&gt;        </span><br><span class="line">    class Hello extends React.Component&#123; &#x2F;&#x2F; 正常组件，有生命周期</span><br><span class="line">        constructor(props)&#123;</span><br><span class="line">            console.log(&#39;初始化阶段&#39;)</span><br><span class="line">            &#x2F;&#x2F; 初始化props</span><br><span class="line">            super(props)</span><br><span class="line">            &#x2F;&#x2F; 初始化状态</span><br><span class="line">            this.state &#x3D; &#123;</span><br><span class="line">                name: &#39;Liming&#39;,</span><br><span class="line">                time: &#39;晚上&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        componentWillMount()&#123;</span><br><span class="line">            console.log(&#39;组件加载前&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">        componentDidMount()&#123;</span><br><span class="line">            console.log(&#39;组件加载后&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">        updateUser &#x3D; () &#x3D;&gt; &#123; &#x2F;&#x2F; 需用箭头函数 或updateUser &#x3D; function() &#123;&#125; 不然this指向undefined</span><br><span class="line">            &#x2F;&#x2F; this.state.name &#x3D; &#39;Tim&#39;; &#x2F;&#x2F; 错误，不会触发render</span><br><span class="line">            this.setState(&#123;</span><br><span class="line">                name: &#39;Tim&#39;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        shouldComponentUpdate()&#123;</span><br><span class="line">            return true; &#x2F;&#x2F; true 代表需要更新 false代表不更新</span><br><span class="line">        &#125;</span><br><span class="line">        componentWillUpdate()&#123;</span><br><span class="line">            console.log(&#39;组件将要更新&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">        componentDidUpdate()&#123;</span><br><span class="line">            console.log(&#39;组件已经更新&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            console.log(&#39;组件加载或组件更新&#39;)</span><br><span class="line">            return &lt;div&gt;</span><br><span class="line">                &lt;h1 className&#x3D;&quot;red&quot;&gt;hello &#123; this.state.name&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">                &lt;h2&gt;现在是：&#123; this.state.time&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">                &lt;button onClick&#x3D;&#123;this.updateUser&#125; &gt;更新&lt;&#x2F;button&gt; &#x2F;&#x2F; onClick后的函数并一定不要加()</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ReactDOM.render(</span><br><span class="line">        &lt;Hello time&#x3D;&quot;晚上&quot; name&#x3D;&#39;LiMing&#39; &#x2F;&gt;,</span><br><span class="line">        document.getElementById(&#39;app&#39;));</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数据是否需要更新shouldComponentUpdate</span><br><span class="line">组件将要更新componentWillUpdate</span><br><span class="line">组件加载或组件更新render</span><br><span class="line">组件已经更新componentDidUpdate</span><br></pre></td></tr></table></figure><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>react组件中普通的方法中的this指向undefined 可以用箭头函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">updateUser () &#123; </span><br><span class="line">    console.log(this) &#x2F;&#x2F; undefined</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">        name: &#39;Tim&#39;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但还是想用这种写法的话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;babel&quot;&gt;        </span><br><span class="line">    class Hello extends React.Component&#123; &#x2F;&#x2F; 正常组件，有生命周期</span><br><span class="line">        constructor(props)&#123;</span><br><span class="line">            console.log(&#39;初始化阶段&#39;)</span><br><span class="line">            &#x2F;&#x2F; 初始化props</span><br><span class="line">            super(props)</span><br><span class="line">            &#x2F;&#x2F; 初始化状态</span><br><span class="line">            this.state &#x3D; &#123;</span><br><span class="line">                name: &#39;Liming&#39;,</span><br><span class="line">                time: &#39;晚上&#39;</span><br><span class="line">            &#125;</span><br><span class="line">            this.updateUser &#x3D; this.updateUser.bind(this); &#x2F;&#x2F; 给自己定义事件绑定this</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        updateUser () &#123; &#x2F;&#x2F; react组件中普通的方法中的this指向undefined 可以用箭头函数</span><br><span class="line">            console.log(this) &#x2F;&#x2F; 组件实例</span><br><span class="line">            this.setState(&#123;</span><br><span class="line">                name: &#39;Tim&#39;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        render()&#123;</span><br><span class="line">            console.log(&#39;组件加载或组件更新&#39;)</span><br><span class="line">            return &lt;div&gt;</span><br><span class="line">                &lt;h1 className&#x3D;&quot;red&quot;&gt;hello &#123; this.state.name&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">                &lt;h2&gt;现在是：&#123; this.state.time&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">                &lt;button onClick&#x3D;&#123;this.updateUser&#125; &gt;更新&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ReactDOM.render(</span><br><span class="line">        &lt;Hello time&#x3D;&quot;晚上&quot; name&#x3D;&#39;LiMing&#39; &#x2F;&gt;,</span><br><span class="line">        document.getElementById(&#39;app&#39;));</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>或者修改点击事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick&#x3D;&#123;() &#x3D;&gt; this.updateUser()&#125; &gt;更新&lt;&#x2F;button&gt;</span><br><span class="line">或</span><br><span class="line">&lt;button onClick&#x3D;&#123;this.updateUser.bind(this)&#125; &gt;更新&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p>通过if else或者三目判断出应用的组件，再把组件放到应用的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;babel&quot;&gt;        </span><br><span class="line">    function Login(props)&#123;</span><br><span class="line">        return &lt;button onClick&#x3D;&#123;props.updateUser&#125;&gt;登录&lt;&#x2F;button&gt;</span><br><span class="line">    &#125;</span><br><span class="line">    function Logout(props)&#123;</span><br><span class="line">        return &lt;button onClick&#x3D;&#123;props.updateUser&#125;&gt;登出&lt;&#x2F;button&gt;</span><br><span class="line">    &#125;</span><br><span class="line">    class Hello extends React.Component&#123; &#x2F;&#x2F; 正常组件，有生命周期</span><br><span class="line">        state &#x3D; &#123;</span><br><span class="line">            name: &#39;LiMing&#39;,</span><br><span class="line">            isLogin: false</span><br><span class="line">        &#125;</span><br><span class="line">        updateUser &#x3D; ()&#x3D;&gt; &#123; &#x2F;&#x2F; react组件中普通的方法中的this指向undefined 可以用箭头函数</span><br><span class="line">            this.setState(&#123;</span><br><span class="line">                isLogin: !this.state.isLogin</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        render()&#123;</span><br><span class="line">            const &#123;isLogin&#125; &#x3D; this.state;</span><br><span class="line">            let button;</span><br><span class="line">            if(isLogin)&#123; &#x2F;&#x2F; 条件判断button为登录还是登出，也可用三目</span><br><span class="line">                button &#x3D; &lt;Login updateUser&#x3D;&#123;this.updateUser&#125;&#x2F;&gt; &#x2F;&#x2F; 向子组件传递自定义事件，子组件可通过出发传递的事件来修改父组件的state</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                button &#x3D; &lt;Logout updateUser&#x3D;&#123;this.updateUser&#125;&#x2F;&gt;</span><br><span class="line">            &#125;</span><br><span class="line">            return &lt;div&gt;</span><br><span class="line">                &lt;h1 className&#x3D;&quot;red&quot;&gt;hello &#123; this.state.name&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">                &#123;button&#125;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ReactDOM.render(</span><br><span class="line">        &lt;Hello time&#x3D;&quot;晚上&quot; name&#x3D;&#39;LiMing&#39; &#x2F;&gt;,</span><br><span class="line">        document.getElementById(&#39;app&#39;));</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><p>将[1,2,3,4,5]转化为[&lt;li key=”0”&gt;1&lt;/li&gt;, &lt;li key=”1”&gt;2&lt;/li&gt;,….]，将转化后的数组放在相应的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;babel&quot;&gt;        </span><br><span class="line">    class List extends React.Component&#123; &#x2F;&#x2F; 正常组件，有生命周期</span><br><span class="line">        state &#x3D; &#123;</span><br><span class="line">            list: [1,2,3,4,5],</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            const &#123; list &#125; &#x3D; this.state;</span><br><span class="line">            return &lt;ul&gt;</span><br><span class="line">                &#123;list.map((item, i) &#x3D;&gt; &lt;li key&#x3D;&#123;i&#125;&gt;&#123;item&#125;&lt;&#x2F;li&gt;)&#125;</span><br><span class="line">            &lt;&#x2F;ul&gt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ReactDOM.render(</span><br><span class="line">        &lt;List  &#x2F;&gt;,</span><br><span class="line">        document.getElementById(&#39;app&#39;));</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="表单应用"><a href="#表单应用" class="headerlink" title="表单应用"></a>表单应用</h2><p>需要在表单数据修改onChange，主动更新state中的value，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.setState(&#123;</span><br><span class="line">    val: event.target.value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;babel&quot;&gt;        </span><br><span class="line">    class TodoList extends React.Component&#123; &#x2F;&#x2F; 正常组件，有生命周期</span><br><span class="line">        state &#x3D; &#123;</span><br><span class="line">            val: &#39;&#39;,</span><br><span class="line">            list: [],</span><br><span class="line">        &#125;</span><br><span class="line">        changeHandler &#x3D; (event)&#x3D;&gt;&#123;</span><br><span class="line">            this.setState(&#123;</span><br><span class="line">                val: event.target.value</span><br><span class="line">            &#125;)</span><br><span class="line">            &#x2F;&#x2F; this.state.val &#x3D; event.target.value; &#x2F;&#x2F; 直接赋值input框的输入都输不进去</span><br><span class="line">        &#125;</span><br><span class="line">        add &#x3D; ()&#x3D;&gt;&#123;</span><br><span class="line"></span><br><span class="line">            this.state.list.push(this.state.val);</span><br><span class="line">            this.setState(&#123;</span><br><span class="line">                list: this.state.list</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            const &#123; val, list &#125; &#x3D; this.state;</span><br><span class="line">            return &lt;div&gt;</span><br><span class="line">                &lt;input type&#x3D;&quot;text&quot; value&#x3D;&#123;val&#125; onChange&#x3D;&#123;this.changeHandler&#125; &#x2F;&gt;</span><br><span class="line">                &lt;button onClick&#x3D;&#123;this.add&#125; &gt;添加&lt;&#x2F;button&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &#123;list.map((item, i) &#x3D;&gt; &lt;li key&#x3D;&#123;i&#125;&gt;&#123;item&#125;&lt;&#x2F;li&gt;)&#125;</span><br><span class="line">                &lt;&#x2F;ul&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ReactDOM.render(</span><br><span class="line">        &lt;TodoList  &#x2F;&gt;,</span><br><span class="line">        document.getElementById(&#39;app&#39;));</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h1 id="react应用入门"><a href="#react应用入门" class="headerlink" title="react应用入门"></a>react应用入门</h1><p>react-demo库中的react-app</p><h2 id="脚手架使用"><a href="#脚手架使用" class="headerlink" title="脚手架使用"></a>脚手架使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g create-react-app</span><br><span class="line">yarn add -g create-react-app</span><br><span class="line">create-react-app react-demo</span><br></pre></td></tr></table></figure><p>react脚手架构建的项目，webpack配置是隐藏的，运行命令，显示，可以做修改。一旦显示就不能再隐藏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn run eject</span><br></pre></td></tr></table></figure><h2 id="单页面开发"><a href="#单页面开发" class="headerlink" title="单页面开发"></a>单页面开发</h2><p>入口文件index.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import React from &#39;react&#39;; &#x2F;&#x2F; 核心库</span><br><span class="line">import ReactDOM from &#39;react-dom&#39;; &#x2F;&#x2F; dom操作库</span><br><span class="line">import &#39;.&#x2F;index.css&#39;;</span><br><span class="line">import App from &#39;.&#x2F;App&#39;; &#x2F;&#x2F; 业务组件</span><br><span class="line">import reportWebVitals from &#39;.&#x2F;reportWebVitals&#39;; &#x2F;&#x2F; 性能监控</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;React.StrictMode&gt;</span><br><span class="line">    &lt;App &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;React.StrictMode&gt;,</span><br><span class="line">  document.getElementById(&#39;root&#39;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>我们的业务代码在App.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; App.js</span><br><span class="line">import &#39;.&#x2F;App.scss&#39;; &#x2F;&#x2F; 引入css或者scss</span><br><span class="line"></span><br><span class="line">function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className&#x3D;&quot;App&quot;&gt;</span><br><span class="line">      &lt;h1&gt;hello world&lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;p&gt;欢迎&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><p>应用sass，只需安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S node-sass</span><br></pre></td></tr></table></figure><p>需要有状态组件的话，需在组件中引入react库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; App.js</span><br><span class="line">import React from &#39;react&#39;; &#x2F;&#x2F; 需要引入react库</span><br><span class="line">import &#39;.&#x2F;App.scss&#39;;</span><br><span class="line"></span><br><span class="line">class App extends React.Component&#123; &#x2F;&#x2F; 正常组件，有生命周期</span><br><span class="line">    state &#x3D; &#123;</span><br><span class="line">        val: &#39;&#39;,</span><br><span class="line">        list: [],</span><br><span class="line">    &#125;</span><br><span class="line">    changeHandler &#x3D; (event)&#x3D;&gt;&#123;</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            val: event.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">        &#x2F;&#x2F; this.state.val &#x3D; event.target.value; &#x2F;&#x2F; 直接赋值input框的输入都输不进去</span><br><span class="line">    &#125;</span><br><span class="line">    add &#x3D; ()&#x3D;&gt;&#123;</span><br><span class="line"></span><br><span class="line">        this.state.list.push(this.state.val);</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            list: this.state.list</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        const &#123; val, list &#125; &#x3D; this.state;</span><br><span class="line">        return &lt;div&gt;</span><br><span class="line">            &lt;input type&#x3D;&quot;text&quot; value&#x3D;&#123;val&#125; onChange&#x3D;&#123;this.changeHandler&#125; &#x2F;&gt;</span><br><span class="line">            &lt;button onClick&#x3D;&#123;this.add&#125; &gt;添加&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &#123;list.map((item, i) &#x3D;&gt; &lt;li key&#x3D;&#123;i&#125;&gt;&#123;item&#125;&lt;&#x2F;li&gt;)&#125;</span><br><span class="line">            &lt;&#x2F;ul&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><h2 id="AntD"><a href="#AntD" class="headerlink" title="AntD"></a>AntD</h2><p><a href="https://ant.design/docs/react/introduce-cn" target="_blank" rel="noopener">官网</a></p><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install antd --save</span><br></pre></td></tr></table></figure><p>支持按需加载,默认支持基于 ES modules 的 tree shaking。webpack1不支持tree shaking，需要引入babel-plugin-import来支持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; DatePicker &#125; from &#39;antd&#39;;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;DatePicker &#x2F;&gt;, mountNode);</span><br></pre></td></tr></table></figure><p>引入样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#39;antd&#x2F;dist&#x2F;antd.css&#39;; &#x2F;&#x2F; or &#39;antd&#x2F;dist&#x2F;antd.less&#39;</span><br></pre></td></tr></table></figure><h1 id="React-Router"><a href="#React-Router" class="headerlink" title="React-Router"></a>React-Router</h1><h2 id="路由的基本配置"><a href="#路由的基本配置" class="headerlink" title="路由的基本配置"></a>路由的基本配置</h2><h3 id="BrowserRouter-HashRouter"><a href="#BrowserRouter-HashRouter" class="headerlink" title="BrowserRouter/HashRouter"></a>BrowserRouter/HashRouter</h3><p>history ‘/‘和hash模式 ‘#’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 定义router.js</span><br><span class="line">import &#123; BrowserRouter as Router, Route &#125; from &#39;react-router-dom&#39;; &#x2F;&#x2F; 一定要安装react-router-dom，因为react-router没有link和navlink</span><br><span class="line">import App from &#39;.&#x2F;pages&#x2F;app&#39;;</span><br><span class="line">import Home from &#39;.&#x2F;pages&#x2F;home&#39;;</span><br><span class="line">import Login from &#39;.&#x2F;pages&#x2F;login&#39;;</span><br><span class="line"></span><br><span class="line">export default function IRouter()&#123;</span><br><span class="line">    return &lt;Router&gt;</span><br><span class="line">        &lt;Routepath&#x3D;&#39;&#x2F;&#39; component&#x3D;&#123;App&#125;&gt;&lt;&#x2F;Route&gt;</span><br><span class="line">        &lt;Route path&#x3D;&#39;&#x2F;home&#39; component&#x3D;&#123;Home&#125;&gt;&lt;&#x2F;Route&gt;</span><br><span class="line">        &lt;Route path&#x3D;&#39;&#x2F;login&#39; component&#x3D;&#123;Login&#125;&gt;&lt;&#x2F;Route&gt;</span><br><span class="line">    &lt;&#x2F;Router&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>入口文件index.js中, 引入并渲染router.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import Router from &#39;.&#x2F;router&#39;;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;React.StrictMode&gt;</span><br><span class="line">    &lt;Router &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;React.StrictMode&gt;,</span><br><span class="line">  document.getElementById(&#39;root&#39;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>运行yarn run start, 发现在<a href="http://localhost:3000/Login路由下，会把app的组件也匹配上，这时就需要用到Switch组件" target="_blank" rel="noopener">http://localhost:3000/Login路由下，会把app的组件也匹配上，这时就需要用到Switch组件</a></p><h3 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h3><p>4以上的版本才有,根据路由只会匹配一项. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; router.js</span><br><span class="line">import &#123; BrowserRouter as Router, Route, Switch &#125; from &#39;react-router-dom&#39;; &#x2F;&#x2F; 一定要安装react-router-dom，因为react-router没有link和navlink</span><br><span class="line">import App from &#39;.&#x2F;pages&#x2F;app&#39;;</span><br><span class="line">import Home from &#39;.&#x2F;pages&#x2F;home&#39;;</span><br><span class="line">import Login from &#39;.&#x2F;pages&#x2F;login&#39;;</span><br><span class="line"></span><br><span class="line">export default function IRouter()&#123;</span><br><span class="line">    return &lt;Router&gt;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">            &lt;Route path&#x3D;&#39;&#x2F;&#39; component&#x3D;&#123;App&#125;&gt;&lt;&#x2F;Route&gt;</span><br><span class="line">            &lt;Route path&#x3D;&#39;&#x2F;home&#39; component&#x3D;&#123;Home&#125;&gt;&lt;&#x2F;Route&gt;</span><br><span class="line">            &lt;Route path&#x3D;&#39;&#x2F;login&#39; component&#x3D;&#123;Login&#125;&gt;&lt;&#x2F;Route&gt;</span><br><span class="line">        &lt;&#x2F;Switch&gt;</span><br><span class="line">    &lt;&#x2F;Router&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时还有问题，它会匹配符合条件的第一项，也就是app组件。那么我们就需要精准匹配</p><h3 id="Route-exact-path-component"><a href="#Route-exact-path-component" class="headerlink" title="Route-exact/path/component"></a>Route-exact/path/component</h3><p>精准匹配，Route后加exact</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route exact path&#x3D;&#39;&#x2F;&#39; component&#x3D;&#123;App&#125;&gt;&lt;&#x2F;Route&gt;</span><br></pre></td></tr></table></figure><h3 id="Link-NavLink"><a href="#Link-NavLink" class="headerlink" title="Link/NavLink"></a>Link/NavLink</h3><p>标签，路由对跳转的封装,如在app.js中使用Link做路由跳转</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; app.js</span><br><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import &#123;Link&#125; from &#39;react-router-dom&#39;;</span><br><span class="line">import &#39;.&#x2F;app.scss&#39;;</span><br><span class="line"></span><br><span class="line">export default function App()&#123;</span><br><span class="line">    return &lt;div className&#x3D;&quot;container&quot;&gt;</span><br><span class="line">        &lt;h1&gt;react-demo单页应用&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;Link to&#x3D;&#39;&#x2F;login&#39;&gt;去登录页&lt;&#x2F;Link&gt;</span><br><span class="line">        &lt;Link to&#x3D;&#39;&#x2F;home&#39;&gt;去首页&lt;&#x2F;Link&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义跳转,需用到有状态组件，在自定义事件中 this.props.history.push(‘/home’)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; app.js</span><br><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import &#123;Link&#125; from &#39;react-router-dom&#39;;</span><br><span class="line">import &#39;.&#x2F;app.scss&#39;;</span><br><span class="line">import &#123;Button&#125; from &#39;antd&#39;;</span><br><span class="line">import &#39;antd&#x2F;dist&#x2F;antd.css&#39;;</span><br><span class="line"></span><br><span class="line">export default class App extends React.Component &#123;</span><br><span class="line">    jump &#x3D; ()&#x3D;&gt;&#123;</span><br><span class="line">        this.props.history.push(&#39;&#x2F;home&#39;); &#x2F;&#x2F; 跳转</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return &lt;div className&#x3D;&quot;container&quot;&gt;</span><br><span class="line">            &lt;h1&gt;react-demo单页应用&lt;&#x2F;h1&gt;</span><br><span class="line">            &lt;Link to&#x3D;&#39;&#x2F;login&#39;&gt;去登录页&lt;&#x2F;Link&gt;</span><br><span class="line">            &lt;Link to&#x3D;&#39;&#x2F;home&#39;&gt;去首页&lt;&#x2F;Link&gt;</span><br><span class="line">            &lt;Button onClick&#x3D;&#123;this.jump&#125;&gt;自定义跳转去首页&lt;&#x2F;Button&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="路由的动态配置"><a href="#路由的动态配置" class="headerlink" title="路由的动态配置"></a>路由的动态配置</h2><h3 id="动态detail-productId"><a href="#动态detail-productId" class="headerlink" title="动态detail/productId"></a>动态detail/productId</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; router.js</span><br><span class="line">import &#123; BrowserRouter as Router, Route, Switch &#125; from &#39;react-router-dom&#39;; &#x2F;&#x2F; 一定要安装react-router-dom，因为react-router没有link和navlink</span><br><span class="line">import App from &#39;.&#x2F;pages&#x2F;app&#39;;</span><br><span class="line">import Home from &#39;.&#x2F;pages&#x2F;home&#39;;</span><br><span class="line">import Login from &#39;.&#x2F;pages&#x2F;login&#39;;</span><br><span class="line">import Detail from &#39;.&#x2F;pages&#x2F;detail&#39;;</span><br><span class="line"></span><br><span class="line">export default function IRouter()&#123;</span><br><span class="line">    return &lt;Router&gt;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">            &lt;Route exact path&#x3D;&#39;&#x2F;&#39; component&#x3D;&#123;App&#125;&gt;&lt;&#x2F;Route&gt;</span><br><span class="line">            &lt;Route path&#x3D;&#39;&#x2F;home&#39; component&#x3D;&#123;Home&#125;&gt;&lt;&#x2F;Route&gt;</span><br><span class="line">            &lt;Route path&#x3D;&#39;&#x2F;login&#39; component&#x3D;&#123;Login&#125;&gt;&lt;&#x2F;Route&gt;</span><br><span class="line">            &lt;Route path&#x3D;&#39;&#x2F;detail&#x2F;:id&#39; component&#x3D;&#123;Detail&#125;&gt;&lt;&#x2F;Route&gt;</span><br><span class="line">        &lt;&#x2F;Switch&gt;</span><br><span class="line">    &lt;&#x2F;Router&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时能匹配到 <a href="http://localhost:3000/detail/123,但http://localhost:3000/detail是匹配不到的" target="_blank" rel="noopener">http://localhost:3000/detail/123,但http://localhost:3000/detail是匹配不到的</a></p><h3 id="redirect-404"><a href="#redirect-404" class="headerlink" title="redirect/404"></a>redirect/404</h3><h4 id="redirect"><a href="#redirect" class="headerlink" title="redirect"></a>redirect</h4><p>将login重定向到首页，引入Redirect模块，在route中应用，to到重定向的页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; router.js</span><br><span class="line">import &#123; BrowserRouter as Router, Route, Switch, Redirect &#125; from &#39;react-router-dom&#39;; &#x2F;&#x2F; 一定要安装react-router-dom，因为react-router没有link和navlink</span><br><span class="line">import App from &#39;.&#x2F;pages&#x2F;app&#39;;</span><br><span class="line">import Home from &#39;.&#x2F;pages&#x2F;home&#39;;</span><br><span class="line">import Login from &#39;.&#x2F;pages&#x2F;login&#39;;</span><br><span class="line">import Detail from &#39;.&#x2F;pages&#x2F;detail&#39;;</span><br><span class="line"></span><br><span class="line">export default function IRouter()&#123;</span><br><span class="line">    return &lt;Router&gt;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">            &lt;Route exact path&#x3D;&#39;&#x2F;&#39; component&#x3D;&#123;App&#125;&gt;&lt;&#x2F;Route&gt;</span><br><span class="line">            &lt;Route path&#x3D;&#39;&#x2F;home&#39; component&#x3D;&#123;Home&#125;&gt;&lt;&#x2F;Route&gt;</span><br><span class="line">            &lt;Route path&#x3D;&#39;&#x2F;login&#39; component&#x3D;&#123;Login&#125;&gt;</span><br><span class="line">                &lt;Redirect to&#x3D;&quot;&#x2F;home&quot;&gt;&lt;&#x2F;Redirect&gt;</span><br><span class="line">            &lt;&#x2F;Route&gt;</span><br><span class="line">            &lt;Route path&#x3D;&#39;&#x2F;detail&#x2F;:id&#39; component&#x3D;&#123;Detail&#125;&gt;&lt;&#x2F;Route&gt;</span><br><span class="line">        &lt;&#x2F;Switch&gt;</span><br><span class="line">    &lt;&#x2F;Router&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="404"><a href="#404" class="headerlink" title="404"></a>404</h4><p>新建一个NoMatch的404组件，在router最后加*通配符，上面都没有匹配到，就走到这里，展示404页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import &#123; BrowserRouter as Router, Route, Switch, Redirect &#125; from &#39;react-router-dom&#39;; &#x2F;&#x2F; 一定要安装react-router-dom，因为react-router没有link和navlink</span><br><span class="line">import App from &#39;.&#x2F;pages&#x2F;app&#39;;</span><br><span class="line">import Home from &#39;.&#x2F;pages&#x2F;home&#39;;</span><br><span class="line">import Login from &#39;.&#x2F;pages&#x2F;login&#39;;</span><br><span class="line">import Detail from &#39;.&#x2F;pages&#x2F;detail&#39;;</span><br><span class="line">import NoMatch from &#39;.&#x2F;pages&#x2F;404&#39;;</span><br><span class="line"></span><br><span class="line">export default function IRouter()&#123;</span><br><span class="line">    return &lt;Router&gt;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">            &lt;Route exact path&#x3D;&#39;&#x2F;&#39; component&#x3D;&#123;App&#125;&gt;&lt;&#x2F;Route&gt;</span><br><span class="line">            &lt;Route path&#x3D;&#39;&#x2F;home&#39; component&#x3D;&#123;Home&#125;&gt;&lt;&#x2F;Route&gt;</span><br><span class="line">            &lt;Route path&#x3D;&#39;&#x2F;login&#39; component&#x3D;&#123;Login&#125;&gt;</span><br><span class="line">                &lt;Redirect to&#x3D;&quot;&#x2F;home&quot;&gt;&lt;&#x2F;Redirect&gt;</span><br><span class="line">            &lt;&#x2F;Route&gt;</span><br><span class="line">            &lt;Route path&#x3D;&#39;&#x2F;detail&#x2F;:id&#39; component&#x3D;&#123;Detail&#125;&gt;&lt;&#x2F;Route&gt;</span><br><span class="line">            &lt;Route path&#x3D;&#39;*&#39; component&#x3D;&#123;NoMatch&#125;&gt;&lt;&#x2F;Route&gt;</span><br><span class="line">        &lt;&#x2F;Switch&gt;</span><br><span class="line">    &lt;&#x2F;Router&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="React-Hooks-amp-路由Hooks"><a href="#React-Hooks-amp-路由Hooks" class="headerlink" title="React Hooks &amp; 路由Hooks"></a>React Hooks &amp; 路由Hooks</h2><p>解决函数组件无状态的问题</p><h3 id="React-Hooks"><a href="#React-Hooks" class="headerlink" title="React Hooks"></a>React Hooks</h3><p>16.8版本以上可以用</p><h4 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h4><p>状态的改变和更新<br>引入useState</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;useState&#125; from &#39;react&#39;; &#x2F;&#x2F; 引入</span><br></pre></td></tr></table></figure><p>useState(默认值)，返回一个数组，第一个值是状态值，第二个值是更新函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const [count, setCount] &#x3D; useState(0); &#x2F;&#x2F; 初始化一个状态,返回一个数组</span><br></pre></td></tr></table></figure><p>修改状态时，要用箭头函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button onClick&#x3D;&#123;() &#x3D;&gt; setCount(count+1)&#125;&gt;次数加1&lt;&#x2F;Button&gt;</span><br></pre></td></tr></table></figure><p>整体代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; app.js</span><br><span class="line">import React, &#123;useState&#125; from &#39;react&#39;;</span><br><span class="line">import &#123;Link&#125; from &#39;react-router-dom&#39;;</span><br><span class="line">import &#123;Button&#125; from &#39;antd&#39;;</span><br><span class="line">import &#39;antd&#x2F;dist&#x2F;antd.css&#39;;</span><br><span class="line">import &#39;.&#x2F;app.scss&#39;;</span><br><span class="line"></span><br><span class="line">export default function App() &#123;</span><br><span class="line">    const [count, setCount] &#x3D; useState(0); &#x2F;&#x2F; 初始化一个状态,返回一个数组</span><br><span class="line">    const [count1, setCount12] &#x3D; useState(10);</span><br><span class="line">    return &lt;div className&#x3D;&quot;container&quot;&gt;</span><br><span class="line">        &lt;h1&gt;react-demo单页应用&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;Link to&#x3D;&#39;&#x2F;login&#39;&gt;去登录页&lt;&#x2F;Link&gt;</span><br><span class="line">        &lt;Link to&#x3D;&#39;&#x2F;home&#39;&gt;去首页&lt;&#x2F;Link&gt;</span><br><span class="line">        &lt;p&gt;当前count次数：&#123;count&#125;&#123;count1&#125;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;Button onClick&#x3D;&#123;() &#x3D;&gt; setCount(count+1)&#125;&gt;次数加1&lt;&#x2F;Button&gt;</span><br><span class="line">        &lt;Button onClick&#x3D;&#123;() &#x3D;&gt; setCount12(count1+1)&#125;&gt;次数加1&lt;&#x2F;Button&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;&#x2F;div&gt;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h4><p>生命周期hooks，在componentDidMount和componentDidUpdate时调用</p><p>可以看到以下console在页面进入执行一次，点击更新后又会执行一次</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;useEffect, useState&#125; from &#39;react&#39;;</span><br><span class="line">import &#123;Link&#125; from &#39;react-router-dom&#39;;</span><br><span class="line">import &#123;Button&#125; from &#39;antd&#39;;</span><br><span class="line">import &#39;antd&#x2F;dist&#x2F;antd.css&#39;;</span><br><span class="line">import &#39;.&#x2F;app.scss&#39;;</span><br><span class="line"></span><br><span class="line">export default function App() &#123;</span><br><span class="line">    const [count, setCount] &#x3D; useState(0); &#x2F;&#x2F; 初始化一个状态,返回一个数组</span><br><span class="line">    const [count1, setCount12] &#x3D; useState(10);</span><br><span class="line">    useEffect(() &#x3D;&gt; &#123;</span><br><span class="line">        console.log(&#39;执行了useEffect&#39;)</span><br><span class="line">    &#125;)</span><br><span class="line">    return &lt;div className&#x3D;&quot;container&quot;&gt;</span><br><span class="line">        &lt;h1&gt;react-demo单页应用&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;Link to&#x3D;&#39;&#x2F;login&#39;&gt;去登录页&lt;&#x2F;Link&gt;</span><br><span class="line">        &lt;Link to&#x3D;&#39;&#x2F;home&#39;&gt;去首页&lt;&#x2F;Link&gt;</span><br><span class="line">        &lt;p&gt;当前count次数：&#123;count&#125;&#123;count1&#125;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;Button onClick&#x3D;&#123;() &#x3D;&gt; setCount(count+1)&#125;&gt;次数加1&lt;&#x2F;Button&gt;</span><br><span class="line">        &lt;Button onClick&#x3D;&#123;() &#x3D;&gt; setCount12(count1+1)&#125;&gt;次数加1&lt;&#x2F;Button&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;&#x2F;div&gt;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不想在update时更新，useEffect支持第二个参数，传入[],在update时就不会再执行,可以用来调用接口加载数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const [dataList, setDataList] &#x3D; useState([]); &#x2F;&#x2F; 初始化接口数据</span><br><span class="line">useEffect(() &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;执行了useEffect&#39;);</span><br><span class="line">    setCount(100);</span><br><span class="line">    axios.get(&#39;.&#x2F;data.json&#39;).then(response &#x3D;&gt; &#123;</span><br><span class="line">        const res &#x3D; response.data;</span><br><span class="line">        setDataList(res.data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure><p><strong>注意</strong> useEffect 只能返回一个函数或者undefined，不支持返回promise，内部也不能使用async</p><h4 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h4><p>在react中子组件传值要靠props，如果子组件非常深，需要一级级传递下去。深度注入，props追泪<br>React.Context就是用来解决这个问题的。<br>创建React.context</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const userContext &#x3D; React.creatContext();</span><br></pre></td></tr></table></figure><p>在入口文件用userContext.Provider把子组件包裹起来，value来传值。并需要把userContext导出，供子组件调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 入口文件</span><br><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import ReactDOM from &#39;react-dom&#39;;</span><br><span class="line">import &#39;.&#x2F;index.css&#39;;</span><br><span class="line">import Router from &#39;.&#x2F;router&#39;;</span><br><span class="line">import reportWebVitals from &#39;.&#x2F;reportWebVitals&#39;;</span><br><span class="line"></span><br><span class="line">const username &#x3D; &#39;LiMing&#39;;</span><br><span class="line">export const userContext &#x3D; React.createContext(); </span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;React.StrictMode&gt;</span><br><span class="line">    &lt;userContext.Provider value&#x3D;&#123;username&#125;&gt;</span><br><span class="line">      &lt;Router &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;userContext.Provider&gt;</span><br><span class="line">  &lt;&#x2F;React.StrictMode&gt;,</span><br><span class="line">  document.getElementById(&#39;root&#39;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>子组件引入userContext，并用userContext.Consumer来消费</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import &#123; userContext &#125; from &#39;..&#x2F;index&#39;;</span><br><span class="line"></span><br><span class="line">export default function Child()&#123;</span><br><span class="line">    return &lt;div&gt;</span><br><span class="line">        &lt;userContext.Consumer&gt;</span><br><span class="line">            &#123;value &#x3D;&gt; &lt;p&gt; hello, &#123;value&#125;&lt;&#x2F;p&gt;&#125;</span><br><span class="line">        &lt;&#x2F;userContext.Consumer&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用useContext, 子组件中一样要引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; userContext &#125; from &#39;..&#x2F;index&#39;;</span><br></pre></td></tr></table></figure><p>在组件代码中const value = useContext(userContext);拿到值直接使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;useContext&#125; from &#39;react&#39;;</span><br><span class="line">import &#123; userContext &#125; from &#39;..&#x2F;index&#39;;</span><br><span class="line"></span><br><span class="line">export default function Child()&#123;</span><br><span class="line">    const value &#x3D; useContext(userContext);</span><br><span class="line">    return &lt;div&gt;</span><br><span class="line">        hello,&#123;value&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h4><p>useReducer 接受两个参数<br>useReducer 第一个对state修改函数，它的第一参数是state，第二个deploy<br>useReducer 第二个参数是state的初始值</p><p>解构useReducer，是个素组，第一个元素是state，第二个元素是dispatch，修改state，对应useReducer()调用时传的第一个函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; home.js</span><br><span class="line">mport React, &#123;useReducer&#125; from &#39;react&#39;;</span><br><span class="line">import Child from &#39;..&#x2F;components&#x2F;child&#39;;</span><br><span class="line"></span><br><span class="line">const initalState &#x3D;&#123;</span><br><span class="line">    count: 0,</span><br><span class="line">&#125;</span><br><span class="line">function reducer(state, action)&#123;</span><br><span class="line">    switch(action.type)&#123;</span><br><span class="line">        case &#39;increament&#39;:</span><br><span class="line">            return &#123;</span><br><span class="line">                count: state.count + 1</span><br><span class="line">            &#125;</span><br><span class="line">        case &#39;decreament&#39;:</span><br><span class="line">            return &#123;</span><br><span class="line">                count: state.count - 1</span><br><span class="line">            &#125;</span><br><span class="line">        case &#39;reset&#39;:</span><br><span class="line">        default:</span><br><span class="line">            return initalState;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default function Home()&#123;</span><br><span class="line">    const [state, dispatch] &#x3D; useReducer(reducer, initalState);</span><br><span class="line">    return &lt;div&gt;Home</span><br><span class="line">            &lt;Child &#x2F;&gt;</span><br><span class="line">            &lt;p&gt;当前计数：&#123;state.count&#125;&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;button onClick&#x3D;&#123;() &#x3D;&gt; dispatch(&#123;type: &#39;increament&#39;&#125;)&#125;&gt;增加&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;button onClick&#x3D;&#123;() &#x3D;&gt; dispatch(&#123;type: &#39;decreament&#39;&#125;)&#125;&gt;减少&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;button onClick&#x3D;&#123;() &#x3D;&gt; dispatch(&#123;type: &#39;reset&#39;&#125;)&#125;&gt;重置&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Router-Hooks"><a href="#Router-Hooks" class="headerlink" title="Router Hooks"></a>Router Hooks</h3><h4 id="useParams"><a href="#useParams" class="headerlink" title="useParams"></a>useParams</h4><p>获取参数<br>在有状态的组件中,this.props.match.params.id</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; detail.js</span><br><span class="line">import React from &#39;react&#39;;</span><br><span class="line"></span><br><span class="line">export default class Detail extends React.Component&#123;</span><br><span class="line">    </span><br><span class="line">    render()&#123;console.log(this)</span><br><span class="line">        return &lt;div&gt;detail</span><br><span class="line">            &lt;p&gt;当前参数id为：&#123;this.props.match.params.id&#125;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用useParams,从react-router-dom包中引入useParams，useParams()就会拿到参数对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; detail.js</span><br><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import &#123; useParams &#125; from &#39;react-router-dom&#39;;</span><br><span class="line"></span><br><span class="line">export default function Detail()&#123;</span><br><span class="line">    const params &#x3D; useParams();</span><br><span class="line">    return &lt;div&gt;detail</span><br><span class="line">        &lt;p&gt;当前参数id为：&#123;params.id&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="useHistory"><a href="#useHistory" class="headerlink" title="useHistory"></a>useHistory</h4><p>操作跳转，在有生命周期的组件中需要用this.props.history.push(‘/‘)，在无状态组件中用useHistory，调用useHistory()拿到的就是this.props.history</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import &#123;Button&#125; from &#39;antd&#39;;</span><br><span class="line">import &#39;antd&#x2F;dist&#x2F;antd.css&#39;;</span><br><span class="line"></span><br><span class="line">import &#123; useParams, useHistory &#125; from &#39;react-router-dom&#39;;</span><br><span class="line"></span><br><span class="line">export default function Detail()&#123;</span><br><span class="line">    const params &#x3D; useParams();</span><br><span class="line">    const history &#x3D; useHistory();</span><br><span class="line">    return &lt;div&gt;detail</span><br><span class="line">        &lt;p&gt;当前参数id为：&#123;params.id&#125;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;Button onClick&#x3D;&#123;()&#x3D;&gt;&#123;</span><br><span class="line">            history.push(&#39;&#x2F;&#39;);</span><br><span class="line">        &#125;&#125;&gt;跳转到首页&lt;&#x2F;Button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;react入门学习，来自bilibili腾讯课堂，&lt;br&gt;&lt;a href=&quot;https://react.docschina.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react官网&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>算法学习</title>
    <link href="http://yoursite.com/2021/10/10/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2021/10/10/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-10-10T22:03:46.000Z</published>
    <updated>2022-02-14T11:36:30.008Z</updated>
    
    <content type="html"><![CDATA[<p>快速排序，两数之和，fibonacci, 生成dom树, 烙饼问题, 车跑多远的问题, 整数翻转, 回文数, 罗马数字转整数，最长公共前缀</p><a id="more"></a><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function sortQuick(arr)&#123;</span><br><span class="line">    &#x2F;&#x2F; 当数组小于等于一个元素时，直接返回</span><br><span class="line">    if(arr &amp;&amp; arr.length &lt;&#x3D; 1) return arr;</span><br><span class="line">    &#x2F;&#x2F; 获取中间位置</span><br><span class="line">    let middleIndex &#x3D; Math.floor(arr.length &#x2F; 2);</span><br><span class="line">    &#x2F;&#x2F; 获取中间位置的值,并从原数组中删除该值</span><br><span class="line">    let middleValue &#x3D; arr.splice(middleIndex, 1)[0];</span><br><span class="line">    let prevArr &#x3D; [], nextArr &#x3D; [], middleArr &#x3D; [middleValue];</span><br><span class="line">    for( let i &#x3D; 0, l &#x3D; arr.length; i &lt; l; i++)&#123;</span><br><span class="line">        &#x2F;&#x2F; 循环剩余原数组，将值与中间值比较，小的放到preArr，大的放到nextArr，相等的放到middleArr</span><br><span class="line">        if(arr[i] &gt; middleValue) nextArr.push(arr[i]);</span><br><span class="line">        else if(arr[i] &lt; middleValue) prevArr.push(arr[i]);</span><br><span class="line">        else middleArr.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 递归遍历prevArr，与nextArr，并将prevArr，middleValue，nextArr合并</span><br><span class="line">    return sortQuick(prevArr).concat(middleArr, sortQuick(nextArr));</span><br><span class="line">&#125;</span><br><span class="line">console.log(sortQuick([1,2,2,8,3, 3])) &#x2F;&#x2F; [ 1, 2, 2, 3, 3, 8 ]</span><br></pre></td></tr></table></figure><h1 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h1><p>时间复杂度o(n), 空间复杂度o(n);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">  * </span><br><span class="line">  * @param numbers int整型一维数组 </span><br><span class="line">  * @param target int整型 </span><br><span class="line">  * @return int整型一维数组</span><br><span class="line">  *&#x2F;</span><br><span class="line">function twoSum( numbers ,  target ) &#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">    if(!numbers || numbers.length &lt; 2 ) return [];</span><br><span class="line">    let obj &#x3D; &#123;[numbers[0]]: 1&#125;;</span><br><span class="line">    for(let i &#x3D; 1,l &#x3D; numbers.length; i&lt;l; i++)&#123;    </span><br><span class="line">        let tem &#x3D; target - numbers[i];</span><br><span class="line">        if(obj[tem] &gt;&#x3D; 1)&#123;</span><br><span class="line">            return [obj[tem], i+1]</span><br><span class="line">        &#125;</span><br><span class="line">        obj[numbers[i]] &#x3D; i+1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    twoSum : twoSum</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>用原始for循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [1,2,3,4,5,0];</span><br><span class="line">function sum(arr, target)&#123;</span><br><span class="line">    let result&#x3D; [];</span><br><span class="line">    for(let i &#x3D; 0; i &lt; arr.length-1;i++)&#123;</span><br><span class="line">        let temp &#x3D; target - arr[i];</span><br><span class="line">        for(let j &#x3D; i+1; j&lt; arr.length ;j++)&#123;</span><br><span class="line">            if(arr[j] &#x3D;&#x3D;&#x3D; temp)&#123;</span><br><span class="line">                result.push([arr[i], temp]);</span><br><span class="line">                arr.splice(j,1);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(result) &#x2F;&#x2F;[ [ 1, 4 ], [ 2, 3 ], [ 5, 0 ] ]</span><br><span class="line">&#125;</span><br><span class="line">sum(arr, 5)</span><br></pre></td></tr></table></figure><p>假如这里不是用for而是用forEach，首先第一层循环，不能停在倒数第二个；第二层也不能从i+1开始；其次也不可在第二层for循环找到元素时，中断循环。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [1,2,3,4,5,0];</span><br><span class="line">arr.forEach((item, i) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;item&#39;, item) &#x2F;&#x2F; 1,2,3,5,0</span><br><span class="line">    if(i &#x3D;&#x3D; 2) arr.splice(i,1);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>删除了第3个，循环缺跳过了第四个。无法做到后退。</p><p>总结for和forEach的区别</p><ul><li>循环不能选择开始和结束位置</li><li>循环不能中断</li><li>循环不能后退</li><li>异步语句forEach可以拿到每一个i值</li></ul><h1 id="斐波那契fibonacci"><a href="#斐波那契fibonacci" class="headerlink" title="斐波那契fibonacci"></a>斐波那契fibonacci</h1><h2 id="返回第n个斐波那契数。-f-1-1-f-2-1-等"><a href="#返回第n个斐波那契数。-f-1-1-f-2-1-等" class="headerlink" title="返回第n个斐波那契数。 f(1) = 1, f(2) = 1 等"></a>返回第n个斐波那契数。 f(1) = 1, f(2) = 1 等</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 时间复杂度o(n), 空间复杂度o(n);</span><br><span class="line">&#x2F;&#x2F; 通过全部用例 运行时间 2383ms 占用内存 77896KB</span><br><span class="line">function fibonacci(n) &#123;</span><br><span class="line">    if(typeof n !&#x3D;&#x3D; &#39;number&#39;) return &#39;请输入一个正整数&#39;;</span><br><span class="line">    let aFib &#x3D; [1,1];</span><br><span class="line">    for (let i &#x3D; 2; i&lt; n; i++)&#123;</span><br><span class="line">        aFib.push(aFib[i-1]+aFib[i-2])</span><br><span class="line">    &#125;</span><br><span class="line">    return aFib[n-1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;????                 时间复杂度o(n), 空间复杂度o(nlogn);</span><br><span class="line">&#x2F;&#x2F; 通过全部用例 运行时间 1904ms 占用内存 77936KB</span><br><span class="line">function fibonacci(n) &#123;</span><br><span class="line">    if(typeof n !&#x3D;&#x3D; &#39;number&#39;) return &#39;请输入一个正整数&#39;;</span><br><span class="line">    if(n &lt;&#x3D; 2) return 1;</span><br><span class="line">    return fibonacci(n-1)+fibonacci(n-2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 尾递归优化</span><br><span class="line">&#x2F;&#x2F; 通过全部用例 运行时间 2377ms 占用内存 77868KB</span><br><span class="line">function fibonacci(n,pre1&#x3D;1,pre2&#x3D;1) &#123;</span><br><span class="line">    if(typeof n !&#x3D;&#x3D; &#39;number&#39;) return &#39;请输入一个正整数&#39;;</span><br><span class="line">    if(n &lt;&#x3D; 2) return pre1;</span><br><span class="line">    return fibonacci(--n, pre1+pre2, pre1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="斐波那契兔子"><a href="#斐波那契兔子" class="headerlink" title="斐波那契兔子"></a>斐波那契兔子</h2><p>有一对兔子，长到第五个月的时候开始每个月都会生一对兔子，第n个月的时候会有多少对兔子<br>1<br>1<br>1<br>1<br>2<br>3<br>4<br>5<br>7<br>10<br>14<br>…</p><p>从第五个月起，f(n) = f(n-1)+f(n-4), 第n个月的兔子，首先包括前一个月的兔子数量；然后，这些兔子里，包含前四个月的兔子都已经成年了的，可以有多少对，在这个月就能生出来多少对。所以是f(n-1)+f(n-4);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function getRabbitsNumber(n, prev1 &#x3D; 1, prev2 &#x3D; 1,prev3 &#x3D; 1,prev4 &#x3D; 1)&#123;</span><br><span class="line">    if(n &lt; 5) return prev1;</span><br><span class="line">    return getRabbitsNumber(n-1, prev1 + prev4, prev1, prev2, prev3 )</span><br><span class="line">&#125;</span><br><span class="line">或者</span><br><span class="line">function getRabbitsNumber(n)&#123;</span><br><span class="line">    if(n &lt; 5) return 1;</span><br><span class="line">    return getRabbitsNumber(n-1)+ getRabbitsNumber(n-4)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="生成dom树"><a href="#生成dom树" class="headerlink" title="生成dom树"></a>生成dom树</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">function dom2json() &#123;</span><br><span class="line">    const jsContainer &#x3D; document.querySelector(&quot;#jsContainer&quot;)</span><br><span class="line"></span><br><span class="line">    function domJson(dom) &#123;</span><br><span class="line">        var obj &#x3D; &#123;&#125;</span><br><span class="line">        if (dom.nodeType &#x3D;&#x3D; 1) &#123;</span><br><span class="line">            obj.tag &#x3D; dom.tagName.toLocaleLowerCase()</span><br><span class="line">            var attrs &#x3D; getTagAttrs(dom)</span><br><span class="line">            if (attrs) obj.attributes &#x3D; attrs;</span><br><span class="line">            </span><br><span class="line">            obj.children &#x3D; [];</span><br><span class="line">            Array.from(dom.childNodes).filter(child &#x3D;&gt; &#123; &#x2F;&#x2F; 这里用[...dom.childNodes]编译不过？？？？</span><br><span class="line">                return !(child.nodeType &#x3D;&#x3D; 3 &amp;&amp; !child.textContent.trim())</span><br><span class="line">            &#125;).forEach((item,i)&#x3D;&gt;&#123;</span><br><span class="line">                obj.children.push(domJson(item))</span><br><span class="line">            &#125;);</span><br><span class="line">                </span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            return obj</span><br><span class="line">        &#125;</span><br><span class="line">        if (dom.nodeType &#x3D;&#x3D; 3) &#123;</span><br><span class="line">            let content &#x3D; dom.textContent.trim();</span><br><span class="line">            if(!content) return;</span><br><span class="line">            obj.tag &#x3D; &#39;text&#39;;</span><br><span class="line">            obj.content &#x3D; content</span><br><span class="line">            return obj</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getTagName(dom) &#123;</span><br><span class="line">        return dom.nodeName.toLocaleLowerCase().replace(&#39;#&#39;, &#39;&#39;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getTagAttrs(dom) &#123;</span><br><span class="line">        var attr &#x3D; Array.from(dom.attributes)</span><br><span class="line">        var obj &#x3D; &#123;&#125;</span><br><span class="line">        attr.forEach(atr &#x3D;&gt; obj[atr.name] &#x3D; atr.value)</span><br><span class="line">        return attr.length ? obj : null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return domJson(jsContainer)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原生具备 Iterator 接口的数据结构如下：</p><p>Array<br>Map<br>Set<br>String<br>TypedArray<br>函数的 arguments 对象<br>NodeList 对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; todo 这里还需要再测试</span><br><span class="line">Array.from(dom.childNodes).filter(child &#x3D;&gt; &#123; &#x2F;&#x2F; 这里用[...dom.childNodes]编译不过？？？？</span><br></pre></td></tr></table></figure><h1 id="烙饼问题"><a href="#烙饼问题" class="headerlink" title="烙饼问题"></a>烙饼问题</h1><p>一个锅可以烙两张饼，30分钟可以出锅，一共三张饼，最短需要多少时间？<br>这么思考？<br>假如资源就是锅，资源同时给两个人用，做这件事需要耗时30分钟，假如只给一个人用，那么他的耗时就是15分钟。<br>资源是限量的（只有一口锅），可同时烤两张饼，那么就是每15分钟，换一张饼去烙。<br>30 / 2 * 3 = 45</p><p>假如同时可以烤3张饼，一共有四张饼，那么最短时间是 30 / 3 * 4 = 40, 每10分钟换一张饼烙</p><h1 id="车跑多远的问题"><a href="#车跑多远的问题" class="headerlink" title="车跑多远的问题"></a>车跑多远的问题</h1><p>有16辆相同的车，每辆车的油都可以跑100km,问互相配合最远可以跑多远？<br>前提：<br>16辆车的起点相同<br>每辆车已经加满油<br>互相配合指可以把自己的油分给别的车，最后剩下一辆跑的最远的车，是跑多远</p><p>思维导图：</p><ul><li>16辆车同时出发，走100/16, 第16辆车把它剩下的油分给其它15辆；(为啥分给剩下15辆？第一辆加1/16的油就满了，它需要其它车走的远一些给它做油库)</li><li>剩下15辆，走100/15,第15辆车把它剩下的油分给其它14辆;<br>以此类推<br>.<br>.<br>.</li><li>最后两辆车，走100/2,第2辆车把它的油都给第一辆;</li><li>第一辆还可以走100km<br>第一辆车就是走的最远的车，走的距离100/16+100/15+100/14……+100/2+100/1</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let l&#x3D;0;</span><br><span class="line">for(i &#x3D; 1;i&lt;&#x3D;16;i++)&#123;</span><br><span class="line">    l+&#x3D;100&#x2F;i</span><br><span class="line">&#125;</span><br><span class="line">console.log(l) &#x2F;&#x2F; 338.0728993228993</span><br></pre></td></tr></table></figure><h1 id="整数翻转"><a href="#整数翻转" class="headerlink" title="整数翻转"></a>整数翻转</h1><p>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。</p><p>如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。</p><p>假设环境不允许存储 64 位整数（有符号或无符号）。<br>示例 1：</p><p>输入：x = 123<br>输出：321<br>示例 2：</p><p>输入：x = -123<br>输出：-321<br>示例 3：</p><p>输入：x = 120<br>输出：21<br>示例 4：</p><p>输入：x = 0<br>输出：0</p><p>思路：将数字无符号部分转为string，在转为array，调用reverse方法，在拼接为string，再转化为Number<br>如果结果在范围内返回结果，否则返回0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @param &#123;number&#125; x</span><br><span class="line"> * @return &#123;number&#125;</span><br><span class="line"> *&#x2F;</span><br><span class="line">var reverse &#x3D; function(x) &#123;</span><br><span class="line">    let result &#x3D; 0;</span><br><span class="line">    </span><br><span class="line">    if(x &gt;&#x3D; 0) &#123;</span><br><span class="line">        result &#x3D; Number(x.toString().split(&#39;&#39;).reverse().join(&#39;&#39;))</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        result &#x3D; Number(&#39;-&#39; + (x*-1).toString().split(&#39;&#39;).reverse().join(&#39;&#39;));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if(result &gt; (Math.pow(2,31) - 1) || result &lt;  -Math.pow(2,31)) return 0;</span><br><span class="line">    return result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>按照leetcode视频教程，答案如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @param &#123;number&#125; x</span><br><span class="line"> * @return &#123;number&#125;</span><br><span class="line"> *&#x2F;</span><br><span class="line">var reverse &#x3D; function(x) &#123;</span><br><span class="line">    let result &#x3D; 0;</span><br><span class="line">    while(x)&#123;</span><br><span class="line">        let num &#x3D; x % 10;</span><br><span class="line">        x &#x3D; Math.trunc(x &#x2F; 10); &#x2F;&#x2F; 取整，丢弃小数部分，ie有兼容问题</span><br><span class="line">        result &#x3D; result * 10 + num;</span><br><span class="line">    &#125;</span><br><span class="line">    if(result &gt; (Math.pow(2,31) - 1) || result &lt;  -Math.pow(2,31)) return 0;</span><br><span class="line">    return result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>延伸阅读：<a href="https://www.runoob.com/w3cnote/remainder-and-the-modulo.html" target="_blank" rel="noopener">取余和取模的区别</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math" target="_blank" rel="noopener">Math</a></p><h1 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h1><p>给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。</p><p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121 是回文，而 123 不是。</p><p>示例 1：</p><p>输入：x = 121<br>输出：true<br>示例 2：</p><p>输入：x = -121<br>输出：false<br>解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。<br>示例 3：</p><p>输入：x = 10<br>输出：false<br>解释：从右向左读, 为 01 。因此它不是一个回文数。<br>示例 4：</p><p>输入：x = -101<br>输出：false</p><p>提示：</p><p>-231 &lt;= x &lt;= 231 - 1</p><p>进阶：你能不将整数转为字符串来解决这个问题吗？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @param &#123;number&#125; x</span><br><span class="line"> * @return &#123;boolean&#125;</span><br><span class="line"> *&#x2F;</span><br><span class="line">var isPalindrome &#x3D; function(x) &#123;</span><br><span class="line">    if(x.toString() &#x3D;&#x3D;&#x3D; x.toString().split(&#39;&#39;).reverse().join(&#39;&#39;)) return true;</span><br><span class="line">    return false;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>不转换为String，解题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var isPalindrome &#x3D; function(x) &#123;</span><br><span class="line">    if(x &lt; 0) return false;</span><br><span class="line">    if(x &lt; 10) return true;</span><br><span class="line">    let count &#x3D; Math.trunc(Math.log10(x)); &#x2F;&#x2F; 共有多少位</span><br><span class="line">    let iteratorCount &#x3D; 0;</span><br><span class="line">    while( Math.ceil(count &#x2F; 2) !&#x3D;&#x3D; iteratorCount)&#123;&#x2F;&#x2F; 从两边向中间一次遍历</span><br><span class="line">        let highValue &#x3D;  Math.pow(10, count-iteratorCount);</span><br><span class="line">        let start &#x3D; Math.trunc(x &#x2F; highValue) % 10;</span><br><span class="line">        let end &#x3D; Math.trunc(x &#x2F; Math.pow(10, iteratorCount) % 10);</span><br><span class="line">        </span><br><span class="line">        if(start !&#x3D;&#x3D; end)&#123;&#x2F;&#x2F; 拿两端的值做比较，不同则不是回文数</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        iteratorCount++   </span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>364 ms    52.1 MB</p><p>看完视频讲解后解题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var isPalindrome &#x3D; function(x) &#123;</span><br><span class="line">    if(x &lt; 0 || (x % 10 &#x3D;&#x3D;&#x3D; 0 &amp;&amp; x !&#x3D;&#x3D; 0)) return false;</span><br><span class="line">    if(x &lt; 10) return true;</span><br><span class="line">    let reverseNum &#x3D; 0;</span><br><span class="line">    while(x &gt; reverseNum)&#123;</span><br><span class="line">        let v &#x3D; x % 10;</span><br><span class="line">        x &#x3D; Math.trunc(x &#x2F; 10);</span><br><span class="line">        reverseNum &#x3D; reverseNum * 10 + v;</span><br><span class="line">    &#125;</span><br><span class="line">    if(reverseNum &gt; x)&#123;</span><br><span class="line">        reverseNum &#x3D; Math.trunc(reverseNum &#x2F; 10);</span><br><span class="line">    &#125;</span><br><span class="line">    if(x &#x3D;&#x3D;&#x3D; reverseNum)&#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return false;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>把后一半的数做翻转，与前一半比较。负值、小于10的值，及10的整数倍不需要走入while循环。<br>156 ms    46.2 MB</p><h1 id="罗马数字转整数"><a href="#罗马数字转整数" class="headerlink" title="罗马数字转整数"></a>罗马数字转整数</h1><p>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</p><p>字符          数值<br>I             1<br>V             5<br>X             10<br>L             50<br>C             100<br>D             500<br>M             1000<br>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><p>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。<br>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。<br>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。<br>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</p><p>示例 1:</p><p>输入: “III”<br>输出: 3<br>示例 2:</p><p>输入: “IV”<br>输出: 4<br>示例 3:</p><p>输入: “IX”<br>输出: 9<br>示例 4:</p><p>输入: “LVIII”<br>输出: 58<br>解释: L = 50, V= 5, III = 3.<br>示例 5:</p><p>输入: “MCMXCIV”<br>输出: 1994<br>解释: M = 1000, CM = 900, XC = 90, IV = 4.</p><p>提示：</p><p>1 &lt;= s.length &lt;= 15<br>s 仅含字符 (‘I’, ‘V’, ‘X’, ‘L’, ‘C’, ‘D’, ‘M’)<br>题目数据保证 s 是一个有效的罗马数字，且表示整数在范围 [1, 3999] 内<br>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。<br>IL 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXCIX 。<br>关于罗马数字的详尽书写规则，可以参考 罗马数字 - Mathematics 。</p><h2 id="hash表法"><a href="#hash表法" class="headerlink" title="hash表法"></a>hash表法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @param &#123;string&#125; s</span><br><span class="line"> * @return &#123;number&#125;</span><br><span class="line"> *&#x2F;</span><br><span class="line">var romanToInt &#x3D; function(s) &#123;</span><br><span class="line">    let map &#x3D; &#123;</span><br><span class="line">        I: 1,</span><br><span class="line">        V: 5,</span><br><span class="line">        X: 10,</span><br><span class="line">        L: 50,</span><br><span class="line">        C: 100,</span><br><span class="line">        D: 500,</span><br><span class="line">        M: 1000,</span><br><span class="line">        IV: 4,</span><br><span class="line">        IX: 9,</span><br><span class="line">        XL: 40,</span><br><span class="line">        XC: 90,</span><br><span class="line">        CD: 400,</span><br><span class="line">        CM: 900,</span><br><span class="line">    &#125;</span><br><span class="line">    let result &#x3D; 0;</span><br><span class="line">    for(let i &#x3D; 0,l &#x3D; s.length;i &lt;l;)&#123;</span><br><span class="line">        let item &#x3D; s[i], nextItem &#x3D; s[i+1];</span><br><span class="line">        let towItem &#x3D; item + nextItem;</span><br><span class="line">        if(map[towItem])&#123;</span><br><span class="line">            result +&#x3D; map[towItem];</span><br><span class="line">            i +&#x3D; 2;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            result +&#x3D; map[item];</span><br><span class="line">            i +&#x3D; 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>执行用时：124 ms, 在所有 JavaScript 提交中击败了93.69%的用户<br>内存消耗：45.2 MB, 在所有 JavaScript 提交中击败了12.24%的用户<br>怎么减少空间复杂度？？？</p><h2 id="忽略的规律：相邻的两个字母，前一个对应的数字小于后一个对应的数字时，取负值"><a href="#忽略的规律：相邻的两个字母，前一个对应的数字小于后一个对应的数字时，取负值" class="headerlink" title="忽略的规律：相邻的两个字母，前一个对应的数字小于后一个对应的数字时，取负值"></a>忽略的规律：相邻的两个字母，前一个对应的数字小于后一个对应的数字时，取负值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var romanToInt &#x3D; function(s) &#123;</span><br><span class="line">    let map &#x3D; &#123;</span><br><span class="line">        I: 1,</span><br><span class="line">        V: 5,</span><br><span class="line">        X: 10,</span><br><span class="line">        L: 50,</span><br><span class="line">        C: 100,</span><br><span class="line">        D: 500,</span><br><span class="line">        M: 1000,</span><br><span class="line">    &#125;</span><br><span class="line">    let result &#x3D; 0, i &#x3D; 0,l &#x3D; s.length;</span><br><span class="line">    for(;i &lt; l -1;i++)&#123;</span><br><span class="line">        let item &#x3D; s[i], nextItem &#x3D; s[i+1];</span><br><span class="line">        result +&#x3D; map[item] &gt;&#x3D; map[nextItem] ? map[item]: -map[item];</span><br><span class="line">    &#125;</span><br><span class="line">    result +&#x3D; map[s[i]]; &#x2F;&#x2F; 注意:运行到这里i &#x3D; length-1</span><br><span class="line">    return result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>执行用时：144 ms, 在所有 JavaScript 提交中击败了50.21%的用户<br>内存消耗：43.2 MB, 在所有 JavaScript 提交中击败了80.20%的用户</p><h2 id="将hash改为switch，空间占用更有优势"><a href="#将hash改为switch，空间占用更有优势" class="headerlink" title="将hash改为switch，空间占用更有优势"></a>将hash改为switch，空间占用更有优势</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var romanToInt &#x3D; function(s) &#123;</span><br><span class="line">    var getValue &#x3D; function(v)&#123;</span><br><span class="line">        switch(v)&#123;</span><br><span class="line">            case &#39;I&#39;: return 1;</span><br><span class="line">            case &#39;V&#39;: return 5;</span><br><span class="line">            case &#39;X&#39;: return 10;</span><br><span class="line">            case &#39;L&#39;: return 50;</span><br><span class="line">            case &#39;C&#39;: return 100;</span><br><span class="line">            case &#39;D&#39;: return 500;</span><br><span class="line">            case &#39;M&#39;: return 1000;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    let result &#x3D; 0, i &#x3D; 0,l &#x3D; s.length;</span><br><span class="line">    for(;i &lt; l -1;i++)&#123;</span><br><span class="line">        let item &#x3D; s[i], nextItem &#x3D; s[i+1];</span><br><span class="line">        result +&#x3D; getValue(item) &gt;&#x3D; getValue(nextItem) ? getValue(item): -(getValue(item));</span><br><span class="line">    &#125;</span><br><span class="line">    result +&#x3D; getValue(s[i]);</span><br><span class="line">    return result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>执行用时：144 ms, 在所有 JavaScript 提交中击败了50.21%的用户<br>内存消耗：42.9 MB, 在所有 JavaScript 提交中击败了94.58%的用户</p><h1 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h1><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 “”。</p><p>示例 1：</p><p>输入：strs = [“flower”,”flow”,”flight”]<br>输出：”fl”<br>示例 2：</p><p>输入：strs = [“dog”,”racecar”,”car”]<br>输出：””<br>解释：输入不存在公共前缀。</p><p>提示：</p><p>1 &lt;= strs.length &lt;= 200<br>0 &lt;= strs[i].length &lt;= 200<br>strs[i] 仅由小写英文字母组成</p><h2 id="纵向扫描"><a href="#纵向扫描" class="headerlink" title="纵向扫描"></a>纵向扫描</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @param &#123;string[]&#125; strs</span><br><span class="line"> * @return &#123;string&#125;</span><br><span class="line"> *&#x2F;</span><br><span class="line">var longestCommonPrefix &#x3D; function(strs) &#123;</span><br><span class="line">    let result &#x3D; &#39;&#39;;</span><br><span class="line">    if(strs.length &#x3D;&#x3D;&#x3D; 0) return result;</span><br><span class="line">    for(let j &#x3D; 0, len &#x3D; strs[0].length; j&lt;len;j++ )&#123;</span><br><span class="line">        let curr &#x3D; strs[0][j]</span><br><span class="line">        for(let i &#x3D; 1, l &#x3D; strs.length; i&lt; l;i++)&#123;</span><br><span class="line">            if(strs[i][j] !&#x3D;&#x3D; curr)&#123;</span><br><span class="line">                return result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result +&#x3D; curr;</span><br><span class="line">    &#125;   </span><br><span class="line">    return result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>执行用时：68 ms, 在所有 JavaScript 提交中击败了92.25%的用户<br>内存消耗：39.7 MB, 在所有 JavaScript 提交中击败了26.72%的用户</p><h2 id="横向扫描"><a href="#横向扫描" class="headerlink" title="横向扫描"></a>横向扫描</h2><h2 id="分治法"><a href="#分治法" class="headerlink" title="分治法"></a>分治法</h2><h2 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h2><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速排序，两数之和，fibonacci, 生成dom树, 烙饼问题, 车跑多远的问题, 整数翻转, 回文数, 罗马数字转整数，最长公共前缀&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>node学习</title>
    <link href="http://yoursite.com/2021/10/10/node%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2021/10/10/node%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-10-10T21:18:55.000Z</published>
    <updated>2022-02-14T11:36:30.008Z</updated>
    
    <content type="html"><![CDATA[<p>node学习记录</p><a id="more"></a><p>v8引擎搬到服务器</p><h1 id="优势："><a href="#优势：" class="headerlink" title="优势："></a>优势：</h1><p>用户多，github下载量；<br>擅长高并发：一个线程，连接后，出发一个内部事件，通过非阻塞I/o, 事件驱动机制，实现node.js宏观上并行。8G内存处理4w用户连接，Java、PHP、.net则只能处理4k；<br>还可以开发桌面应用electron 游戏等；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>出来版本号，说明安装成功</p><h1 id="node中，模块分两类，核心模块和文件模块"><a href="#node中，模块分两类，核心模块和文件模块" class="headerlink" title="node中，模块分两类，核心模块和文件模块"></a>node中，模块分两类，核心模块和文件模块</h1><h2 id="核心模块也叫系统模块"><a href="#核心模块也叫系统模块" class="headerlink" title="核心模块也叫系统模块"></a>核心模块也叫系统模块</h2><p>HTTP模块、URL模块、Fs模块等可直接引入使用</p><h3 id="http-模块"><a href="#http-模块" class="headerlink" title="http 模块"></a>http 模块</h3><p>也可以用node snippets 中的node-http-server来加载代码块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 引入http模块</span><br><span class="line">const http &#x3D; require(&#39;http&#39;);</span><br><span class="line">http.createServer(function(req, res)&#123;</span><br><span class="line">    &#x2F;&#x2F; req请求信息</span><br><span class="line">    console.log(req);</span><br><span class="line">    &#x2F;&#x2F; 设置响应头 参数一：状态码；</span><br><span class="line">    res.writeHead(200, &#123;&#39;Content-Type&#39;: &#39;text&#x2F;html;charset&#x3D;&quot;utf-8&quot;&#39;&#125;);</span><br><span class="line">    &#x2F;&#x2F; 解决中文乱码</span><br><span class="line">    res.write(&#39;&lt;head&gt;&lt;meta chareset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;&lt;&#x2F;head&gt;&#39;)</span><br><span class="line">    &#x2F;&#x2F; 输出到页面</span><br><span class="line">    res.write(&#39;你好, nodejs&#39;);</span><br><span class="line">    &#x2F;&#x2F; 输出到页面</span><br><span class="line">    res.write(&#39;hello, nodejs&#39;);</span><br><span class="line">    &#x2F;&#x2F; 必须有end，来结束相应</span><br><span class="line">    res.end(&#39;end&#39;);</span><br><span class="line">&#125;).listen(8090);</span><br><span class="line"></span><br><span class="line">console.log(&#39;Server running at http:&#x2F;&#x2F;127.0.0.1:8090&#x2F;&#39;);</span><br></pre></td></tr></table></figure><h3 id="url-模块"><a href="#url-模块" class="headerlink" title="url 模块"></a>url 模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 引入http模块</span><br><span class="line">const http &#x3D; require(&#39;http&#39;);</span><br><span class="line">const url &#x3D; require(&#39;url&#39;);</span><br><span class="line">http.createServer(function(req, res)&#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; req请求信息</span><br><span class="line">    const user &#x3D; url.parse(req.url, true).query;</span><br><span class="line">    if(req.url !&#x3D; &#39;&#x2F;favicon.ico&#39;)&#123; &#x2F;&#x2F; 图标每次都会有一个请求</span><br><span class="line">        console.log(&#39;姓名：&#39;,user.name, &#39;年龄:&#39;,user.age) &#x2F;&#x2F; 姓名： zhangsan 年龄: 10</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 设置响应头 参数一：状态码；</span><br><span class="line">    res.writeHead(200, &#123;&#39;Content-Type&#39;: &#39;text&#x2F;html;charset&#x3D;&quot;utf-8&quot;&#39;&#125;);</span><br><span class="line">    &#x2F;&#x2F; 解决中文乱码</span><br><span class="line">    res.write(&#39;&lt;head&gt;&lt;meta chareset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;&lt;&#x2F;head&gt;&#39;)</span><br><span class="line">    &#x2F;&#x2F; 输出到页面</span><br><span class="line">    res.write(&#39;你好, nodejs&#39;);</span><br><span class="line">    &#x2F;&#x2F; 输出到页面</span><br><span class="line">    res.write(&#39;hello, nodejs&#39;);</span><br><span class="line">    &#x2F;&#x2F; 必须有end，来结束相应</span><br><span class="line">    res.end(&#39;end&#39;);</span><br><span class="line">&#125;).listen(8090);</span><br><span class="line"></span><br><span class="line">console.log(&#39;Server running at http:&#x2F;&#x2F;127.0.0.1:8090&#x2F;&#39;);</span><br></pre></td></tr></table></figure><h4 id="supervisor"><a href="#supervisor" class="headerlink" title="supervisor"></a>supervisor</h4><p>实时监听服务端目录文件，修改后重启node</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g supervisor</span><br></pre></td></tr></table></figure><p>需翻墙，或用cnpm</p><p>用supervisor代替node来运行程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisor demo.js</span><br></pre></td></tr></table></figure><p>模拟访问，node终端打印：姓名： zhang 年龄: undefined</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;127.0.0.1:8090&#x2F;\?name\&#x3D;zhang</span><br></pre></td></tr></table></figure><h3 id="FS-模块"><a href="#FS-模块" class="headerlink" title="FS 模块"></a>FS 模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const fs &#x3D; require(&#39;fs&#39;);</span><br></pre></td></tr></table></figure><h4 id="fs-stat-检测是文件还是目录"><a href="#fs-stat-检测是文件还是目录" class="headerlink" title="fs.stat() 检测是文件还是目录"></a>fs.stat() 检测是文件还是目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.stat(&#39;.&#x2F;package.json&#39;, (err, data)&#x3D;&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&#96;是文件：$&#123;data.isFile()&#125;&#96;)</span><br><span class="line">    console.log(&#96;是目录：$&#123;data.isDirectory()&#125;&#96;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="fs-mkdir-创建目录"><a href="#fs-mkdir-创建目录" class="headerlink" title="fs.mkdir() 创建目录"></a>fs.mkdir() 创建目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; </span><br><span class="line">fs.mkdir(&#39;.&#x2F;css&#39;, (err, data)&#x3D;&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(err)</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&#96;创建成功&#96;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>重复允许，报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; [Error: EEXIST: file already exists, mkdir &#39;.&#x2F;css&#39;] errno: -17, code: &#39;EEXIST&#39;, syscall: &#39;mkdir&#39;, path: &#39;.&#x2F;css&#39; &#125;</span><br></pre></td></tr></table></figure><h4 id="fs-mkdir-创建目录-1"><a href="#fs-mkdir-创建目录-1" class="headerlink" title="fs.mkdir() 创建目录"></a>fs.mkdir() 创建目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; </span><br><span class="line">fs.mkdir(&#39;.&#x2F;css&#39;, (err, data)&#x3D;&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(err)</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&#96;创建成功&#96;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="fs-writeFile创建写入文件成功-存在则替换"><a href="#fs-writeFile创建写入文件成功-存在则替换" class="headerlink" title="fs.writeFile创建写入文件成功,存在则替换"></a>fs.writeFile创建写入文件成功,存在则替换</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fs.writeFile(&#39;.&#x2F;html&#x2F;index.html&#39;,&#39;Hi!fs.writeFile&#39;, (err)&#x3D;&gt;&#123;</span><br><span class="line"></span><br><span class="line">    if(err)&#123;</span><br><span class="line"></span><br><span class="line">        console.log(err)</span><br><span class="line"></span><br><span class="line">        return;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    console.log(&#96;创建写入文件成功&#96;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>注意</strong> ：文件所在的文件夹即./html必须存在，否则创建失败</p><h4 id="fs-appendFile写入文件，每执行一次，向参数一中，写入参数二的内容"><a href="#fs-appendFile写入文件，每执行一次，向参数一中，写入参数二的内容" class="headerlink" title="fs.appendFile写入文件，每执行一次，向参数一中，写入参数二的内容"></a>fs.appendFile写入文件，每执行一次，向参数一中，写入参数二的内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.appendFile(&#39;.&#x2F;css&#x2F;base.css&#39;,&#39;body&#123;color: red&#125;\n&#39;, (err)&#x3D;&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(err)</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&#96;创建写入文件成功&#96;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="fs-readFile-读取文件"><a href="#fs-readFile-读取文件" class="headerlink" title="fs.readFile 读取文件"></a>fs.readFile 读取文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(&#39;.&#x2F;html&#x2F;index.html&#39;, (err, data)&#x3D;&gt;&#123;</span><br><span class="line">    &#x2F;&#x2F; data 是buffer数据</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(data) &#x2F;&#x2F; &lt;Buffer 48 69 21 66 73 2e 77 72 69 74 65 46 69 6c 65&gt;</span><br><span class="line">    console.log(data.toString()) &#x2F;&#x2F; 将buffer转化为string类型 Hi!fs.writeFile</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="fs-readdir读取目录"><a href="#fs-readdir读取目录" class="headerlink" title="fs.readdir读取目录"></a>fs.readdir读取目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.readdir(&#39;.&#x2F;html&#39;, (err, data)&#x3D;&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(data) &#x2F;&#x2F; [ &#39;index.html&#39; ]目录下所有的文件及文件夹 深度遍历平铺展示</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="fs-rename重命名"><a href="#fs-rename重命名" class="headerlink" title="fs.rename重命名"></a>fs.rename重命名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.rename(&#39;.&#x2F;html&#x2F;index.html&#39;, &#39;.&#x2F;html&#x2F;index1.html&#39;,(err)&#x3D;&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&#39;重命名成功&#39;) &#x2F;&#x2F; 重命名</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="fs-rename移动文件-并没有测试成功"><a href="#fs-rename移动文件-并没有测试成功" class="headerlink" title="fs.rename移动文件 (并没有测试成功)"></a>fs.rename移动文件 (并没有测试成功)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.rename(&#39;.&#x2F;html&#x2F;index.html&#39;, &#39;.&#x2F;aaa&#x2F;index.html&#39;,(err)&#x3D;&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&#39;移动文件成功&#39;) &#x2F;&#x2F; 移动文件 </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="fs-rmdir删除目录–只能删除空目录"><a href="#fs-rmdir删除目录–只能删除空目录" class="headerlink" title="fs.rmdir删除目录–只能删除空目录"></a>fs.rmdir删除目录–只能删除空目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.rmdir(&#39;.&#x2F;aaa&#39;, (err)&#x3D;&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&#39;删除目录成功&#39;) &#x2F;&#x2F; 删除目录 </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="fs-unlink删除文件"><a href="#fs-unlink删除文件" class="headerlink" title="fs.unlink删除文件"></a>fs.unlink删除文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.unlink(&#39;.&#x2F;aaa&#x2F;aaa&#39;, (err)&#x3D;&gt;&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&#39;删除文件成功&#39;) &#x2F;&#x2F; 删除目录 </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="文件模块又叫自定义模块"><a href="#文件模块又叫自定义模块" class="headerlink" title="文件模块又叫自定义模块"></a>文件模块又叫自定义模块</h2><p>把公共功能抽离成模块，通过exports或者module.exports 暴露出去</p><h1 id="commonJs"><a href="#commonJs" class="headerlink" title="commonJs"></a>commonJs</h1><p>JavaScript 模块化的标准，使JavaScript还可以开发：服务端应用，命令行工具，桌面图形界面应用。nodeJs是commonjs的实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 抽离一个utils.js</span><br><span class="line">function addStr(str)&#123;</span><br><span class="line">    return str+ &#39;----aaa&#39;;</span><br><span class="line">&#125;</span><br><span class="line">exports.addStr &#x3D; addStr; &#x2F;&#x2F; module.exports &#x3D; addStr;</span><br></pre></td></tr></table></figure><p>在程序中引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const utils &#x3D; require(&#39;.&#x2F;utils&#39;);</span><br><span class="line">console.log(utils) &#x2F;&#x2F; exports --&gt; &#123; addStr: [Function: addStr] &#125; module.exports --&gt;[Function: addStr]</span><br></pre></td></tr></table></figure><p>应用到程序中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 输出到页面</span><br><span class="line">    res.write(utils.addStr(&#39;你好, nodejs&#39;)); &#x2F;&#x2F; 你好, nodejs----aaa 用module.exports直接导出相当于导出的function，调用utils(&#39;你好, nodejs&#39;)；</span><br></pre></td></tr></table></figure><p><strong>建议对象用module.exprots暴露，方法用exports暴露</strong></p><h2 id="node-modules"><a href="#node-modules" class="headerlink" title="node_modules"></a>node_modules</h2><p>node中默认回去node_modules中寻找模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 已知目录结构</span><br><span class="line">-node_modules</span><br><span class="line">-axios</span><br><span class="line">index.js</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; -node_modules -axios index.js</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    get()&#123;</span><br><span class="line">        console.log(&#39;获取&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    post()&#123;</span><br><span class="line">        console.log(&#39;提交&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引入方式一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const axios &#x3D; require(&#39;.&#x2F;node_modules&#x2F;axios&#x2F;index&#39;);</span><br><span class="line">console.log(axios) &#x2F;&#x2F; &#123; get: [Function: get], post: [Function: post] &#125;</span><br></pre></td></tr></table></figure><p>引入方式二：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const axios &#x3D; require(&#39;axios&#x2F;index&#39;);</span><br></pre></td></tr></table></figure><p>引入方式三：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const axios &#x3D; require(&#39;axios&#39;);</span><br></pre></td></tr></table></figure><p>node默认模块都放在node_modules中，引入模块时，会去找node_modules中模块的index.js</p><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>模块中没有index.js，可不可以呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 已知目录结构</span><br><span class="line">-node_modules</span><br><span class="line">-db</span><br><span class="line">db.js</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const db &#x3D; require(&#39;db&#39;);</span><br></pre></td></tr></table></figure><p>这样是拿不到db的，这就需要package.json登场了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 在db模块文件夹中</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure><p>产生package.json文件，”main”: “db.js”,是我们需要关注的行，标志这个模块的入口文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;db&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.1&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;db&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;db.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="包与node"><a href="#包与node" class="headerlink" title="包与node"></a>包与node</h1><h2 id="规范的包目录"><a href="#规范的包目录" class="headerlink" title="规范的包目录"></a>规范的包目录</h2><ul><li><p>Package.json 包描述文件</p></li><li><p>bin: 用于存放可执行的二进制文件目录</p></li><li><p>lib: 用于存放JavaScript代码的目录</p></li><li><p>doc: 用于存放文档的目录</p></li></ul><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p>最大的开源代码的生态系统，允许用户上传和下载自定义node包、命令行工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init --yes</span><br></pre></td></tr></table></figure><h3 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h3><p>生成package.json后，去npmjs.com搜索你需要的包，下载第三方包, 如下载md5包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install md5</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 程序中引入</span><br><span class="line">const md5 &#x3D; require(&#39;md5&#39;);</span><br><span class="line">md5(&#39;123456&#39;) &#x2F;&#x2F; &#39;e10adc3949ba59abbe56e057f20f883e&#39;</span><br></pre></td></tr></table></figure><p>Package.json中的dependencies就会有这个包, <strong>建议：</strong> npm install 包 –sava 是写入dependencies的标准用法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;db&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.1&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;db&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;db.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;md5&quot;: &quot;^2.3.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="silly-datetime"><a href="#silly-datetime" class="headerlink" title="silly-datetime"></a>silly-datetime</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install silly-datetime --save</span><br><span class="line">const sd &#x3D; require(&#39;silly-datetime&#39;);</span><br><span class="line">sd.format(new Date(), &#39;YYYY-MM-DD HH:mm&#39;) &#x2F;&#x2F; 2021-10-12 12:48</span><br></pre></td></tr></table></figure><h1 id="npm-命令"><a href="#npm-命令" class="headerlink" title="npm 命令"></a>npm 命令</h1><h2 id="查看npm版本"><a href="#查看npm版本" class="headerlink" title="查看npm版本"></a>查看npm版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v  &#x2F;&#x2F;6.4.1</span><br></pre></td></tr></table></figure><h2 id="安装：无包名代表安装package-json里的所有包。卸载：npm-uninstall-包名"><a href="#安装：无包名代表安装package-json里的所有包。卸载：npm-uninstall-包名" class="headerlink" title="安装：无包名代表安装package.json里的所有包。卸载：npm uninstall 包名"></a>安装：无包名代表安装package.json里的所有包。卸载：npm uninstall 包名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install [包名]</span><br></pre></td></tr></table></figure><p>也可以删掉package.json中的包，删掉node_modules中的包，允许 npm i来卸载</p><h2 id="npm-list"><a href="#npm-list" class="headerlink" title="npm list"></a>npm list</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">npm list</span><br><span class="line">&#x2F;*</span><br><span class="line">db@0.0.1 &#x2F;Users&#x2F;**&#x2F;Documents&#x2F;nodejs_demo&#x2F;node_modules&#x2F;db</span><br><span class="line">├─┬ md5@2.3.0</span><br><span class="line">│ ├── charenc@0.0.2</span><br><span class="line">│ ├── crypt@0.0.2</span><br><span class="line">│ └── is-buffer@1.1.6</span><br><span class="line">└── silly-datetime@0.1.2</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="Npm-info-moduleName"><a href="#Npm-info-moduleName" class="headerlink" title="Npm info moduleName"></a>Npm info moduleName</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm info moduleName</span><br></pre></td></tr></table></figure><p>版本号、 依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">md5@2.3.0 | BSD-3-Clause | deps: 3 | versions: 7</span><br><span class="line">js function for hashing messages with MD5</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;pvorb&#x2F;node-md5#readme</span><br><span class="line"></span><br><span class="line">dist</span><br><span class="line">.tarball: https:&#x2F;&#x2F;registry.npmjs.org&#x2F;md5&#x2F;-&#x2F;md5-2.3.0.tgz</span><br><span class="line">.shasum: c3da9a6aae3a30b46b7b0c349b87b110dc3bda4f</span><br><span class="line">.integrity: sha512-T1GITYmFaKuO91vxyoQMFETst+O71VUPEU3ze5GNzDm0OWdP8v1ziTaAEPUr&#x2F;3kLsY3Sftgz242A1SetQiDL7g&#x3D;&#x3D;</span><br><span class="line">.unpackedSize: 21.4 kB</span><br><span class="line"></span><br><span class="line">dependencies:</span><br><span class="line">charenc: 0.0.2    crypt: 0.0.2      is-buffer: ~1.1.6 </span><br><span class="line"></span><br><span class="line">maintainers:</span><br><span class="line">- coolaj86 &lt;coolaj86@gmail.com&gt;</span><br><span class="line">- pvorb &lt;paul@vorba.ch&gt;</span><br><span class="line"></span><br><span class="line">dist-tags:</span><br><span class="line">latest: 2.3.0  </span><br><span class="line"></span><br><span class="line">published a year ago by pvorb &lt;paul@vorba.ch&gt;</span><br></pre></td></tr></table></figure><h2 id="指定版本安装"><a href="#指定版本安装" class="headerlink" title="指定版本安装"></a>指定版本安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install node-media-server@2.1.1</span><br></pre></td></tr></table></figure><h2 id="版本号前缀"><a href="#版本号前缀" class="headerlink" title="版本号前缀"></a>版本号前缀</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;md5&quot;: &quot;^2.3.0&quot;,</span><br><span class="line">    &quot;silly-datetime&quot;: &quot;^0.1.2&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>^:  大版本不变，后面两位取最新</p><p>~：前两位不变，最后一位取最新</p><p>*：全部取最新</p><h2 id="淘宝镜像"><a href="#淘宝镜像" class="headerlink" title="淘宝镜像"></a>淘宝镜像</h2><p>Npm 每10分钟同步到国内镜像一次</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i cnpm -g --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>之后下载可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i md5</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;node学习记录&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Javascript 加载方式async与defer的区别</title>
    <link href="http://yoursite.com/2021/10/09/Javascript-%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8Fasync%E4%B8%8Edefer%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2021/10/09/Javascript-%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8Fasync%E4%B8%8Edefer%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2021-10-09T13:53:36.000Z</published>
    <updated>2022-02-14T11:36:29.995Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScrip不同加载方式的区别</p><a id="more"></a><table><thead><tr><th>模式</th><th>加载</th><th>执行</th><th><code>DOMContentLoaded</code>事件的</th><th>适用场景</th></tr></thead><tbody><tr><td>无</td><td>同步</td><td>下载完后立即执行，阻塞后续dom渲染</td><td>执行完后才会执行<code>DOMContentLoaded</code>事件</td><td>需先执行的脚本</td></tr><tr><td>defer</td><td>异步</td><td>文档渲染完毕后，<br>所有脚本都下载完<br>按照顺序执行所有的<code>script</code><br></td><td>执行完后才会执行<code>DOMContentLoaded</code>事件</td><td>依赖dom加载完毕的脚本<br><br>脚本间需要顺序执行<br>评论框<br>代码语法高亮<br>polyfill.js</td></tr><tr><td>async</td><td>异步</td><td>允许的时候执行，不按顺序执行script，谁先加载完先执行谁<br><br>加载完就会执行<br>有可能在渲染中执行</td><td>不受<code>async</code>脚本加载的影响</td><td>埋点统计脚本</td></tr></tbody></table><p>参考：<a href="https://www.cnblogs.com/jiasm/p/7683930.html" target="_blank" rel="noopener">浅谈script标签中的async和defer</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScrip不同加载方式的区别&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>css ctrl+c、ctrl+v</title>
    <link href="http://yoursite.com/2021/08/12/css%20ctrl+c%E3%80%81ctrl+v/"/>
    <id>http://yoursite.com/2021/08/12/css%20ctrl+c%E3%80%81ctrl+v/</id>
    <published>2021-08-12T18:21:58.000Z</published>
    <updated>2022-02-14T11:36:29.995Z</updated>
    
    <content type="html"><![CDATA[<p>长按不选中 多行省略</p><a id="more"></a><h1 id="长按不选中"><a href="#长按不选中" class="headerlink" title="长按不选中"></a>长按不选中</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    -webkit-touch-callout:none; </span><br><span class="line">    -webkit-user-select:none; </span><br><span class="line">    -moz-user-select:none; </span><br><span class="line">    -ms-user-select:none; </span><br><span class="line">    user-select:none; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多行省略"><a href="#多行省略" class="headerlink" title="多行省略"></a>多行省略</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">display: -webkit-box;</span><br><span class="line">-webkit-box-orient: vertical!important;</span><br><span class="line">-webkit-line-clamp: 2;</span><br><span class="line">max-height: 3em;</span><br><span class="line">overflow: hidden;</span><br><span class="line">text-overflow: ellipsis;</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;长按不选中 多行省略&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vue vue-router vuex</title>
    <link href="http://yoursite.com/2021/08/10/vue-vue-router-vuex/"/>
    <id>http://yoursite.com/2021/08/10/vue-vue-router-vuex/</id>
    <published>2021-08-10T14:48:12.000Z</published>
    <updated>2022-02-14T11:36:30.008Z</updated>
    
    <content type="html"><![CDATA[<p>父子组件的生命周期</p><a id="more"></a><h1 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h1><h3 id="父子组件的生命周期"><a href="#父子组件的生命周期" class="headerlink" title="父子组件的生命周期"></a>父子组件的生命周期</h3><h4 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h4><p>父 beforeCreated<br>父 created<br>父 beforeMounted<br>子 beforeCreated<br>子 created<br>子 beforeMounted<br>子 mounted<br>父 mounted</p><h4 id="子更新"><a href="#子更新" class="headerlink" title="子更新"></a>子更新</h4><p>父 beforeUpdate<br>子 beforeUpdate<br>子 updated<br>父 updated</p><h4 id="父更新"><a href="#父更新" class="headerlink" title="父更新"></a>父更新</h4><p>父 beforeupdate<br>父 updated</p><h4 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h4><p>父 beforeDestroy<br>子 beforeDestroy<br>子 destroyed<br>父 destroyed</p><p><strong>子组件必须是同步组件，否则子组件生命周期都在父组件之后</strong></p><h1 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h1><h3 id="完整的导航解析流程"><a href="#完整的导航解析流程" class="headerlink" title="完整的导航解析流程"></a>完整的导航解析流程</h3><ol><li>导航被触发。</li><li>在失活的组件里调用 beforeRouteLeave 守卫。</li><li>调用全局的 beforeEach 守卫。</li><li>在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。</li><li>在路由配置里调用 beforeEnter。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 beforeRouteEnter。</li><li>调用全局的 beforeResolve 守卫 (2.5+)。</li><li>导航被确认。</li><li>调用全局的 afterEach 钩子。</li><li>触发 DOM 更新。</li><li>调用 beforeRouteEnter 守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入。</li></ol><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;父子组件的生命周期&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>正则学习</title>
    <link href="http://yoursite.com/2021/04/12/%E6%AD%A3%E5%88%99%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2021/04/12/%E6%AD%A3%E5%88%99%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-04-12T19:29:02.000Z</published>
    <updated>2022-02-14T11:36:30.008Z</updated>
    
    <content type="html"><![CDATA[<p>分割多个匹配的字符<br>正则匹配替换键值<br>校验手机、邮箱</p><a id="more"></a><h3 id="分割多个匹配的字段"><a href="#分割多个匹配的字段" class="headerlink" title="| 分割多个匹配的字段"></a>| 分割多个匹配的字段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let str &#x3D;&quot;transform(&#39;1.25 发布&#39;)&quot;</span><br><span class="line">let replaceStr&#x3D; str.replace(&#x2F;(^transform\([\&#39;\&quot;]*)|&#x3D;g|&#x3D;|([\&quot;\&#39;]*\)$)&#x2F;g, (a) &#x3D;&gt; &#123;</span><br><span class="line">const info &#x3D; &#123;</span><br><span class="line">  &quot;transform(&#39;&quot;: &#39;&#39;,</span><br><span class="line">  &quot;&#39;)&quot;: &#39;&#39;,</span><br><span class="line">  &#39;&#x3D;&#39;: &#39;&lt;&#x2F;g&gt;&#39;,</span><br><span class="line">  &#39;&#x3D;g&#39;: &#39;&lt;g&gt;&#39;,</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">return info[a]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="原型继承，正则匹配替换、遍历获取json中的键和值"><a href="#原型继承，正则匹配替换、遍历获取json中的键和值" class="headerlink" title="原型继承，正则匹配替换、遍历获取json中的键和值"></a>原型继承，正则匹配替换、遍历获取json中的键和值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">String.prototype.render &#x3D; function(arr)&#123;</span><br><span class="line">var replaceKey &#x3D; [];</span><br><span class="line">var str &#x3D; [];</span><br><span class="line"></span><br><span class="line">for(var key in arr)&#123;</span><br><span class="line">   replaceKey.push(key);</span><br><span class="line">    str.push(arr[key]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var format &#x3D; this;</span><br><span class="line"></span><br><span class="line">for(var i&#x3D;0; i&lt;replaceKey.length;i++)&#123;</span><br><span class="line">    var reg &#x3D; new RegExp(&quot;\\$&#123;&quot; +replaceKey[i]+ &quot;&#125;&quot;, &quot;g&quot;);</span><br><span class="line">    format &#x3D; format.replace(reg,str[i]);</span><br><span class="line">    console.log(format);</span><br><span class="line">&#125;</span><br><span class="line">return format;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var greeting &#x3D; &#39;my name is $&#123;name&#125;, age $&#123;age&#125;&#39;;</span><br><span class="line">var result &#x3D; greeting.render(&#123;&#39;name&#39;:&#39;jack&#39;,&#39;age&#39;:16&#125;);</span><br><span class="line">&#x2F;&#x2F; my name is jack, age $&#123;age&#125;</span><br><span class="line">&#x2F;&#x2F; my name is jack, age 16</span><br></pre></td></tr></table></figure><p><strong>平时写正则是/${name}/就好，但是在new RegExp()不行，因为它的第一个参数是字符串，\在字符串中需要转义为\，所以需要双重转义符\.</strong></p><h3 id="校验手机号"><a href="#校验手机号" class="headerlink" title="校验手机号"></a>校验手机号</h3><h3 id="校验邮箱"><a href="#校验邮箱" class="headerlink" title="校验邮箱"></a>校验邮箱</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$</span><br></pre></td></tr></table></figure><p><strong>\w匹配的仅仅是中文，数字，字母和_</strong><br><strong>匹配中文字符的正则表达式：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[\u4e00-\u9fa5]</span><br></pre></td></tr></table></figure><p><strong>匹配双字节字符(包括汉字在内)：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[^\x00-\xff]</span><br></pre></td></tr></table></figure><p><strong>匹配中文，英文字母和数字及_:^[\u4e00-\u9fa5_a-zA-Z0-9]+$</strong></p><p>1、一个正则表达式，只含有汉字、数字、字母、下划线不能以下划线开头和结尾：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(?!_)(?!.*?_$)[a-zA-Z0-9_\u4e00-\u9fa5]+$</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分割多个匹配的字符&lt;br&gt;正则匹配替换键值&lt;br&gt;校验手机、邮箱&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Array方法对比</title>
    <link href="http://yoursite.com/2021/04/12/Array%E6%96%B9%E6%B3%95%E5%AF%B9%E6%AF%94/"/>
    <id>http://yoursite.com/2021/04/12/Array%E6%96%B9%E6%B3%95%E5%AF%B9%E6%AF%94/</id>
    <published>2021-04-12T16:48:40.000Z</published>
    <updated>2022-02-14T11:36:29.995Z</updated>
    
    <content type="html"><![CDATA[<p>indexOf ，findIndex()<br>includes(), some(), every()<br>map()<br>filter()<br>forEach()<br>各方法的区别，什么情况下用哪个方法比较好</p><a id="more"></a><p>*因为map生成一个新数组，当你不打算使用返回的新数组却使用map是违背设计初衷的，请用forEach或者for-of替代。你不该使用map: A)你不打算使用返回的新数组，或/且 B) 你没有从回调函数中返回值。<br>——由此总结：</p><p>1）需要返回索引，用indexOf ，findIndex() 方法，能用前者不用后者；</p><p>2）需要返回布尔，用includes(), some(), every()；</p><p>3)  需要返回新数组，只要一个符合条件的新数组用find(),  要多个符合条件的新数组用filter(), 包含所有元素运算出来的新数组用map()；</p><p>4）需要循环所有元素，用forEach()</p><p>5)  需要循环部分，用for，符合条件，跳出</p><hr><h3 id="1、for-循环-（for…in-for…of）"><a href="#1、for-循环-（for…in-for…of）" class="headerlink" title="1、for 循环 （for…in  for…of）"></a>1、for 循环 （for…in  for…of）</h3><p>1)  in结果是key， of结果是value</p><p>2）in 不保证顺序</p><p>3）in 是可枚举属性<br>4)  in 可以是对象</p><h3 id="2、forEach-amp-map-——没有办法中止或跳出-forEach-循环"><a href="#2、forEach-amp-map-——没有办法中止或跳出-forEach-循环" class="headerlink" title="2、forEach() &amp; map() ——没有办法中止或跳出 forEach() 循环"></a>2、forEach() &amp; map() ——没有办法中止或跳出 forEach() 循环</h3><p>forEach() 方法对数组的每个元素执行一次提供的函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">arr.forEach(callback(currentValue [, index [, array]])[, thisArg]);</span><br><span class="line"></span><br><span class="line">const array1 &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;];</span><br><span class="line"></span><br><span class="line">array1.forEach(element &#x3D;&gt; console.log(element));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; expected output: &quot;a&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; expected output: &quot;b&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; expected output: “c&quot;</span><br></pre></td></tr></table></figure><p>map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var new_array &#x3D; arr.map(function callback(currentValue[, index[, array]]) &#123;</span><br><span class="line"></span><br><span class="line"> &#x2F;&#x2F; Return element for new_array </span><br><span class="line"></span><br><span class="line">&#125;[, thisArg])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const array1 &#x3D; [1, 4, 9, 16];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; pass a function to map</span><br><span class="line"></span><br><span class="line">const map1 &#x3D; array1.map(x &#x3D;&gt; x * 2);</span><br><span class="line"></span><br><span class="line">console.log(map1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; expected output: Array [2, 8, 18, 32]</span><br></pre></td></tr></table></figure><p>3、every() &amp; some() &amp; find() &amp;filter() —满足条件将不再循环</p><p><strong>every()</strong> 方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">arr.every(callback[, thisArg])</span><br><span class="line"></span><br><span class="line">const isBelowThreshold &#x3D; (currentValue) &#x3D;&gt; currentValue &lt; 40;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const array1 &#x3D; [1, 30, 39, 29, 10, 13];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(array1.every(isBelowThreshold));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; expected output: true</span><br></pre></td></tr></table></figure><p><strong>some()</strong> 方法测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">arr.some(callback(element[, index[, array]])[, thisArg])</span><br><span class="line"></span><br><span class="line">const array &#x3D; [1, 2, 3, 4, 5];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; checks whether an element is even</span><br><span class="line"></span><br><span class="line">const even &#x3D; (element) &#x3D;&gt; element % 2 &#x3D;&#x3D;&#x3D; 0;</span><br><span class="line"></span><br><span class="line">console.log(array.some(even));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; expected output: true</span><br></pre></td></tr></table></figure><p><strong>find()</strong> 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">arr.find(callback[, thisArg])</span><br><span class="line"></span><br><span class="line">const array1 &#x3D; [5, 12, 8, 130, 44];</span><br><span class="line"></span><br><span class="line">const found &#x3D; array1.find(element &#x3D;&gt; element &gt; 10);</span><br><span class="line"></span><br><span class="line">console.log(found);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; expected output: 12</span><br></pre></td></tr></table></figure><p><strong>filter()</strong> 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var newArray &#x3D; arr.filter(callback(element[, index[, array]])[, thisArg])</span><br><span class="line"></span><br><span class="line">const words &#x3D; [&#39;spray&#39;, &#39;limit&#39;, &#39;elite&#39;, &#39;exuberant&#39;, &#39;destruction&#39;, &#39;present&#39;];</span><br><span class="line"></span><br><span class="line">const result &#x3D; words.filter(word &#x3D;&gt; word.length &gt; 6);</span><br><span class="line"></span><br><span class="line">console.log(result);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; expected output: Array [&quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;]</span><br></pre></td></tr></table></figure><h3 id="4、indexOf-amp-findIndex-amp-includes-amp-find"><a href="#4、indexOf-amp-findIndex-amp-includes-amp-find" class="headerlink" title="4、indexOf() &amp; findIndex() &amp; includes() &amp; find()"></a>4、indexOf() &amp; findIndex() &amp; includes() &amp; find()</h3><p><strong>findIndex()</strong>方法返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">arr.findIndex(callback[, thisArg])</span><br><span class="line"></span><br><span class="line">const array1 &#x3D; [5, 12, 8, 130, 44];</span><br><span class="line"></span><br><span class="line">const isLargeNumber &#x3D; (element) &#x3D;&gt; element &gt; 13;</span><br><span class="line"></span><br><span class="line">console.log(array1.findIndex(isLargeNumber));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; expected output: 3</span><br></pre></td></tr></table></figure><p><strong>includes()</strong> 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">arr.includes(valueToFind[, fromIndex])</span><br><span class="line"></span><br><span class="line">const array1 &#x3D; [1, 2, 3];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(array1.includes(2));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; expected output: true</span><br></pre></td></tr></table></figure><p><strong>indexOf()</strong>方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr.indexOf(searchElement[, fromIndex])</span><br><span class="line"></span><br><span class="line">var array &#x3D; [2, 5, 9];</span><br><span class="line"></span><br><span class="line">array.indexOf(2);     &#x2F;&#x2F; 0</span><br><span class="line"></span><br><span class="line">array.indexOf(7);     &#x2F;&#x2F; -1</span><br></pre></td></tr></table></figure><p>举例：</p><p>增信中有includes</p><p>春节活动有find</p><p>小明的年级排名</p><p>字符串实例方法：padStart()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(1 +&#39;&#39;).padStart(2, ‘0’) &#x2F;&#x2F; “01”</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#39;12&#39;.padStart(10, &#39;YYYY-MM-DD&#39;) &#x2F;&#x2F; &quot;YYYY-MM-12&quot;</span><br><span class="line"></span><br><span class="line">&#39;09-12&#39;.padStart(10, &#39;YYYY-MM-DD&#39;) &#x2F;&#x2F; &quot;YYYY-09-12&quot;</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;indexOf ，findIndex()&lt;br&gt;includes(), some(), every()&lt;br&gt;map()&lt;br&gt;filter()&lt;br&gt;forEach()&lt;br&gt;各方法的区别，什么情况下用哪个方法比较好&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>sql查询</title>
    <link href="http://yoursite.com/2021/03/11/sql%E6%9F%A5%E8%AF%A2/"/>
    <id>http://yoursite.com/2021/03/11/sql%E6%9F%A5%E8%AF%A2/</id>
    <published>2021-03-11T14:49:45.000Z</published>
    <updated>2022-02-14T11:36:30.008Z</updated>
    
    <content type="html"><![CDATA[<p>作为前端，可能认为数据层是后端的需要处理的事情。但现在是大数据时代，往往需要我们在页面中埋点来记录分析用户行为。我们如何检验我们的埋点是否埋上、埋对，就需要我们具有基础数据查询能力。</p><a id="more"></a><p>###基础查询<br>select 列名,列名,列名,列名,列名<br>from 表名<br>where 条件<br>and 条件<br>or 条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select date, user_id, distinct_id </span><br><span class="line">from</span><br><span class="line">events</span><br><span class="line">where date &gt;&#x3D; &#39;2021-03-01&#39;</span><br><span class="line">and event&#x3D;&#39;H5PageView&#39;</span><br><span class="line">and filename&#x3D;&#39;H5_WA_PaymentSuccess&#39;</span><br></pre></td></tr></table></figure><h3 id="limit-条数"><a href="#limit-条数" class="headerlink" title="limit 条数"></a>limit 条数</h3><p>假如不限制条数，查询的数据特别多的话，会非常慢，limit来限制返回多少条符合结果的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select date, user_id, distinct_id,project_uuid</span><br><span class="line">from</span><br><span class="line">events</span><br><span class="line">where date &gt;&#x3D; &#39;2021-03-01&#39;</span><br><span class="line">and event&#x3D;&#39;H5PageView&#39;</span><br><span class="line">and filename&#x3D;&#39;H5_WA_PaymentSuccess&#39;</span><br><span class="line">limit 10</span><br></pre></td></tr></table></figure><h3 id="group-by-列名"><a href="#group-by-列名" class="headerlink" title="group by 列名"></a>group by 列名</h3><p>将查询结果按**(列名)分组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select date</span><br><span class="line">from</span><br><span class="line">events</span><br><span class="line">where date &gt;&#x3D; &#39;2021-03-01&#39;</span><br><span class="line">and event&#x3D;&#39;H5PageView&#39;</span><br><span class="line">and filename&#x3D;&#39;H5_WA_PaymentSuccess&#39;</span><br><span class="line">group by date</span><br></pre></td></tr></table></figure><h3 id="distinct-列名"><a href="#distinct-列名" class="headerlink" title="distinct 列名"></a>distinct 列名</h3><p>根据列名去重</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select date, distinct user_id</span><br><span class="line">from</span><br><span class="line">events</span><br><span class="line">where date &gt;&#x3D; &#39;2021-03-01&#39;</span><br><span class="line">and event&#x3D;&#39;H5PageView&#39;</span><br><span class="line">and filename&#x3D;&#39;H5_WA_PaymentSuccess&#39;</span><br><span class="line">group by date</span><br></pre></td></tr></table></figure><h3 id="as-列名-as-自己起的名字"><a href="#as-列名-as-自己起的名字" class="headerlink" title="as (列名 as 自己起的名字)"></a>as (列名 as 自己起的名字)</h3><p>为列名起个别名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select date as &#39;日期&#39;, distinct user_id</span><br><span class="line">from</span><br><span class="line">events</span><br><span class="line">where date &gt;&#x3D; &#39;2021-03-01&#39;</span><br><span class="line">and event&#x3D;&#39;H5PageView&#39;</span><br><span class="line">and filename&#x3D;&#39;H5_WA_PaymentSuccess&#39;</span><br><span class="line">group by date</span><br></pre></td></tr></table></figure><h3 id="order-by-列名"><a href="#order-by-列名" class="headerlink" title="order by 列名"></a>order by 列名</h3><p>根据日期这一列来排序，可选择升序asc，和降序desc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select date as &#39;日期&#39;, distinct user_id</span><br><span class="line">from</span><br><span class="line">events</span><br><span class="line">where date &gt;&#x3D; &#39;2021-03-01&#39;</span><br><span class="line">and event&#x3D;&#39;H5PageView&#39;</span><br><span class="line">and filename&#x3D;&#39;H5_WA_PaymentSuccess&#39;</span><br><span class="line">order by date desc</span><br></pre></td></tr></table></figure><h3 id="count-列名"><a href="#count-列名" class="headerlink" title="count(列名)"></a>count(列名)</h3><p>根据列名统计总数，也可以用count(*)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select date as &#39;日期&#39;, count(distinct user_id)</span><br><span class="line">from</span><br><span class="line">events</span><br><span class="line">where date &gt;&#x3D; &#39;2021-03-01&#39;</span><br><span class="line">and event&#x3D;&#39;H5PageView&#39;</span><br><span class="line">and filename&#x3D;&#39;H5_WA_PaymentSuccess&#39;</span><br><span class="line">group by date desc</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>不同的数据库支持的函数不同。下面所用函数为<a href="https://impala.apache.org/docs/build/html/topics/impala_functions.html" target="_blank" rel="noopener">impala提供</a></p><p>Impala Mathematical Functions–数学方法<br>Impala Type Conversion Functions–转换方法<br>Impala Date and Time Functions–日期和事件方法<br>Impala Conditional Functions–条件方法<br>Impala String Functions–字符串方法<br>Impala Aggregate Functions–聚合方法<br>Impala Analytic Functions–分析方法<br>Impala Bit Functions–二进制方法<br>Impala Miscellaneous Functions–混杂方法</p><p>如下<br>cast( <strong>* as DECIMAL(9,8)) 将*</strong>转换为数字，精度为9，小数位为8</p><p>GET_JSON_OBJECT(字符串形式的json, ‘$.key值’) 将字符串形式的json转换为json，并取json中的这个key值。</p><p>replace(原始字符串, ‘要被替换的字符串’, ‘替换的字符串’) 替换字符串</p><p>parse_url(原始url, ‘QUERY’) –第二个参数可选值’PROTOCOL’, ‘HOST’, ‘PATH’, ‘REF’, ‘AUTHORITY’, ‘FILE’, ‘USERINFO’, or ‘QUERY’<br>第二个参数是’QUERY’，还可以有第三个参数parse_url(原始url, ‘QUERY’, ‘url参数的key’)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select date,</span><br><span class="line"> cast(GET_JSON_OBJECT(REPLACE(ExtraInfo, &#39;\\&#39;, &#39;&#39;),&#39;$.qscrnd&#39;) as DECIMAL(9,8)) as qscrnd ,</span><br><span class="line"> parse_url(origin_url, &#39;QUERY&#39;, &#39;projuuid&#39;) as project_uuid </span><br><span class="line">from</span><br><span class="line">events</span><br><span class="line">where date &gt;&#x3D; &#39;2021-03-01&#39;</span><br><span class="line">and event&#x3D;&#39;H5PageView&#39;</span><br><span class="line">and filename&#x3D;&#39;H5_WA_PaymentSuccess&#39;</span><br><span class="line">order by date</span><br></pre></td></tr></table></figure><h3 id="主表-join-副表-on-以-提交件"><a href="#主表-join-副表-on-以-提交件" class="headerlink" title="主表 join 副表 on 以**提交件"></a>主表 join 副表 on 以**提交件</h3><p>结合两张表来查询，也可以结合两个查询结果来查询。</p><h3 id="case-when-条件-then-输出-end"><a href="#case-when-条件-then-输出-end" class="headerlink" title="case when 条件 then 输出 end"></a>case when 条件 then 输出 end</h3><p>整合条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">select pv.date,</span><br><span class="line">case </span><br><span class="line">   when pv.qscrnd &lt; 0.5 </span><br><span class="line">   then &#39;&lt;0.5&#39;</span><br><span class="line">   when pv.qscrnd &gt;&#x3D; 0.5 </span><br><span class="line">   then &#39;&gt;0.5&#39;</span><br><span class="line">end as qscrnd,</span><br><span class="line"></span><br><span class="line">count(*) as pv, </span><br><span class="line">count(distinct pv.user_id) as uv</span><br><span class="line"></span><br><span class="line">from (</span><br><span class="line">    select date, user_id, distinct_id,project_uuid,</span><br><span class="line">      cast(GET_JSON_OBJECT(REPLACE(ExtraInfo, &#39;\\&#39;, &#39;&#39;),&#39;$.qscrnd&#39;) as DECIMAL(9,8)) as qscrnd </span><br><span class="line">    from</span><br><span class="line">    events</span><br><span class="line">    where date &gt;&#x3D; &#39;2021-03-01&#39;</span><br><span class="line">    and event&#x3D;&#39;H5PageView&#39;</span><br><span class="line">    and filename&#x3D;&#39;H5_WA_PaymentSuccess&#39;</span><br><span class="line">    --and filevalue&#x3D;&#39;H5_WA_PaymentSuccess&#39;</span><br><span class="line">  ) pv </span><br><span class="line">  </span><br><span class="line">  join (</span><br><span class="line">    select user_id, distinct_id,project_uuid</span><br><span class="line">    from</span><br><span class="line">    events</span><br><span class="line">    where date &gt;&#x3D; &#39;2021-03-01&#39;</span><br><span class="line">    and event &#x3D; &#39;FileClick&#39;</span><br><span class="line">    and filename&#x3D;&#39;Button_RedPocket&#39;</span><br><span class="line">    and filevalue&#x3D;&#39;H5_WA_PaymentSuccess&#39;</span><br><span class="line">  ) click</span><br><span class="line">  on pv.user_id &#x3D; click.user_id</span><br><span class="line">  --and pv.project_uuid &#x3D; click.project_uuid</span><br><span class="line"></span><br><span class="line">group by date, qscrnd</span><br><span class="line">order by date desc</span><br></pre></td></tr></table></figure><img style="margin: 0" src="/2021/03/11/sql%E6%9F%A5%E8%AF%A2/1615456235396.jpg"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为前端，可能认为数据层是后端的需要处理的事情。但现在是大数据时代，往往需要我们在页面中埋点来记录分析用户行为。我们如何检验我们的埋点是否埋上、埋对，就需要我们具有基础数据查询能力。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>网页性能优化</title>
    <link href="http://yoursite.com/2021/03/01/%E7%BD%91%E9%A1%B5%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-1/"/>
    <id>http://yoursite.com/2021/03/01/%E7%BD%91%E9%A1%B5%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-1/</id>
    <published>2021-03-01T09:42:28.000Z</published>
    <updated>2022-02-14T11:36:30.008Z</updated>
    
    <content type="html"><![CDATA[<p>一次性能优化实战经验总结</p><a id="more"></a><h3 id="关键节点数据采集"><a href="#关键节点数据采集" class="headerlink" title="关键节点数据采集"></a>关键节点数据采集</h3><p>如html加载完成时间点、js加载完成时间点、接口请求时间点、首屏渲染时间点</p><p>测试了请求6个并行接口和请求一个合并接口的时间，大致相同。400ms左右。后端检测到他们的时间是几十ms。优化意义不大。</p><p>因此，这次优化工作的重点放在前端。</p><h3 id="将首屏串行接口请求全部改为并行请求。"><a href="#将首屏串行接口请求全部改为并行请求。" class="headerlink" title="将首屏串行接口请求全部改为并行请求。"></a>将首屏串行接口请求全部改为并行请求。</h3><p>若依赖前一接口的返回，则和后端沟通是否合并接口。</p><h3 id="对需要登录的页面，去掉页面最开始是否登录的接口请求。"><a href="#对需要登录的页面，去掉页面最开始是否登录的接口请求。" class="headerlink" title="对需要登录的页面，去掉页面最开始是否登录的接口请求。"></a>对需要登录的页面，去掉页面最开始是否登录的接口请求。</h3><p>在请求首页页面数据接口时，会知道用户是否登录，如页面需强制登录，则根据某一字段判断是否跳转登录。这样，就减少了一个串行接口，大约减时400ms。</p><p>接下来是页面级的优化：</p><h3 id="首屏组件及任何父组件都应为同步加载"><a href="#首屏组件及任何父组件都应为同步加载" class="headerlink" title="首屏组件及任何父组件都应为同步加载"></a>首屏组件及任何父组件都应为同步加载</h3><p>对vue开发的网站，会先加载html，再加载html里引入的app.js，js中的代码去渲染页面，首屏代码不用同步方式加载的话，app.js下载完成，还需要串行去加载渲染首屏的的js。时间就被浪费掉了。</p><p>然后发现，app.js太大了，于是决定对js进行拆包。</p><h3 id="最大化利用浏览器并行请求数对首屏拆包，减小包的大小。用webpack-bundle-analyzer分析哪些可拆"><a href="#最大化利用浏览器并行请求数对首屏拆包，减小包的大小。用webpack-bundle-analyzer分析哪些可拆" class="headerlink" title="最大化利用浏览器并行请求数对首屏拆包，减小包的大小。用webpack-bundle-analyzer分析哪些可拆"></a>最大化利用浏览器并行请求数对首屏拆包，减小包的大小。用webpack-bundle-analyzer分析哪些可拆</h3><p>以chrome为例：同域名下最大并行请求数为6个。注意看有没有同域下的css、img占用资源数是否影响js的并行。</p><p>拆完包，发现首屏渲染速度反而变慢了……</p><h3 id="首屏同步加载部分组件"><a href="#首屏同步加载部分组件" class="headerlink" title="首屏同步加载部分组件"></a>首屏同步加载部分组件</h3><p>分析变慢的原因是整体包的大小，比未拆包前稍微大一点，而带宽资源有限。于是想首屏只加载部分组件，将整体包大小减小了1/3,上线后首屏渲染速度明显大幅提升</p><p> <strong>放在head中的js文件比body中的js文件加载优先级高</strong></p><h3 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h3><p>prefetch 预加载其它页面所需的资源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import(</span><br><span class="line">  &#96;.&#x2F;utilities&#x2F;divide&#96;</span><br><span class="line">  &#x2F;* webpackPrefetch: true *&#x2F;</span><br><span class="line">  &#x2F;* webpackChunkName: &quot;utilities&quot; *&#x2F;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>以上的导入会让<link rel="prefetch" as="script" href="utilities.js">被添加至页面的头部。因此浏览器会在空闲时间预先拉取该文件。</p><p>异步chunk会和父级chunk并行加载(webpack4.46并未实验成功)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* webpackPreload: true *&#x2F;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.cnblogs.com/powertoolsteam/p/10873677.html" target="_blank" rel="noopener">Webpack 4教程 - 第八部分 使用prefetch和preload进行动态加载</a></p><h3 id="去掉ajax的mothed为option的请求"><a href="#去掉ajax的mothed为option的请求" class="headerlink" title="去掉ajax的mothed为option的请求"></a>去掉ajax的mothed为option的请求</h3><p>由于浏览器的同源策略，非简单请求会发送option进行预检。猜测预检请求会影响加载速度，待验证</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://www.cnblogs.com/cczlovexw/p/11754301.html" target="_blank" rel="noopener">页面加载性能优化</a><br><a href="https://blog.csdn.net/haha223545/article/details/79675304" target="_blank" rel="noopener">H5首屏秒开方案探讨</a><br><a href="https://zhuanlan.zhihu.com/p/67098966" target="_blank" rel="noopener">页面性能优化办法有哪些？</a></p><p><a href="https://www.jianshu.com/p/cd7de34a759d" target="_blank" rel="noopener">Web性能优化-CSS和js的装载与执行</a></p><p><a href="https://blog.csdn.net/xiaoduanayu/article/details/78386508" target="_blank" rel="noopener">HTTP keep-alive详解</a><br><a href="https://www.cnblogs.com/skynet/archive/2010/12/11/1903347.html" target="_blank" rel="noopener">HTTP头字段总结</a><br><a href="https://www.cnblogs.com/TankXiao/archive/2012/10/10/2711777.html" target="_blank" rel="noopener">Wireshark基本介绍和学习TCP三次握手</a></p><p><a href="https://www.cnblogs.com/ljx20180807/p/13543487.html" target="_blank" rel="noopener">前端常用性能优化方法</a><br><a href="https://segmentfault.com/a/1190000008407729" target="_blank" rel="noopener">Chrome DevTools — Network</a><br><a href="https://www.cnblogs.com/liyunhua/p/4529086.html" target="_blank" rel="noopener">我总结的js性能优化的小知识</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一次性能优化实战经验总结&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>私有npm包创建及引用</title>
    <link href="http://yoursite.com/2021/01/29/%E7%A7%81%E6%9C%89npm%E5%8C%85%E5%88%9B%E5%BB%BA%E5%8F%8A%E5%BC%95%E7%94%A8/"/>
    <id>http://yoursite.com/2021/01/29/%E7%A7%81%E6%9C%89npm%E5%8C%85%E5%88%9B%E5%BB%BA%E5%8F%8A%E5%BC%95%E7%94%A8/</id>
    <published>2021-01-29T21:36:43.000Z</published>
    <updated>2022-02-14T11:36:30.008Z</updated>
    
    <content type="html"><![CDATA[<p>私有npm包创建和开发</p><a id="more"></a><h3 id="npm包创建"><a href="#npm包创建" class="headerlink" title="npm包创建"></a>npm包创建</h3><p>npm init</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">This utility will walk you through creating a package.json file.</span><br><span class="line">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class="line"></span><br><span class="line">See &#96;npm help json&#96; for definitive documentation on these fields</span><br><span class="line">and exactly what they do.</span><br><span class="line"></span><br><span class="line">Use &#96;npm install &lt;pkg&gt;&#96; afterwards to install a package and</span><br><span class="line">save it as a dependency in the package.json file.</span><br><span class="line"></span><br><span class="line">Press ^C at any time to quit.</span><br><span class="line">package name: (test)</span><br></pre></td></tr></table></figure><p>根据提示输入包名、版本、描述、入口文件、测试指令、keywords、author等，不需要更改的直接回车。</p><p>生成package.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;shareguidemask&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;a npm packege includes share guide mask&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [</span><br><span class="line">    &quot;shareGuideMask&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;author&quot;: &quot;jing&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;vue&quot;: &quot;^2.6.12&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写好程序，在入口文件index.js export</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import vue from &#39;vue&#39;;</span><br><span class="line">import app from &#39;.&#x2F;src&#x2F;index.vue&#39;;</span><br><span class="line">export default app;</span><br></pre></td></tr></table></figure><h3 id="推到仓库"><a href="#推到仓库" class="headerlink" title="推到仓库"></a>推到仓库</h3><p>加入git版本控制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>提交到gitHub仓库做实验</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git ci -m &#39;massege&#39;</span><br></pre></td></tr></table></figure><p>添加远程仓库地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:jingjing1205315&#x2F;</span><br></pre></td></tr></table></figure><p>推到远程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h3 id="私有项目用npm包的方式引入"><a href="#私有项目用npm包的方式引入" class="headerlink" title="私有项目用npm包的方式引入"></a>私有项目用npm包的方式引入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;npm包名&gt; --registry&#x3D;&lt;npm包源&gt;</span><br></pre></td></tr></table></figure><h3 id="打包报错"><a href="#打包报错" class="headerlink" title="打包报错"></a>打包报错</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Vue warn]: You are using the runtime-only build of Vue where the template c</span><br></pre></td></tr></table></figure><p>因为vue包入口文件是runtime模式,这样引入的单文件组件就不能compiler，解决方式是webpack config中设置到compiler模式的vue别名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    &#x2F;&#x2F; 省略...</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        alias: &#123;</span><br><span class="line">            &#39;vue&#39;: &#39;vue&#x2F;dist&#x2F;vue.js&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/wxl1555/article/details/83187647" target="_blank" rel="noopener">You are using the runtime-only build of Vue where the template compiler is not available. Either pre</a></p><p><a href="https://www.pianshen.com/article/4406262022/" target="_blank" rel="noopener">VUE问题：You are using the runtime-only build of Vue where the template compiler is not available.</a></p><h3 id="开发阶段修改私有npm包"><a href="#开发阶段修改私有npm包" class="headerlink" title="开发阶段修改私有npm包"></a>开发阶段修改私有npm包</h3><p>npm包修改，需要重新发版。项目中要安装相应的npm包版本，非常繁琐。找到了软连接的方式来做npm包修改的调试。</p><p>进入npm包的文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm link</span><br></pre></td></tr></table></figure><p>回到项目的文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm link &lt;包名&gt;</span><br></pre></td></tr></table></figure><p>这时，修改npm包的内容，可以实时展现在项目中。调试起来很方便。</p><p><a href="https://www.jianshu.com/p/d0c887cf730e?utm_campaign" target="_blank" rel="noopener">npm 私有包依赖 本地开发调试频繁更新解决方案</a></p><h3 id="引入项目-No-ESLint-configuration-found报错"><a href="#引入项目-No-ESLint-configuration-found报错" class="headerlink" title="引入项目 No ESLint configuration found报错"></a>引入项目 No ESLint configuration found报错</h3><p> vue cli3解决办法 // vue.config.js添加如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  chainWebpack: config &#x3D;&gt; config.resolve.symlinks(false)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>webpack项目 webpack.config.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  &#x2F;&#x2F;...</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    symlinks: false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_35261296/article/details/103990046" target="_blank" rel="noopener">webpack项目，link本地包出现No ESLint configuration found 问题解决</a></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://www.cnblogs.com/cag2050/p/10724196.html" target="_blank" rel="noopener">如何安装私有 npm 包？</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;私有npm包创建和开发&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>git 命令</title>
    <link href="http://yoursite.com/2021/01/20/git-%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2021/01/20/git-%E5%91%BD%E4%BB%A4/</id>
    <published>2021-01-20T20:10:50.000Z</published>
    <updated>2022-02-14T11:36:29.995Z</updated>
    
    <content type="html"><![CDATA[<p>log,diff,reset,checkout</p><a id="more"></a><h1 id="名词解释（待补充）"><a href="#名词解释（待补充）" class="headerlink" title="名词解释（待补充）"></a>名词解释（待补充）</h1><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><h2 id="origin"><a href="#origin" class="headerlink" title="origin"></a>origin</h2><h2 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a>工作区</h2><h2 id="缓存区"><a href="#缓存区" class="headerlink" title="缓存区"></a>缓存区</h2><h2 id="远程库"><a href="#远程库" class="headerlink" title="远程库"></a>远程库</h2><h2 id="origin-1"><a href="#origin-1" class="headerlink" title="origin"></a>origin</h2><h2 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h2><h1 id="git-命令"><a href="#git-命令" class="headerlink" title="git 命令"></a>git 命令</h1><h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h2><h3 id="git-push某一次的commit记录"><a href="#git-push某一次的commit记录" class="headerlink" title="git push某一次的commit记录"></a>git push某一次的commit记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ git push &lt;remote name&gt; &lt;commit hash&gt;:&lt;remote branch name&gt;</span><br><span class="line"></span><br><span class="line"># Example:</span><br><span class="line">$ git push origin 2dc2b7e393e6b712ef103eaac81050b9693395a4:master</span><br></pre></td></tr></table></figure><h2 id="Git-stash"><a href="#Git-stash" class="headerlink" title="Git stash"></a>Git stash</h2><p>（1）git stash save “save message”  : 执行存储时，添加备注，方便查找，只有git stash 也要可以的，但查找时不方便识别。</p><p>（2）git stash list  ：查看stash了哪些存储</p><p>（3）git stash show ：显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加stash@{$num}，比如第二个 git stash show stash@{1}</p><p>（4）git stash show -p : 显示第一个存储的改动，如果想显示其他存存储，命令：git stash show  stash@{$num}  -p ，比如第二个：git stash show  stash@{1}  -p</p><p>（5）git stash apply :应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@{0}，如果要使用其他个，git stash apply stash@{$num} ， 比如第二个：git stash apply stash@{1} </p><p>（6）git stash pop ：命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@{0}，如果要应用并删除其他stash，命令：git stash pop stash@{$num} ，比如应用并删除第二个：git stash pop stash@{1}</p><p>（7）git stash drop stash@{$num} ：丢弃stash@{$num}存储，从列表中删除这个存储</p><p>（8）git stash clear ：删除所有缓存的stash</p><h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">commit 96f50451c6f24a221c58c58a8cae136858fed97e (HEAD -&gt; master)</span><br><span class="line">Author: April &lt;zhangyajing1205315@163.com&gt;</span><br><span class="line">Date:   Thu Jan 21 19:57:50 2021 +0800</span><br><span class="line"></span><br><span class="line">    change readme.md</span><br><span class="line"></span><br><span class="line">commit 347e5597bb222237bc4c61d87a232cfb5ab24916</span><br><span class="line">Author: April &lt;zhangyajing1205315@163.com&gt;</span><br><span class="line">Date:   Thu Jan 21 19:56:37 2021 +0800</span><br><span class="line"></span><br><span class="line">    add a readme.md</span><br><span class="line"></span><br><span class="line">commit 4d4ddfc6ca37c81b62a576bf47b47144cb63bd3e</span><br><span class="line">Author: April &lt;zhangyajing1205315@163.com&gt;</span><br><span class="line">Date:   Thu Jan 21 19:54:08 2021 +0800</span><br><span class="line"></span><br><span class="line">    init</span><br></pre></td></tr></table></figure><p>这时的git reflog 是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">96f5045 (HEAD -&gt; master) HEAD@&#123;0&#125;: commit: change readme.md</span><br><span class="line">347e559 HEAD@&#123;1&#125;: commit: add a readme.md</span><br><span class="line">4d4ddfc HEAD@&#123;2&#125;: commit (initial): init</span><br></pre></td></tr></table></figure><p>(第四条操作)在干净的工作区，git reset –hard 什么也不会发生</p><p>(第五条操作）回退一个版本 git reset –hard HEAD^ <strong>（log记录仅剩两条）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">commit 347e5597bb222237bc4c61d87a232cfb5ab24916 (HEAD -&gt; master)</span><br><span class="line">Author: April &lt;zhangyajing1205315@163.com&gt;</span><br><span class="line">Date:   Thu Jan 21 19:56:37 2021 +0800</span><br><span class="line"></span><br><span class="line">    add a readme.md</span><br><span class="line"></span><br><span class="line">commit 4d4ddfc6ca37c81b62a576bf47b47144cb63bd3e</span><br><span class="line">Author: April &lt;zhangyajing1205315@163.com&gt;</span><br><span class="line">Date:   Thu Jan 21 19:54:08 2021 +0800</span><br><span class="line"></span><br><span class="line">    init</span><br><span class="line">(END)</span><br></pre></td></tr></table></figure><p>这时 git reflog 是这样<strong>(用来记录你的每一次命令，保留了所有的log)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">347e559 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to HEAD^</span><br><span class="line">96f5045 HEAD@&#123;1&#125;: reset: moving to HEAD</span><br><span class="line">96f5045 HEAD@&#123;2&#125;: commit: change readme.md</span><br><span class="line">347e559 (HEAD -&gt; master) HEAD@&#123;3&#125;: commit: add a readme.md</span><br><span class="line">4d4ddfc HEAD@&#123;4&#125;: commit (initial): init</span><br></pre></td></tr></table></figure><h3 id="git-log-–pretty-oneline"><a href="#git-log-–pretty-oneline" class="headerlink" title="git log –pretty=oneline"></a>git log –pretty=oneline</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f571563b5593893b5daed871fc03575b32133046 (HEAD -&gt; learn_git_branch) Merge branch &#39;prelive&#39; of code.qschou.com:qschou&#x2F;h5_fund into prelive</span><br><span class="line">9d51a3471043a39203be9178cbafc98b0e70d71d Merge branch &#39;feature-73979557-zyj更换项目分享内容&#39; into prelive</span><br><span class="line">ebf3439722718482b1bf283d45cd4ac70c681392 Merge branch &#39;xc-baodai&#39; into prelive</span><br><span class="line">566971c7776e9b9c699a33b3ecb6f35f35b65e91 (origin&#x2F;xc-baodai) no message</span><br></pre></td></tr></table></figure><h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h2><p>追踪当前<strong>修改</strong>内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">diff --git a&#x2F;source&#x2F;_posts&#x2F;Linux-Command.md b&#x2F;source&#x2F;_posts&#x2F;Linux-Command.md</span><br><span class="line">index b65319c..b53b18d 100644</span><br><span class="line">--- a&#x2F;source&#x2F;_posts&#x2F;Linux-Command.md</span><br><span class="line">+++ b&#x2F;source&#x2F;_posts&#x2F;Linux-Command.md</span><br><span class="line">@@ -9,7 +9,7 @@ tags:</span><br><span class="line"> print working directory</span><br><span class="line"> touch 文件名</span><br><span class="line"></span><br><span class="line">-</span><br><span class="line">+### mkdir 新建目录</span><br></pre></td></tr></table></figure><p> 新建的文件不会出现在这里。这时的git st 是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> On branch gh-pages</span><br><span class="line">Your branch is up to date with &#39;origin&#x2F;gh-pages&#39;.</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">new file:   &quot;source&#x2F;_posts&#x2F;git-\345\221\275\344\273\244.md&quot;</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">modified:   source&#x2F;_posts&#x2F;Linux-Command.md</span><br></pre></td></tr></table></figure><h3 id="git-diff-commit0-commit1-gt-test-patch-打patch（待补充）"><a href="#git-diff-commit0-commit1-gt-test-patch-打patch（待补充）" class="headerlink" title="git diff commit0 commit1 &gt; test.patch 打patch（待补充）"></a>git diff commit0 commit1 &gt; test.patch 打patch（待补充）</h3><h2 id="git-reset-–hard-恢复文件为HEAD版本"><a href="#git-reset-–hard-恢复文件为HEAD版本" class="headerlink" title="git reset –hard 恢复文件为HEAD版本"></a>git reset –hard 恢复文件为HEAD版本</h2><p>可以恢复Changes not staged for commit中的文件。</p><p>这时<strong>git st</strong>的结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">n branch master</span><br><span class="line">Your branch is up to date with &#39;origin&#x2F;master&#39;.</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line"></span><br><span class="line">        ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;css&#x2F;main_4b080aac.min.css</span><br><span class="line">        ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;js&#x2F;0.4b080aac.lazy.js</span><br><span class="line">        ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;js&#x2F;1.4b080aac.lazy.js</span><br><span class="line">        ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;js&#x2F;2.4b080aac.lazy.js</span><br><span class="line">        ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;js&#x2F;3.4b080aac.lazy.js</span><br><span class="line">        ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;js&#x2F;main_4b080aac.min.js</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br></pre></td></tr></table></figure><h1 id="git-操作实例"><a href="#git-操作实例" class="headerlink" title="git 操作实例"></a>git 操作实例</h1><h2 id="冲突解决"><a href="#冲突解决" class="headerlink" title="冲突解决"></a>冲突解决</h2><p>查看暂存区中记录的冲突文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-files -s</span><br></pre></td></tr></table></figure><p>日志如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">100644 ea9df2ef42c073de18bde4ebdf50e0ac6b1cdd2d 2 README.txt </span><br><span class="line">100644 633d2ed9d0ae01d0d07136c5b5bd857e4d945c14 3 README.txt </span><br><span class="line">100644 17874eaa4a398cc94ed294c93fdbf50f7f843d88 0 team&#x2F;user1.txt </span><br><span class="line">100644 2dcb7b6ac06d93ea8e6af21ded690f5e171a407c 0 team&#x2F;user2.txt</span><br></pre></td></tr></table></figure><p>编号为2表示暂存区用于保存冲突文件在当前分支中修改的副本，查看该文件的内容执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show :2:README.txt</span><br></pre></td></tr></table></figure><p>编号为3的为暂存区用于保存当前冲突文件在合并版本中修改的副本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show :3:README.txt</span><br></pre></td></tr></table></figure><p>最后看看工作区的README.txt文件的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat README.txt</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD&quot;</span><br><span class="line">Hello, user2.</span><br><span class="line">&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;</span><br><span class="line">&quot;Hello, user1.&quot;</span><br><span class="line">“&gt;&gt;&gt;&gt;&gt;&gt;&gt; 04eed972e27e23a9874f984f08d6567e565d3436”</span><br></pre></td></tr></table></figure><p>手动解决这个冲突</p><p>选择我的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">todo</span><br></pre></td></tr></table></figure><p>选择他人的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">todo</span><br></pre></td></tr></table></figure><p>工作区和暂存区都干净时，都不要了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard FETCH_HEAD</span><br><span class="line">或</span><br><span class="line">git merge --abort</span><br></pre></td></tr></table></figure><p>git add -u -u参数表示把工作区被跟踪的文件添加到暂存区</p><p>编号都变成0，这样就说明已经成功解决了冲突。</p><h3 id="冲突解决-只解决前端冲突（前后端代码在同一仓库）"><a href="#冲突解决-只解决前端冲突（前后端代码在同一仓库）" class="headerlink" title="冲突解决-只解决前端冲突（前后端代码在同一仓库）"></a>冲突解决-只解决前端冲突（前后端代码在同一仓库）</h3><p>1、merge,这时会看到很多unstaged的冲突文件及staged的非冲突文件<br>2、reset –sorf，所有文件都从暂存区回退到工作区。解决前端冲突。<br>3、提交前端代码，遗弃后端代码。</p><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p>有两种方式，revert和reset</p><h3 id="git-revert-n-版本号"><a href="#git-revert-n-版本号" class="headerlink" title="git revert -n 版本号"></a>git revert -n 版本号</h3><p>指不要这个提交，其它提交还保留</p><h3 id="git-reset-–hard-版本号"><a href="#git-reset-–hard-版本号" class="headerlink" title="git reset –hard 版本号"></a>git reset –hard 版本号</h3><p>指回退到这个版本，后面的提交都不要。</p><p>在Git中，用HEAD表示当前版本，也就是最新的提交1094adb…（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 回到前一个版本</span><br><span class="line">$ git reset --hard HEAD^</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 去到任一版本，cimmit记录的版本号1094a</span><br><span class="line">$ git reset --hard 1094a</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 所有版本的记录</span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><p>打包后未add<br>出现两部分内容<br>Changes not staged for commit:（对之前文件的修改）<br>Untracked files:（新生产的文件）<br><strong>git st</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">On branch master</span><br><span class="line">Your branch is up to date with &#39;origin&#x2F;master&#39;.</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add&#x2F;rm &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">        deleted:    ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;css&#x2F;main_bdeaeb84.min.css</span><br><span class="line">        modified:   ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;index.html</span><br><span class="line">        deleted:    ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;js&#x2F;0.bdeaeb84.lazy.js</span><br><span class="line">        deleted:    ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;js&#x2F;1.bdeaeb84.lazy.js</span><br><span class="line">        deleted:    ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;js&#x2F;2.bdeaeb84.lazy.js</span><br><span class="line">        deleted:    ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;js&#x2F;3.bdeaeb84.lazy.js</span><br><span class="line">        deleted:    ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;js&#x2F;main_bdeaeb84.min.js</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line"></span><br><span class="line">        ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;css&#x2F;main_4b080aac.min.css</span><br><span class="line">        ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;js&#x2F;0.4b080aac.lazy.js</span><br><span class="line">        ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;js&#x2F;1.4b080aac.lazy.js</span><br><span class="line">        ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;js&#x2F;2.4b080aac.lazy.js</span><br><span class="line">        ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;js&#x2F;3.4b080aac.lazy.js</span><br><span class="line">        ..&#x2F;..&#x2F;..&#x2F;static&#x2F;project&#x2F;reward_rank&#x2F;js&#x2F;main_4b080aac.min.js</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure><h3 id="git-checkout-–-文件名"><a href="#git-checkout-–-文件名" class="headerlink" title="git checkout – 文件名"></a>git checkout – 文件名</h3><p>– 文件名 不可少，要不然会变成切换分支<br>也可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout</span><br></pre></td></tr></table></figure><p><strong>下面文字的理解是：checkout 只能恢复没有add的修改</strong></p><blockquote><p>–以下来自廖雪峰的git<br>命令git checkout – readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：</p></blockquote><blockquote><p>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p></blockquote><blockquote><p>一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p></blockquote><blockquote><p>总之，就是让这个文件回到最近一次git commit或git add时的状态。</p></blockquote><ol><li>如果已经add 了，用git reset HEAD <file>,文件修改保留，只是从暂存区回到了工作区</file></li><li>已commit，用git reset HEAD^ 回退到上一个版本。文件修改保留，修改从仓库回到了工作区</li><li>git reset HEAD –hard 回到最后一次commit的版本，并且修改不会保留(无论修改是在工作区还是暂存区)(对untrack的修改没有)</li><li>git rm 只能删除版本库里的文件，对untrack的也没用。untrack文件add进暂存区，可以用git rm 文件名 –catched回到工作区。用git rm 文件名 -f 可以彻底删除文件。</li><li>git clean -f 清空工作区的untrack,但对not  staged的修改无效。</li></ol><p>参考：<br><a href="https://blog.csdn.net/weixin_43664308/article/details/100083246" target="_blank" rel="noopener">Git 清空工作区和暂存区</a><br><a href="https://www.liaoxuefeng.com/wiki/896043488029600/897271968352576" target="_blank" rel="noopener">廖雪峰Git教程</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;log,diff,reset,checkout&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Linux Command</title>
    <link href="http://yoursite.com/2021/01/14/Linux-Command/"/>
    <id>http://yoursite.com/2021/01/14/Linux-Command/</id>
    <published>2021-01-14T19:05:45.000Z</published>
    <updated>2022-02-14T11:36:29.995Z</updated>
    
    <content type="html"><![CDATA[<p>lsof kill vim, cat, pwd, mkdir,touch, ls, chmod, chown, chgrp</p><a id="more"></a><hr><h1 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h1><h2 id="sudo-lsof-i-1025-查看端口1025被什么程序占用（lists-openfiles）"><a href="#sudo-lsof-i-1025-查看端口1025被什么程序占用（lists-openfiles）" class="headerlink" title="sudo lsof -i:1025 查看端口1025被什么程序占用（lists openfiles）"></a>sudo lsof -i:1025 查看端口1025被什么程序占用（lists openfiles）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COMMAND   PID USER   FD   TYPE             DEVICE SIZE&#x2F;OFF NODE NAME</span><br><span class="line">node    63350 jing   24u  IPv4 0x506ba2f2071e30df      0t0  TCP localhost:blackjack (LISTEN)</span><br></pre></td></tr></table></figure><p>杀掉pid未63350的进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo kill -9 63350</span><br></pre></td></tr></table></figure><p>lsof替代了netstat和ps的全部工作</p><h2 id="命令大全-man-lsof"><a href="#命令大全-man-lsof" class="headerlink" title="命令大全 man lsof"></a>命令大全 man lsof</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">lsof abc.txt 显示开启文件abc.txt的进程</span><br><span class="line"></span><br><span class="line">lsof -i :22 知道22端口现在运行什么程序</span><br><span class="line"></span><br><span class="line">lsof -c abc 显示abc进程现在打开的文件</span><br><span class="line"></span><br><span class="line">lsof -g gid 显示归属gid的进程情况</span><br><span class="line"></span><br><span class="line">lsof +d &#x2F;usr&#x2F;local&#x2F; 显示目录下被进程开启的文件</span><br><span class="line"></span><br><span class="line">lsof +D &#x2F;usr&#x2F;local&#x2F; 同上，但是会搜索目录下的目录，时间较长</span><br><span class="line"></span><br><span class="line">lsof -d 4 显示使用fd为4的进程 www.2cto.com</span><br><span class="line"></span><br><span class="line">lsof -i 用以显示符合条件的进程情况</span><br><span class="line"></span><br><span class="line">语法: lsof -i[46] [protocol][@hostname|hostaddr][:service|port]</span><br><span class="line"></span><br><span class="line">46 --&gt; IPv4 or IPv6</span><br><span class="line"></span><br><span class="line">protocol --&gt; TCP or UDP</span><br><span class="line"></span><br><span class="line">hostname --&gt; Internet host name</span><br><span class="line"></span><br><span class="line">hostaddr --&gt; IPv4位置</span><br><span class="line"></span><br><span class="line">service --&gt; &#x2F;etc&#x2F;service中的 service name (可以不只一个)</span><br><span class="line"></span><br><span class="line">port --&gt; 端口号 (可以不只一个)</span><br><span class="line"></span><br><span class="line">例子: TCP:25 - TCP and port 25</span><br><span class="line"></span><br><span class="line">@1.2.3.4 - Internet IPv4 host address 1.2.3.4</span><br><span class="line"></span><br><span class="line">tcp@ohaha.ks.edu.tw:ftp - TCP protocol hosthaha.ks.edu.tw service name:ftp</span><br><span class="line"></span><br><span class="line">lsof -n 不将IP转换为hostname，缺省是不加上-n参数</span><br><span class="line"></span><br><span class="line">例子: lsof -i tcp@ohaha.ks.edu.tw:ftp -n</span><br><span class="line"></span><br><span class="line">lsof -p 12 看进程号为12的进程打开了哪些文件</span><br><span class="line"></span><br><span class="line">lsof +|-r [t] 控制lsof不断重复执行，缺省是15s刷新</span><br><span class="line"></span><br><span class="line">-r，lsof会永远不断的执行，直到收到中断信号</span><br><span class="line"></span><br><span class="line">+r，lsof会一直执行，直到没有档案被显示</span><br><span class="line"></span><br><span class="line">例子：不断查看目前ftp连接的情况：lsof -i tcp@ohaha.ks.edu.tw:ftp -r</span><br><span class="line"></span><br><span class="line">lsof -s 列出打开文件的大小，如果没有大小，则留下空白</span><br><span class="line"></span><br><span class="line">lsof -u username 以UID，列出打开的文件 www.2cto.com</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/a3aa6b01b2e1" target="_blank" rel="noopener">参考:Linux 命令神器：lsof</a></p><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><h2 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h2><p>创建文件<br>touch 文件名</p><h2 id="vim-gitignore"><a href="#vim-gitignore" class="headerlink" title="vim .gitignore"></a>vim .gitignore</h2><p>编辑文件</p><h2 id="cat-gitignore"><a href="#cat-gitignore" class="headerlink" title="cat .gitignore"></a>cat .gitignore</h2><p>查看文件</p><h3 id="pwd（print-working-directory）"><a href="#pwd（print-working-directory）" class="headerlink" title="pwd（print working directory）"></a>pwd（print working directory）</h3><p>touch 文件名</p><h3 id="mkdir-新建目录"><a href="#mkdir-新建目录" class="headerlink" title="mkdir 新建目录"></a>mkdir 新建目录</h3><p>mkdir 目录名</p><h3 id="ls-a"><a href="#ls-a" class="headerlink" title="ls -a"></a>ls -a</h3><p>可看到隐藏文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls -a</span><br><span class="line"></span><br><span class="line">.                 .DS_Store         .gitignore        _config.yml       node_modules      package.json      scaffolds         themes</span><br><span class="line">..                .git              .travis.yml       db.json           package-lock.json public            source</span><br></pre></td></tr></table></figure><h3 id="ls-l"><a href="#ls-l" class="headerlink" title="ls -l"></a>ls -l</h3><p>查看文件权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">total 0</span><br><span class="line">drwxr-xr-x  31 jing  staff  992 Jan 14 19:09 _posts</span><br><span class="line">drwxr-xr-x   3 jing  staff   96 Jul  7  2020 about</span><br><span class="line">drwxr-xr-x   3 jing  staff   96 Jul  7  2020 archives</span><br><span class="line">drwxr-xr-x   3 jing  staff   96 Jul  7  2020 categories</span><br><span class="line">drwxr-xr-x   3 jing  staff   96 Jul  7  2020 tags</span><br></pre></td></tr></table></figure><p><strong>字段含义：<br>-文件类型权限<br>-文件硬链接数（如果是一个目录，则第2字段表示该目录所含子目录的个数。空文件为2，1个目录为指向自己，一个目录为指向附近）<br>-所属用户<br>-所属群组<br>-文件所占用的空间(以字节为单位)<br>-文件（目录）<br>-最近访问（修改）时间<br>-文件名</strong></p><p><strong>权限：</strong><br>drwxr-xr-x/-rwxr-xr-x共10位，第一位代表类型，后面三位一组分别代表：文件拥有者的权限，文件所属组拥有的权限，其他用户拥有的权限</p><p><strong>权限中第一位类型：</strong></p><ol><li>d: directory</li><li>-: 普通文件</li><li>l: 链接文件link</li><li>b: 块设备文件(block)一般置于/dev目录下，设备文件是普通文件和程序访问硬件设备的入口，是很特殊的文件。没有文件大小，只有一个主设备号和一个辅设备号。一次传输数据为一整块的被称为块设备，如硬盘、光盘等。最小数据传输单位为一个数据块(通常一个数据块的大小为512字节)</li><li>c: 字符设备文件(character) 一般置于/dev目录下，一次传输一个字节的设备被称为字符设备，如键盘、字符终端等，传输数据的最小单位为一个字节。</li><li>p: 命令管道文件。与shell编程有关的文件。</li><li>s: sock文件。与shell编程有关的文件。</li></ol><p><strong>权限字母其余位字母含义：</strong><br>r: read<br>w: write<br>x: eXecute</p><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><p><strong>例:对/opt/Oracle/目录下的所有文件与子目录执行相同的权限变更：</strong></p><p>chmod -R(递归) 700(权限) 目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 700 &#x2F;opt&#x2F;oracle&#x2F;</span><br></pre></td></tr></table></figure><p>-R参数是<strong>递归</strong> 处理目录下的所有文件以及子文件夹</p><p>700是变更后的权限表示（只有所有者有读和写以及执行的权限）</p><p>/opt/oracle/ 是需要执行的目录</p><h3 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h3><p><strong>例:对 /opt/oracle/  目录下的所有文件与子目录执行相同的所有者变更，使所有者修改为oinstall用户组的oracle用户</strong></p><p>chown -R(递归) 用户:用户组 目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R oracle:oinstall &#x2F;opt&#x2F;oracle&#x2F;</span><br></pre></td></tr></table></figure><p>oracle:oinstall oinstall用户组的oracle，用户组不必须</p><h3 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h3><p>chgrp 组名 目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp localaccounts mysql-init</span><br></pre></td></tr></table></figure><h1 id="Linux-grep-命令用于查找文件里符合条件的字符串。"><a href="#Linux-grep-命令用于查找文件里符合条件的字符串。" class="headerlink" title="Linux grep 命令用于查找文件里符合条件的字符串。"></a>Linux grep 命令用于查找文件里符合条件的字符串。</h1><h1 id="tar-tape-archive-命令用于备份文件"><a href="#tar-tape-archive-命令用于备份文件" class="headerlink" title="tar tape archive 命令用于备份文件"></a>tar tape archive 命令用于备份文件</h1><p>tar 是用来建立，还原备份文件的工具程序，它可以加入，解开备份文件内的文件</p><p>压缩文件 非打包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># touch a.c       </span><br><span class="line"># tar -czvf test.tar.gz a.c   &#x2F;&#x2F;压缩 a.c文件为test.tar.gz</span><br><span class="line">a.c</span><br></pre></td></tr></table></figure><p>列出压缩文件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># tar -tzvf test.tar.gz </span><br><span class="line">-rw-r--r-- root&#x2F;root     0 2010-05-24 16:51:59 a.c</span><br></pre></td></tr></table></figure><p>解压文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># tar -xzvf test.tar.gz </span><br><span class="line">a.c</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;lsof kill vim, cat, pwd, mkdir,touch, ls, chmod, chown, chgrp&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ios 兼容问题Safari调试&amp;真机调试</title>
    <link href="http://yoursite.com/2021/01/13/ios-%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98Safari%E8%B0%83%E8%AF%95/"/>
    <id>http://yoursite.com/2021/01/13/ios-%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98Safari%E8%B0%83%E8%AF%95/</id>
    <published>2021-01-13T13:33:55.000Z</published>
    <updated>2022-02-14T11:36:29.999Z</updated>
    
    <content type="html"><![CDATA[<p> ios手机和Safari真机调试</p><a id="more"></a><h3 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h3><p>Mac电脑，iPhone手机，数据线</p><h3 id="1、mac中Safari设置："><a href="#1、mac中Safari设置：" class="headerlink" title="1、mac中Safari设置："></a>1、mac中Safari设置：</h3><p>打开Safari偏好者设置，选中“高级菜单”，将页面最下方的“在菜单中显示开发菜单”复选框打钩，这样设置完毕后就能在Safari菜单中看到开发菜单</p><img style="margin: 0" src="/2021/01/13/ios-%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98Safari%E8%B0%83%E8%AF%95/20181112144458575.png"><h3 id="2、iPhone-设置："><a href="#2、iPhone-设置：" class="headerlink" title="2、iPhone 设置："></a>2、iPhone 设置：</h3><p>打开iPhone手机设置——&gt;选择Safari，找到高级选项，有JavaScript开关、web检查器开关，将两个开关打开</p><img style="margin: 0" src="/2021/01/13/ios-%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98Safari%E8%B0%83%E8%AF%95/20181112144511290.png"><h3 id="3、iPhone连接mac上，打开Safari浏览器，运行App（开发版）或者手机Safari的web页面，在开发菜单中选择连接的手机，找到调试的网页，就能在Safari里面调试"><a href="#3、iPhone连接mac上，打开Safari浏览器，运行App（开发版）或者手机Safari的web页面，在开发菜单中选择连接的手机，找到调试的网页，就能在Safari里面调试" class="headerlink" title="3、iPhone连接mac上，打开Safari浏览器，运行App（开发版）或者手机Safari的web页面，在开发菜单中选择连接的手机，找到调试的网页，就能在Safari里面调试"></a>3、iPhone连接mac上，打开Safari浏览器，运行App（开发版）或者手机Safari的web页面，在开发菜单中选择连接的手机，找到调试的网页，就能在Safari里面调试</h3><img style="margin: 0" src="/2021/01/13/ios-%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98Safari%E8%B0%83%E8%AF%95/aHR0cHM6Ly93d3cud2FuZ3lhbmFuLm9ubGluZS9tZWRpYS8yMDE4LzEyLzYucG5n.png"><p>4、定位问题出现区域的布局和样式<br><img style="margin: 0" src="/2021/01/13/ios-%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98Safari%E8%B0%83%E8%AF%95/aHR0cHM6Ly93d3cud2FuZ3lhbmFuLm9ubGluZS9tZWRpYS8yMDE4LzEyLzcucG5n.png"></p><p>扩展： Chrome调试 Android web页面<br>1、安装Chrome浏览器<br>2、使用Android 真机连接电脑<br>3、最后，打开Chrome ,输入：chrome://inspect<br><a href="https://blog.csdn.net/whh181/article/details/77930870" target="_blank" rel="noopener">https://blog.csdn.net/whh181/article/details/77930870</a></p><p>参考原文：<br><a href="https://blog.csdn.net/heqiang2015/article/details/83991986" target="_blank" rel="noopener">Safari 调试iPhone web页面（App为开发版）</a><br><a href="https://blog.csdn.net/longlc123/article/details/56370004?utm_medium=distribute.pc_feed_404.none-task-blog-BlogCommendFromBaidu-1.nonecase&depth_1-utm_source=distribute.pc_feed_404.none-task-blog-BlogCommendFromBaidu-1.nonecas" target="_blank" rel="noopener">chrome实现pc端调试-移动端调试（Android）</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt; ios手机和Safari真机调试&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>npm packege 遇到的坑</title>
    <link href="http://yoursite.com/2020/12/31/npm-packege-%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>http://yoursite.com/2020/12/31/npm-packege-%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</id>
    <published>2020-12-31T14:56:12.000Z</published>
    <updated>2022-02-14T11:36:30.008Z</updated>
    
    <content type="html"><![CDATA[<p>2020年的最后一天，就用来记录下这些日子来使用npm包遇到的坑。给自己加深下记忆。</p><a id="more"></a><h3 id="vue-infinite-scroll无限加载"><a href="#vue-infinite-scroll无限加载" class="headerlink" title="vue-infinite-scroll无限加载"></a>vue-infinite-scroll无限加载</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-infinite-scroll --save</span><br></pre></td></tr></table></figure><h4 id="使用（vue中）"><a href="#使用（vue中）" class="headerlink" title="使用（vue中）"></a>使用（vue中）</h4><h5 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import infiniteScroll from &#39;vue-infinite-scroll&#39;</span><br><span class="line">Vue.use(infiniteScroll)</span><br></pre></td></tr></table></figure><h5 id="或者在组件中directive引入"><a href="#或者在组件中directive引入" class="headerlink" title="或者在组件中directive引入"></a>或者在组件中directive引入</h5><h5 id="代码中片段"><a href="#代码中片段" class="headerlink" title="代码中片段"></a>代码中片段</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-infinite-scroll&#x3D;&quot;loadMore&quot; infinite-scroll-disabled&#x3D;&quot;busy&quot; infinite-scroll-distance&#x3D;&quot;10&quot;&gt;</span><br><span class="line">    &lt;div v-for&#x3D;&quot;item in data&quot; :key&#x3D;&quot;item.index&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 0,</span><br><span class="line">      data: [],</span><br><span class="line">      busy: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    loadMore: function() &#123;</span><br><span class="line">      this.busy &#x3D; true</span><br><span class="line">      setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        for (var i &#x3D; 0, j &#x3D; 10; i &lt; j; i++) &#123;</span><br><span class="line">          this.data.push(&#123;name: this.count++ &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(this.data)</span><br><span class="line">        this.busy &#x3D; false</span><br><span class="line">      &#125;, 1000)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>v-infinite-scroll=”loadMore”表示回调函数是loadMore<br>infinite-scroll-disabled=”busy”表示由变量busy决定是否执行loadMore，false则执行loadMore，true则不执行，看清楚，busy表示繁忙，繁忙的时候是不执行的。<br>infinite-scroll-distance=”10”这里10决定了页面滚动到离页尾多少像素的时候触发回调函数，10是像素值。通常我们会在页尾做一个几十像素高的“正在加载中…”，这样的话，可以把这个div的高度设为infinite-scroll-distance的值即可。</p><p>其他选项：</p><p>infinite-scroll-immediate-check 默认值为true，该指令意思是，应该在绑定后立即检查busy的值和是否滚动到底。如果你的初始内容高度不够高、不足以填满可滚动的容器的话，你应设为true，这样会立即执行一次loadMore，会帮你填充一些初始内容。<br>infinite-scroll-listen-for-event 当事件在Vue实例中发出时，无限滚动将再次检查。<br>infinite-scroll-throttle-delay 检查busy的值的时间间隔，默认值是200，因为vue-infinite-scroll的基础原理就是，vue-infinite-scroll会循环检查busy的值，以及是否滚动到底，只有当：busy为false且滚动到底，回调函数才会执行。</p><h4 id="我遇到的坑"><a href="#我遇到的坑" class="headerlink" title="我遇到的坑"></a>我遇到的坑</h4><p>承载v-infinite-scroll=”loadMore” infinite-scroll-disabled=”busy” infinite-scroll-distance=”10”的元素上有个<strong><em>v-if</em></strong>，导致loadMore根本就不会执行，这块一定要特别注意</p><h3 id="swiper-轮播图"><a href="#swiper-轮播图" class="headerlink" title="swiper 轮播图"></a>swiper 轮播图</h3><p>引用，以下或者cdn</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;CommonJs</span><br><span class="line">var Swiper &#x3D; require(&#39;swiper&#39;);    </span><br><span class="line">var mySwiper &#x3D; new Swiper(&#39;.swiper-container&#39;, &#123; &#x2F;* ... *&#x2F; &#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;ES</span><br><span class="line">import Swiper from &#39;swiper&#39;;    </span><br><span class="line">var mySwiper &#x3D; new Swiper(&#39;.swiper-container&#39;, &#123; &#x2F;* ... *&#x2F; &#125;);</span><br></pre></td></tr></table></figure><p>html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;swiper-container&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;swiper-wrapper&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;swiper-slide&quot;&gt;Slide 1&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;swiper-slide&quot;&gt;Slide 2&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;swiper-slide&quot;&gt;Slide 3&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- 如果需要分页器 --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;swiper-pagination&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 如果需要导航按钮 --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;swiper-button-prev&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;swiper-button-next&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 如果需要滚动条 --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;swiper-scrollbar&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">导航等组件可以放在container之外</span><br></pre></td></tr></table></figure><p>初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script&gt;        </span><br><span class="line">  var mySwiper &#x3D; new Swiper (&#39;.swiper-container&#39;, &#123;</span><br><span class="line">    direction: &#39;vertical&#39;, &#x2F;&#x2F; 垂直切换选项</span><br><span class="line">    loop: true, &#x2F;&#x2F; 循环模式选项</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 如果需要分页器</span><br><span class="line">    pagination: &#123;</span><br><span class="line">      el: &#39;.swiper-pagination&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 如果需要前进后退按钮</span><br><span class="line">    navigation: &#123;</span><br><span class="line">      nextEl: &#39;.swiper-button-next&#39;,</span><br><span class="line">      prevEl: &#39;.swiper-button-prev&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 如果需要滚动条</span><br><span class="line">    scrollbar: &#123;</span><br><span class="line">      el: &#39;.swiper-scrollbar&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)        </span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="不同版本API变化"><a href="#不同版本API变化" class="headerlink" title="不同版本API变化"></a>不同版本API变化</h4><img style="margin: 0 " src="/2020/12/31/npm-packege-%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/zujianhua.png"><h4 id="swiper6"><a href="#swiper6" class="headerlink" title="swiper6"></a>swiper6</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import Swiper, &#123; Autoplay, Pagination &#125; from &quot;swiper&quot;;</span><br><span class="line">Swiper.use([Autoplay, Pagination]);</span><br><span class="line">import &quot;swiper&#x2F;swiper-bundle.min.css&quot;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">new Swiper(&quot;.swiper-container&quot;, &#123;</span><br><span class="line">                initialSlide: 2,</span><br><span class="line">                speed: 300,</span><br><span class="line">                autoplay: &#123;</span><br><span class="line">                    delay: 3000,</span><br><span class="line">                &#125;,</span><br><span class="line">                loop: true,</span><br><span class="line">                slidesPerView: 3,</span><br><span class="line">                spaceBetween: &#39;6%&#39;,</span><br><span class="line">                centeredSlides: true,</span><br><span class="line">                &#x2F;&#x2F; pagination: &#123;</span><br><span class="line">                &#x2F;&#x2F;     el: &quot;.swiper-pagination&quot;,</span><br><span class="line">                &#x2F;&#x2F;     clickable: true,</span><br><span class="line">                &#x2F;&#x2F; &#125;,</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure><h4 id="使用文档API"><a href="#使用文档API" class="headerlink" title="使用文档API"></a>使用文档API</h4><p><a href="https://www.swiper.com.cn/api/index.html" target="_blank" rel="noopener">使用文档API</a></p><h4 id="使用swiper遇到的坑"><a href="#使用swiper遇到的坑" class="headerlink" title="使用swiper遇到的坑"></a>使用swiper遇到的坑</h4><p>不同的版本调用不用api，巨坑！<br>一定要注意版本！一定要注意版本！！一定要注意版本！！！</p><h3 id="html2canvas"><a href="#html2canvas" class="headerlink" title="html2canvas"></a>html2canvas</h3><ol><li>图片跨域——前后端都需设置crossorigin，允许跨域</li><li>css样式导致ios手机报错不能生成图——某css中背景图未设置background-size</li><li>图片未加载完成就开始绘制导致失败——绘制放在所有图片onload后</li><li>安卓手机多次保存，有时保存的非绘制图（1.0.0-rc.7）</li><li>ios手机带3DTouch,长按出蓝色半透明遮罩出光标（1.0.0-rc.7）</li></ol><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://www.zhihu.com/question/265838834" target="_blank" rel="noopener">浏览器端网页截图方案详解</a><br><a href="https://www.jianshu.com/p/e3a59a9fb817" target="_blank" rel="noopener">html2canvas踩坑记</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2020年的最后一天，就用来记录下这些日子来使用npm包遇到的坑。给自己加深下记忆。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
