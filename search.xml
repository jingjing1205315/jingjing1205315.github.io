<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>跨域</title>
      <link href="/2020/09/10/%E8%B7%A8%E5%9F%9F/"/>
      <url>/2020/09/10/%E8%B7%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<p>跨域的几种方式</p><a id="more"></a><p>同源：<br>协议相同<br>域名相同<br>端口相同</p><p>非同源限制<br>LocalStore 和 IndexDB 无法读取。这两个显然是不能读取的，但是 cookie 有点不一样，放在后面单独说明<br>DOM 无法获取,比如如法在页面 A 中通过 iframe 获取异源页面 B 的 DOM<br>AJAX 请求无法读取（可以发送请求，但是无法读取到请求结果。比如在页面 A 中请求异源接口 B，请求会正常发出处理，但是在页面 A 中无法获取请求结果，除非响应头 Access-Control-Allow-Headers 中允许了页面 A 的源，这样就能读取到结果）<br>  但是这里有个例外，所有带“src”属性的标签都可以跨域加载资源，不受同源策略的限制，这样你应该可以想到一个比较古老的跨域解决方案（JSONP）,同时这个特性也会被用作 CSRF 攻击。</p><h3 id="1-JS设置document-domain实现跨域—iframe-DOM操作"><a href="#1-JS设置document-domain实现跨域—iframe-DOM操作" class="headerlink" title="1 JS设置document.domain实现跨域—iframe DOM操作"></a>1 JS设置document.domain实现跨域—iframe DOM操作</h3><p>这两个域名必须属于同一个基础域名!而且所用的协议，端口都要一致，否则无法利用document.domain进行跨域.<br>Javascript出于对安全性的考虑，而禁止两个或者多个不同域的页面进行互相操作。<br>相同域的页面在相互操作的时候不会有任何问题。</p><p>有另一种情况，两个子域名：<br>aaa.xxx.com<br>bbb.xxx.com<br>aaa里的一个网页(a.html)引入了bbb 里的一个网页(b.html)<br>通过Javascript，将两个页面的domain改成一样的，<br>需要在a.html里与b.html里都加入：</p><p>代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.domain &#x3D; &quot;***.net&quot;</span><br></pre></td></tr></table></figure><p>这样这两个页面就可以互相操作了。也就是实现了同一基础域名之间的”跨域”。</p><h3 id="http-请求跨域"><a href="#http-请求跨域" class="headerlink" title="http 请求跨域"></a>http 请求跨域</h3><p> 在前端开发中经常会遇到跨域的问题，比如前后端分离中前后端部署在不同的端口上，或者在前端页面中需要向另外一个服务请求数据，这些都会被跨域所阻挡。<br>目前主要有以下几种办法解决跨域问题：</p><p>1、关闭浏览器同源检查(方法：<a href="https://blog.csdn.net/cgs1999/article/details/90751757" target="_blank" rel="noopener">https://blog.csdn.net/cgs1999/article/details/90751757</a>)<br>  这个太暴力，也太不安全了，不用考虑。</p><p>2、jsonp 实现跨域请求<br>  前面说过了浏览器对于带 src 属性的标签都可以跨域的。因此 jsonp 的实现流失利用了这个特性，在页面中动态插入一个<script>标签,然后他的 src 属性就是接口调用地址，这样就能访问过去了，然后再讲返回内容特殊处理成立即执行的函数，这样就看起像进行了一次跨域请求。之所以不推荐这种方式，主要有以下两个原因：</p><p>1) 实现复杂,且需要前后台同时修改才能实现<br>2)只能进行 get 请求</p><p>3、服务器设置运行跨域<br>  这种方法只需要后台做处理便能实现跨域，前面说的 http 跨域请求是能够发出去的，只是不能接收，那我们只要在响应头Access-Control-Allow-Headers中加入允许请求的地址即可，以,分隔，同时*代表所有地址都允许。比如：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Headers:http:&#x2F;&#x2F;localhost:8081,http:&#x2F;&#x2F;localhost:8082</span><br></pre></td></tr></table></figure><p>本方法是较为常用的一种跨域办法,只需简单修改服务端代码即可。</p><p>4、请求代理<br>  这也是非常常用的一种跨域方法。跨域限制只是浏览器限制，服务端并没有这个概念，因此我们在前端还是请求同域地址，然后在服务端做一个代理，将请求转发到真正的 ip 和端口上。通常使用 nginx 实现端口转发，比如下面一段 nginx 配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    # &#x2F;test1&#x2F;abc 转发到 http:&#x2F;&#x2F;a.com:8011&#x2F;abc</span><br><span class="line">    location &#x2F;test1&#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;a.com:8011&#x2F;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # &#x2F;test2&#x2F;abc 转发到 http:&#x2F;&#x2F;b.com:8011&#x2F;main&#x2F;abc</span><br><span class="line">    location &#x2F;test2&#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;b.com:8011&#x2F;main&#x2F;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # &#x2F;test3&#x2F;abc 转发到 http:&#x2F;&#x2F;c.com:8011&#x2F;test3&#x2F;abc</span><br><span class="line">    location &#x2F;test3&#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;c.com:8081;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="cookie-同源策略-仅限制域名"><a href="#cookie-同源策略-仅限制域名" class="headerlink" title="cookie 同源策略(仅限制域名)"></a>cookie 同源策略(仅限制域名)</h3><p>cookie 的同源策略是通过“Domain“和“path“两个部分来共同确认一个 cookie 在哪些页面上可用。</p><p>1、设置cookie的domaim和path<br>Domain确定这个 cookie 所属的域名，不能带端口或协议。因此 cookie 便可在不同端口/不同协议下共享,只要域名相同。有一个例外是父子域名间也能共享 cookie，只需将 Domain 设置为.父域名或者父域名（不带.）。<strong><em>domain设为主域名即baidu.com或者.baidu.com,那么cookie在任何百度的子域名下都可共享</em></strong> <a href="http://www.baidu.com仅是baidu.com的子域名，同样受限制。Í" target="_blank" rel="noopener">www.baidu.com仅是baidu.com的子域名，同样受限制。Í</a></p><p>  path就简单多了，通过 Domain 确定哪些域名可以共享 cookie，然后在通过path来确定 cookie 在哪些路径下可用。使用/表示所有路径都可共享。</p><p>具体如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Domain : example,path : &#x2F;a可获取 cookie:http:&#x2F;&#x2F;example:8081&#x2F;a,https:&#x2F;&#x2F;example:8081&#x2F;a</span><br><span class="line">Domain : example,path : &#x2F;可获取 cookie:http:&#x2F;&#x2F;example:8081&#x2F;a,https:&#x2F;&#x2F;example:8081&#x2F;a , http:&#x2F;&#x2F;example:12&#x2F;abcd</span><br><span class="line">Domain : .example,path : &#x2F;a可获取 cookie:http:&#x2F;&#x2F;example:8081&#x2F;a , https:&#x2F;&#x2F;localhost:8081&#x2F;a , http:&#x2F;&#x2F;test.example:889&#x2F;a</span><br><span class="line"></span><br><span class="line">注意:在跨域请求中，即时目标地址有 cookie 且发起请求的页面也能读取到该 cookie，浏览器也不会将 cookie 自动设置到该跨域请求中。比如在http:&#x2F;&#x2F;localhost:8082&#x2F;a页面中请求http:&#x2F;&#x2F;localhost:8081&#x2F;abc,这两个地址下拥有共享cookie，http请求也不会携带cookie。</span><br></pre></td></tr></table></figure><p>2、设置反向代理，使两个页面位于同一domain和path下。<br>3、jsonp方法<br>文件a/b处于相同域下，不同路径，设置的cookie在b路径下。<br>a.html访问b路径下的jsonp文件。此jsonp文件可以访问b下的cookie。同时可以设置cookie的路径为a。这样a就可以拿到b下的cookie。</p><p>猜测（未经实验）：a通过jsonp请求不用b域上的文件。那个文件能拿到b域上的cookie。回传给a，就可以试想cookie的跨域访问<br>4、nodejs superagent（可参考下方参考文章）<br>5、同一域下，不同工程之间cookie携带<br>（1）. 使用jsonp格式发送<br>（2）. ajax请求中加上字段 xhrFields: {withCredentials: true}，这样可以携带上cookie。这样后台配置就出现了限制，需要配置一个解决跨域访问的过滤器，而且header字段Access-Control-Allow-Origin的值不能为"*", 必须是一个确定的域。</p><h3 id="image跨域"><a href="#image跨域" class="headerlink" title="image跨域"></a>image跨域</h3><p>在页面上src加载图片资源无跨域问题。但canvas绘图时，加载的资源图和当前域名不使同一域名时，就会加载不出来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">img.src&#x3D;&quot;shareImages&#x2F;cz.jpg&quot;;</span><br><span class="line">        img2.src&#x3D;app25.newLevelImage;&#x2F;&#x2F;图片的路径</span><br><span class="line">&#x2F;&#x2F; 解决图片的跨域问题</span><br><span class="line">image.setAttribute(&quot;crossOrigin&quot;,&#39;anonymous&#39;)    &#x2F;&#x2F; 添加改代码， 防止跨域</span><br><span class="line">  image.src &#x3D;  item.src + &#39;?v&#x3D;3&#39; ;   &#x2F;&#x2F;添加后缀， 防止缓存；</span><br></pre></td></tr></table></figure><p>cnd源站添加header头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add_header Access-Control-Allow-Origin *;</span><br><span class="line">add_header Access-Control-Allow-Headers X-Requested-With;</span><br><span class="line">add_header Access-Control-Allow-Methods Get, Post, Options;</span><br></pre></td></tr></table></figure><p>第三方图片：<br>把第三方图片通过php处理，然后直接输出图片，就可以使用，需要注意的是在请求后台的时候需要用encodeURIComponent转码，不然碰到图片链接里带%号的就呵呵了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let url &#x3D; encodeURIComponent(&#39;图片地址.jpg&#39;)</span><br><span class="line"></span><br><span class="line">this.toDataURL(&#96;后台接口地址.php?url&#x3D;$&#123;url&#125;&#96;, function(dataUrl) &#123;</span><br><span class="line"></span><br><span class="line">      self.dataUrl &#x3D; dataUrl</span><br><span class="line"></span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>参考地址 <a href="https://www.jianshu.com/p/f1d0b107e912" target="_blank" rel="noopener">https://www.jianshu.com/p/f1d0b107e912</a><br>参考地址 <a href="https://www.jianshu.com/p/18823f15b31d" target="_blank" rel="noopener">https://www.jianshu.com/p/18823f15b31d</a></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://www.cnblogs.com/lonelyshy/p/10179762.html" target="_blank" rel="noopener">https://www.cnblogs.com/lonelyshy/p/10179762.html</a><br><a href="https://www.cnblogs.com/wuyoucao/p/11075435.html" target="_blank" rel="noopener">https://www.cnblogs.com/wuyoucao/p/11075435.html</a></p><p><a href="https://www.cnblogs.com/hujunzheng/p/5744755.html" target="_blank" rel="noopener">https://www.cnblogs.com/hujunzheng/p/5744755.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>静态资源另起域名的意义</title>
      <link href="/2020/09/09/%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%8F%A6%E8%B5%B7%E5%9F%9F%E5%90%8D%E7%9A%84%E6%84%8F%E4%B9%89/"/>
      <url>/2020/09/09/%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%8F%A6%E8%B5%B7%E5%9F%9F%E5%90%8D%E7%9A%84%E6%84%8F%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IOS滑动引起卡死现象解决</title>
      <link href="/2020/09/08/IOS%20%E6%BB%91%E5%8A%A8%E5%BC%95%E8%B5%B7%E5%8D%A1%E6%AD%BB%E7%8E%B0%E8%B1%A1%E8%A7%A3%E5%86%B3/"/>
      <url>/2020/09/08/IOS%20%E6%BB%91%E5%8A%A8%E5%BC%95%E8%B5%B7%E5%8D%A1%E6%AD%BB%E7%8E%B0%E8%B1%A1%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>-webkit-overflow-scrolling:touch 使滑动更加顺滑，但他又会引起一系列问题。</p><p>问题一：滚动到底部上划触发加载更多，触发IOS回弹，页面卡死。</p><p>问题二：点击链接，进入页面，当没有渲染出内容时，手指就不停的往上滑动，内容被渲染出来，手指是一直保持滑动的，但却没有使内容往上移动。</p><p>问题三：触发回弹时，header和footer要固定在页面的上部和下部，不能被遮挡。</p><a id="more"></a><p>困扰我已久，终于有个说的明白的人了！建议先阅读<a href="https://www.cnblogs.com/xiahj/p/8036419.html" target="_blank" rel="noopener">深入研究-webkit-overflow-scrolling:touch及ios滚动</a>，如果未能解决您的问题，接着往下看！</p><h3 id="问题三解决：—回弹时header和footer不会被遮挡"><a href="#问题三解决：—回弹时header和footer不会被遮挡" class="headerlink" title="问题三解决：—回弹时header和footer不会被遮挡"></a>问题三解决：—回弹时header和footer不会被遮挡</h3><p>header和footer要和滚动元素位于同一级，main设置滚动，并不是滚动body</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">html, body &#123;</span><br><span class="line">   height: 100%;</span><br><span class="line">  &#125;</span><br><span class="line">  main &#123;</span><br><span class="line">      padding: 50px 0;</span><br><span class="line">      height: 100%;</span><br><span class="line">      overflow-y: scroll;</span><br><span class="line">      -webkit-overflow-scrolling: touch;</span><br><span class="line">  &#125;</span><br><span class="line">  header&#123;</span><br><span class="line">      position:fixed;</span><br><span class="line">      ......</span><br><span class="line">  &#125;</span><br><span class="line">  footer&#123;</span><br><span class="line">      position:fixed;</span><br><span class="line">      ......</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="问题二解决："><a href="#问题二解决：" class="headerlink" title="问题二解决："></a>问题二解决：</h3><p>参考文章 <a href="https://www.cnblogs.com/xiahj/p/8036419.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiahj/p/8036419.html</a></p><p>尝试文中“3.2如果添加动态内容页面不能滚动，让子元素height+1“方法，能解决页面已经渲染出一屏内容，下面的内容加载慢，手指就开始上划，而出现的卡死。</p><p>但此情形和问题二还不同，猜测可能是由于所设置的“子元素height+1”子元素都是动态添加原因。</p><p>通过测试得知，-webkit-overflow-scrolling设置为auto时，没有回弹，也不会阻碍渲染后页面向上滑动。只有设置了touch才会有这个现象。</p><p>因此我的解决方案是页面loading空白时，-webkit-overflow-scrolling设置为auto，当页面渲染完后，设置-webkit-overflow-scrolling为touch。</p><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><p>问题二和问题三解决后，问题一并未复现。能够很顺利的上划加载下一页。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p>夏大师 <a href="https://www.cnblogs.com/xiahj/p/8036419.html" target="_blank" rel="noopener">深入研究-webkit-overflow-scrolling:touch及ios滚动</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Module的加载实现学习</title>
      <link href="/2020/07/20/Module%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%AE%9E%E7%8E%B0%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/07/20/Module%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%AE%9E%E7%8E%B0%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>原文 <a href="https://es6.ruanyifeng.com/#docs/module-loader" target="_blank" rel="noopener">ES6标准入门</a></p><h3 id="1-浏览器加载"><a href="#1-浏览器加载" class="headerlink" title="1 浏览器加载"></a>1 浏览器加载</h3><ol><li>script标签多了type=”module”属性可以加载es6的Module.同异步模式是defer。<br>script默认是同步，defer指异步下载，渲染完执行（DOM 结构完全生成，以及其他脚本执行完成）。async指异步下载，下载完终断渲染立即执行。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 外联</span><br><span class="line">&lt;script type&#x3D;&quot;module&quot; src&#x3D;&quot;.&#x2F;foo.js&quot;&gt;</span><br><span class="line">    </span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 内嵌   </span><br><span class="line">&lt;script type&#x3D;&quot;module&quot;&gt;</span><br><span class="line">    import $ from &quot;.&#x2F;jquery&#x2F;src&#x2F;jquery.js&quot;;</span><br><span class="line">    $(&#39;#message&#39;).text(&#39;Hi from jQuery!&#39;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="ES6-模块与-CommonJS-模块的差异"><a href="#ES6-模块与-CommonJS-模块的差异" class="headerlink" title="ES6 模块与 CommonJS 模块的差异"></a>ES6 模块与 CommonJS 模块的差异</h3><p>| — | — | —<br>|  | 输出值 | 值的生成 |<br>| — | — | — |<br>| commonJs | 值的拷贝 | 运行时 |<br>| ES6 | 值的引用 | 编译时 |</p><p><strong><em>值的拷贝</em></strong><br>commonJS模块一旦加载，生成的原始类型的的值就不会改变</p><p><strong><em>值的引用–只读</em></strong><br>脚本真正执行时，根据只读引用去拿值，值变，拿到的会跟着变。</p><h3 id="Node-js-加载"><a href="#Node-js-加载" class="headerlink" title="Node.js 加载"></a>Node.js 加载</h3><p>Node.js 要求 ES6 模块采用.mjs后缀文件名</p><p>*注意，ES6 模块与 CommonJS 模块尽量不要混用。require命令不能加载.mjs文件，会报错，只有import命令才可以加载.mjs文件。反过来，.mjs文件里面也不能使用require命令，必须使用import。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;type&quot;: &quot;module&quot;, &#x2F;&#x2F; module时ES6的模块不用.mjs后缀; commonJs时加载commonJS模块不用.cjs后缀。默认commonJS</span><br><span class="line">  &quot;main&quot;: &quot;.&#x2F;src&#x2F;index.js&quot;, &#x2F;&#x2F; 入口文件--优先级低于exports</span><br><span class="line">  &quot;exports&quot;: &#123; 只有支持 ES6 的 Node.js 才认识</span><br><span class="line">   &quot;.&quot;: &quot;.&#x2F;main.js&quot;, &#x2F;&#x2F; main的别名，优先于main</span><br><span class="line">   &quot;.&quot;: &#123; &#x2F;&#x2F; 为 ES6 模块和 CommonJS 指定不同的入口</span><br><span class="line">      &quot;require&quot;: &quot;.&#x2F;main.cjs&quot;,</span><br><span class="line">      &quot;default&quot;: &quot;.&#x2F;main.js&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    &quot;.&#x2F;submodule&quot;: &quot;.&#x2F;src&#x2F;submodule.js&quot; &#x2F;&#x2F; 子目录</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import feature from &#39;es-module-package&#x2F;features&#x2F;x.js&#39;;</span><br></pre></td></tr></table></figure><h4 id="ES6-模块加载-CommonJS-模块"><a href="#ES6-模块加载-CommonJS-模块" class="headerlink" title="ES6 模块加载 CommonJS 模块"></a>ES6 模块加载 CommonJS 模块</h4><p>*注意，import命令加载 CommonJS 模块，只能整体加载，不能只加载单一的输出项。<br>还有一种变通的加载方法，就是使用 Node.js 内置的module.createRequire()方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; cjs.cjs</span><br><span class="line">module.exports &#x3D; &#39;cjs&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; esm.mjs</span><br><span class="line">import &#123; createRequire &#125; from &#39;module&#39;;</span><br><span class="line"></span><br><span class="line">const require &#x3D; createRequire(import.meta.url);</span><br><span class="line"></span><br><span class="line">const cjs &#x3D; require(&#39;.&#x2F;cjs.cjs&#39;);</span><br><span class="line">cjs &#x3D;&#x3D;&#x3D; &#39;cjs&#39;; &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><h4 id="CommonJS-模块加载-ES6-模块"><a href="#CommonJS-模块加载-ES6-模块" class="headerlink" title="CommonJS 模块加载 ES6 模块"></a>CommonJS 模块加载 ES6 模块</h4><p>只能使用import()这个方法加载。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(async () &#x3D;&gt; &#123;</span><br><span class="line">  await import(&#39;.&#x2F;my-app.mjs&#39;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h4 id="ES6-模块应该是通用的，同一个模块不用修改，就可以用在浏览器环境和服务器环境。"><a href="#ES6-模块应该是通用的，同一个模块不用修改，就可以用在浏览器环境和服务器环境。" class="headerlink" title="ES6 模块应该是通用的，同一个模块不用修改，就可以用在浏览器环境和服务器环境。"></a>ES6 模块应该是通用的，同一个模块不用修改，就可以用在浏览器环境和服务器环境。</h4><p>不要使用<br>this<br>arguments<br>require<br>module<br>exports<br>__filename<br>__dirname</p><h3 id="循环加载"><a href="#循环加载" class="headerlink" title="循环加载"></a>循环加载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; a.js</span><br><span class="line">var b &#x3D; require(&#39;b&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; b.js</span><br><span class="line">var a &#x3D; require(&#39;a&#39;);</span><br></pre></td></tr></table></figure><h4 id="commonJS"><a href="#commonJS" class="headerlink" title="commonJS"></a>commonJS</h4><p>只输出已经执行的部分，还未执行的部分不会输出。<br>b.js接着往下执行，等到全部执行完毕，再把执行权交还给a.js。于是，a.js接着往下执行，直到执行完毕。</p><h4 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h4><p>需要开发者自己保证，真正取值的时候能够取到值。</p><p>执行a.js, a中引用b.js，b输入a的接口，这时认为a的接口是存在的，接着执行a的接口。如果a并没有执行到此接口，则会报错。解决方式是将a的此接口提前。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网站性能优化</title>
      <link href="/2020/07/14/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2020/07/14/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>从图片、css、js、html、网络、渲染、用户体验、缓存多维度优化网站</p><a id="more"></a><p>转载自视频</p><h3 id="文件放在合适的位置。"><a href="#文件放在合适的位置。" class="headerlink" title="文件放在合适的位置。"></a>文件放在合适的位置。</h3><p><strong>*Css样式文件链接尽量放在头部</strong><br>Css加载不会阻碍DOM tree解析，但是会阻塞到DOM tree渲染，也会阻塞后面js执行。任何body元素之前，可以确保在文档部分中解析了所有的css样式（内联和外联），从而减少了浏览器必须重排文档的次数，如果放置页面底部，就要等待最后一个css文件下载完成，此时会出现“白屏”影响用户体验。</p><p><strong>*Js引用放在html底部</strong><br>防止js的加载、解析、执行对阻塞页面后续元素的正常渲染。</p><h3 id="精简html代码，"><a href="#精简html代码，" class="headerlink" title="精简html代码，"></a>精简html代码，</h3><p><strong>减少html的嵌套</strong><br><strong>减少当节点数</strong><br><strong>减少无语意代码。如消除浮动。</strong><br><strong>删除http或者https，如果url的协议头和当前页面的协议头一致的，或者此url在多个协议里头都是可用的，则可以考虑删除协议头</strong><br><strong>删除多余的空格，换行符、缩进和不必要的注释</strong><br><strong>省略冗余标签和属性</strong><br><strong>使用相对路径的url</strong></p><h3 id="增强用户体验"><a href="#增强用户体验" class="headerlink" title="增强用户体验"></a>增强用户体验</h3><p><strong>设置favicon.ico</strong><br>网站如果不设置favicon.ico，控制台会报错，另外页面加载过程中也没有图标loading过程,同时也不利于记忆网站品牌，建议统一添加</p><p><strong>增加首屏必要的css和js</strong></p><p>页面如果需要等待所有的依赖解释和css加载完成才显示，则在渲染过程中，页面会一直显示空白，影响用户体验，建议增加首屏必要的css和js，比如页面框架背景图片或者loading图标,内联在html页面中，这样做首屏能快速显示出来，相对减少用户对页面加载等待过程.(比如新浪微博M站页面框架)</p><h3 id="提升css渲染性能"><a href="#提升css渲染性能" class="headerlink" title="提升css渲染性能"></a>提升css渲染性能</h3><p><strong>谨慎使用expensive属性</strong><br>如:nth-child伪类；position:fix的定位</p><p><strong>尽量减少样式层级数</strong></p><p>如div ul li span i{ color: blue;}</p><p><strong>尽量避免使用占用过多的CPU和内存的属性</strong></p><p>如text-indent: -99999 px</p><p><strong>尽量避免使用或电量大的属性</strong></p><p>如CSS3 3D transforms、 CSS3 transitions、 opacity</p><h3 id="合理使用CSS选择器"><a href="#合理使用CSS选择器" class="headerlink" title="合理使用CSS选择器"></a>合理使用CSS选择器</h3><p><strong>尽量避免使用CS表达式</strong><br>background-color: expression((new data()).getHours()/2?’#fff’:’#000’);</p><p><strong>尽量避免使用通配选择器</strong><br>body &gt; a{ font-weight:blod;}</p><p><strong>尽量避免类正则的属性选择器</strong><br>*=，|=， ^=, &amp;=</p><h3 id="精简css代码"><a href="#精简css代码" class="headerlink" title="精简css代码"></a>精简css代码</h3><p><strong>使用缩写语句</strong><br><strong>删除不必要的零</strong><br><strong>删除不必要的单位，如px</strong><br><strong>删除过多分好</strong><br><strong>删除空格和注释</strong><br><strong>尽量减少样式表的大小</strong></p><h3 id="合理使用Web-Fonts"><a href="#合理使用Web-Fonts" class="headerlink" title="合理使用Web Fonts"></a>合理使用Web Fonts</h3><p><strong>将字体部署在cdn上</strong><br><strong>将字体以base64形式保存在css中，并通过localStorage进行缓存</strong><br><strong>谷歌字体库，因为某些不可抗拒原因，应该使用国内托管服务</strong></p><h3 id="Css动画优化"><a href="#Css动画优化" class="headerlink" title="Css动画优化"></a>Css动画优化</h3><p><strong>尽量避免同时动画</strong><br><strong>延迟动画初始化</strong><br><strong>结合svg</strong></p><h3 id="JS优化总体原则"><a href="#JS优化总体原则" class="headerlink" title="JS优化总体原则"></a>JS优化总体原则</h3><p><strong>当需要时才优</strong><br><strong>考虑可维护性</strong></p><h3 id="Js变量和函数优化"><a href="#Js变量和函数优化" class="headerlink" title="Js变量和函数优化"></a>Js变量和函数优化</h3><p><strong>尽量使用ID选择器</strong><br><strong>尽量避免使用eval</strong><br><strong>Js函数尽可能保持简洁</strong><br><strong>使用事件节流函数</strong><br><strong>使用事件委托</strong></p><h3 id="提升js文件加载性能"><a href="#提升js文件加载性能" class="headerlink" title="提升js文件加载性能"></a>提升js文件加载性能</h3><p><strong>加载元素的顺序，css文件放在&lt;head&gt;里，js文件放在&lt;body&gt;里</strong></p><h3 id="Js动画优化"><a href="#Js动画优化" class="headerlink" title="Js动画优化"></a>Js动画优化</h3><p><strong>尽量避免添加大量js动画</strong><br><strong>尽量使用css3动画</strong><br><strong>尽量使用Canvas动画</strong><br><strong>合理使用RequestAnimationFrame动画代替setTimeout(callback)、setInterval(callback)无法保证callback回调函数的执行时机</strong> </p><h3 id="合理使用缓存"><a href="#合理使用缓存" class="headerlink" title="合理使用缓存"></a>合理使用缓存</h3><p><strong>合理缓存DOM对象</strong><br><strong>缓存列表长度</strong><br><strong>使用可缓存的AJAX</strong></p><h2 id="9-JavaScript：如何对JavaScript进行缓存优化"><a href="#9-JavaScript：如何对JavaScript进行缓存优化" class="headerlink" title="9 JavaScript：如何对JavaScript进行缓存优化"></a>9 JavaScript：如何对JavaScript进行缓存优化</h2><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>通常有浏览器存储，然后将cookie与每个后续请求一起发送到同一服务器。收到http请求时，服务器可以发送带有cookie的header头，可以给Cookie设置有效时间。</p><p>应用于：</p><ul><li>会话管理：登录名、购物车商品、游戏得分或服务器应要记录的其他任何内容</li><li>个性化：用户首选项、主题或其他设置</li><li>跟踪：记录和分析用户行为，比如埋点</li></ul><h3 id="Session-storage"><a href="#Session-storage" class="headerlink" title="Session storage"></a>Session storage</h3><p>建立一个本地存储的键/值对<br>应用于：页面应用页面之间传值</p><h3 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h3><p>索引数据库<br>应用于:</p><ul><li>客户端存储大量结构化数据</li><li>没有网络连接的情况下使用(比如Google DOC、石墨文档）</li><li>将冗余、很少修改、但经常访问的数据，以避免随时从服务器获取数据</li></ul><h3 id="Local-storage"><a href="#Local-storage" class="headerlink" title="Local storage"></a>Local storage</h3><p>本地存储<br>应用于：</p><ul><li>缓存静态文件内容js/css(比如百度M站首页)</li><li>缓存不常变更的API接口数据</li><li>储存地理位置信息</li><li>浏览在页面的具体位置</li></ul><h3 id="JS模块化加载方案和选型"><a href="#JS模块化加载方案和选型" class="headerlink" title="JS模块化加载方案和选型"></a>JS模块化加载方案和选型</h3><p><strong>commonJS</strong></p><ul><li>旨在web浏览器之外为JavaScript建立模块生态系统。</li><li>Node.js 模块化方案受commonJS</li><li>*Amd(Asynchronous Module Definition)(异步模块定义)规范</li><li>RequireJS模块化加载器:基于AMD API实现</li><li>*CMD(Common Module Definition)(通用模块定义)规范</li><li>SeaJS模块加载器:遵循CMD API的编写</li><li><em>ES6 import*</em></li></ul><h3 id="Css"><a href="#Css" class="headerlink" title="Css"></a>Css</h3><ul><li>避免过多样式嵌套</li><li>避免使用css表达式</li><li>使用绝对定位,可以让动画元素脱离文档流</li><li>避免使用table布局</li><li>尽量不使用float布局</li><li>图片最好设置好width和height</li><li>尽量简化浏览器不必要的任务，减少页面重新布局</li><li>使用viewpoint设置屏幕缩放级别</li><li>避免频繁设置样式，最好把新style属性设置完成后,进行一次性更改</li><li>避免使用引流引起回流/重绘的属性，最好把相应变量缓存起来</li></ul><p>JS<br><strong>最小化回流和重排</strong></p><ul><li>为了减少回流发生次数，避免频繁或操作DOM,可以合并多次对DOM修改，然后一次性批量处理</li><li><em>控制绘制过程和绘制区域*</em></li><li>绘制过程开销比较大的属性设置应该尽量避免减少使用</li><li>减少绘制区域范围</li></ul><h2 id="12-DOM编程优化：怎样控制DOM大小并简化DOM操作"><a href="#12-DOM编程优化：怎样控制DOM大小并简化DOM操作" class="headerlink" title="12 DOM编程优化：怎样控制DOM大小并简化DOM操作"></a>12 DOM编程优化：怎样控制DOM大小并简化DOM操作</h2><h3 id="控制DOM大小"><a href="#控制DOM大小" class="headerlink" title="控制DOM大小"></a>控制DOM大小</h3><ul><li><p>众所周知，页面交互卡顿和流畅度很大一部分原因就是页面有大量的DOM元素，想象一下，从一个上万个节点的DOM Tree上，使用querySelectorAll或者getElementByTagName方法查找某一个节点,是非常耗时的.另外元素绑定事件、事件冒泡或事件捕获的执行也会相对耗时</p></li><li><p>通常控制DOM大小的技巧包括：</p><ul><li>合理业务逻辑</li><li>延迟加载即将呈现的内容</li></ul></li></ul><h3 id="简化DOM操作"><a href="#简化DOM操作" class="headerlink" title="简化DOM操作"></a>简化DOM操作</h3><ul><li>对DOM节点的操作处理后统一插入到DOM Tree中。</li><li>可以使用fragment，尽量不在页面DOM Tree里直接操作.</li><li>现在流行的框架Angular、react、 vue，都在使用虚拟DOM技术，通过diff算法简化和减少DOM操作</li></ul><h2 id="13静态文件：有哪些常用的压缩工具？"><a href="#13静态文件：有哪些常用的压缩工具？" class="headerlink" title="13静态文件：有哪些常用的压缩工具？"></a>13静态文件：有哪些常用的压缩工具？</h2><h3 id="静态文件压缩工具介绍"><a href="#静态文件压缩工具介绍" class="headerlink" title="静态文件压缩工具介绍"></a>静态文件压缩工具介绍</h3><ul><li>html压缩工具，<ul><li>html-minifier</li></ul></li><li>CSS压缩工具<ul><li>clean-css</li></ul></li><li>JS压缩工具<ul><li>uglify-js</li><li>使用方法：uglifyjs in.js -o out.js</li></ul></li></ul><h3 id="静态文件打包方案"><a href="#静态文件打包方案" class="headerlink" title="静态文件打包方案"></a>静态文件打包方案</h3><ul><li>公共组件拆分</li><li>压缩:JS/CSS/图片</li><li>合并:JS/CSS文件合并, CSS Sprite</li><li>Combo: JS/CSS文件 Combo <a href="http://cdn.com/??a.js,b.js内容" target="_blank" rel="noopener">http://cdn.com/??a.js,b.js内容</a></li></ul><h2 id="静态文件-版本号更新-你应该遵循哪些策略"><a href="#静态文件-版本号更新-你应该遵循哪些策略" class="headerlink" title="静态文件:版本号更新,你应该遵循哪些策略"></a>静态文件:版本号更新,你应该遵循哪些策略</h2><h3 id="静态文件版本号更新策略"><a href="#静态文件版本号更新策略" class="headerlink" title="静态文件版本号更新策略"></a>静态文件版本号更新策略</h3><ul><li><p>缓存更新</p><ul><li>CDN或ng后台刷新文件路径，更新文件header头</li></ul></li><li><p>文件name.v1-v100.js</p><ul><li>大功能迭代每次新增一个大版本，比如由v1到v2</li><li>小功能迭代新增加0.0.1或者0.1.0，比如从v1.0.0至v1.0.1</li><li>年末ng统一配置所有版本302至最新版</li></ul></li><li><p>时间戳.文件name.js</p><ul><li>以每次上线时间点做差异</li></ul></li><li><p>文件hash.文件name.js</p><ul><li>以文件内容hash值做key，每次上线,文件路径不一致</li></ul></li></ul><p><img src="" alt=""></p><h3 id="前端构建工具介绍和选型建议"><a href="#前端构建工具介绍和选型建议" class="headerlink" title="前端构建工具介绍和选型建议"></a>前端构建工具介绍和选型建议</h3><ul><li>Grunt<ul><li>最早，一个项目需要定制多个小任务和引用多个插件（质量参差不齐）</li></ul></li><li>Gulp<ul><li>通过流（Stream）来简化多个任务间的配置和输出，配置代码相对较少</li></ul></li><li>Webpack<ul><li>预编译，中间文件在内存中处理，支持多种模块化，配置相对很简单</li></ul></li><li>FIS</li><li>JDF</li></ul><h3 id="webpack打包优化"><a href="#webpack打包优化" class="headerlink" title="webpack打包优化"></a>webpack打包优化</h3><ul><li>定位体积大的模块</li><li>删除没有使用的依赖</li><li>生产模式进行公共依赖包抽离</li><li>开发模式进行DLL&amp;DllReference方案优化</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo和travis建github.io个人博客</title>
      <link href="/2020/07/07/hexo%E5%92%8Ctravis%E5%BB%BAgithub.io%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/07/07/hexo%E5%92%8Ctravis%E5%BB%BAgithub.io%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>hexo和travis建github.io个人博客</p><a id="more"></a><h2 id="建name-github-io-仓库-开源"><a href="#建name-github-io-仓库-开源" class="headerlink" title="建name.github.io 仓库(开源)"></a>建name.github.io 仓库(开源)</h2><p>可以自行百度，相关文章很多</p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方文档</a> </p><h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><p>Node.js (Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)<br>Git</p><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><h3 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">title: April的个人小站</span><br><span class="line">subtitle: &#39;&#39;</span><br><span class="line">description: &#39;&#39;</span><br><span class="line">keywords:</span><br><span class="line">author: April</span><br><span class="line">language: zh_CN</span><br><span class="line">timezone: &#39;&#39;</span><br><span class="line"></span><br><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &#39;http:&#x2F;&#x2F;yoursite.com&#x2F;child&#39; and root as &#39;&#x2F;child&#x2F;&#39;</span><br><span class="line">url: http:&#x2F;&#x2F;yoursite.com</span><br><span class="line">root: &#x2F;</span><br><span class="line">permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: true # Set to false to remove trailing &#39;index.html&#39; from permalinks</span><br><span class="line">  trailing_html: true # Set to false to remove trailing &#39;.html&#39; from permalinks</span><br><span class="line"></span><br><span class="line"># Directory</span><br><span class="line">source_dir: source</span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads&#x2F;code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line"></span><br><span class="line"># Writing</span><br><span class="line">new_post_name: :title.md # File name of new posts</span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">external_link:</span><br><span class="line">  enable: true # Open external links in new tab</span><br><span class="line">  field: site # Apply to the whole site</span><br><span class="line">  exclude: &#39;&#39;</span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: false</span><br><span class="line">post_asset_folder: false</span><br><span class="line">relative_link: false</span><br><span class="line">future: true</span><br><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace: &#39;&#39;</span><br><span class="line">  wrap: true</span><br><span class="line">  hljs: false</span><br><span class="line"></span><br><span class="line"># Home page setting</span><br><span class="line"># path: Root path for your blogs index page. (default &#x3D; &#39;&#39;)</span><br><span class="line"># per_page: Posts displayed per page. (0 &#x3D; disable pagination)</span><br><span class="line"># order_by: Posts order. (Order by date descending by default)</span><br><span class="line">index_generator:</span><br><span class="line">  path: &#39;&#39;</span><br><span class="line">  per_page: 10</span><br><span class="line">  order_by: -date</span><br><span class="line"></span><br><span class="line"># Category &amp; Tag</span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"># Metadata elements</span><br><span class="line">## https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTML&#x2F;Element&#x2F;meta</span><br><span class="line">meta_generator: true</span><br><span class="line"></span><br><span class="line"># Date &#x2F; Time format</span><br><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http:&#x2F;&#x2F;momentjs.com&#x2F;docs&#x2F;#&#x2F;displaying&#x2F;format&#x2F;</span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line">## Use post&#39;s date for updated date unless set in front-matter</span><br><span class="line">use_date_for_updated: false</span><br><span class="line"></span><br><span class="line"># Pagination</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"># Include &#x2F; Exclude file(s)</span><br><span class="line">## include:&#x2F;exclude: options only apply to the &#39;source&#x2F;&#39; folder</span><br><span class="line">include:</span><br><span class="line">exclude:</span><br><span class="line">ignore:</span><br><span class="line"></span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class="line">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class="line">theme: next1</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;jingjing1205315&#x2F;jingjing1205315.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="安装travis-ci"><a href="#安装travis-ci" class="headerlink" title="安装travis-ci"></a>安装travis-ci</h2><p><a href="https://www.travis-ci.org/getting_started" target="_blank" rel="noopener">官网</a> 点点点就好了。</p><h2 id="将-Hexo-部署到-GitHub-Pages-配置io库时，官方文档有误"><a href="#将-Hexo-部署到-GitHub-Pages-配置io库时，官方文档有误" class="headerlink" title="将 Hexo 部署到 GitHub Pages(配置io库时，官方文档有误)"></a>将 Hexo 部署到 GitHub Pages(配置io库时，官方文档有误)</h2><p><a href="https://hexo.io/zh-cn/docs/github-pages" target="_blank" rel="noopener">官方文档</a><br>从第8条开始有误，第10条中后缀为io的库不可以修改GitHub Pages 的部署分支为 gh-pages。以至于我们需要将源代码提交到gh-pages，travis-ci将push的代码构建成html放到master。<br>这时就要修改以下几条<br>8. 在你的 Hexo 站点文件夹中新建一个 .travis.yml 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">sudo: false</span><br><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">  - 10 # use nodejs v10 LTS</span><br><span class="line">cache: npm</span><br><span class="line">before_install:               # install 阶段之前执行</span><br><span class="line">  - npm install -g hexo-cli   # 全局安装 Hexo 命令行工具</span><br><span class="line"></span><br><span class="line">install:                      # 在安装项目环境阶段需要运行的命令，一条一行，类似的还有 before_install</span><br><span class="line">  - npm install               # 安装 package.json 中的依赖</span><br><span class="line"></span><br><span class="line">script:                       # 在构建阶段需要运行的命令，一条一行，类似的还有 before_script、after_script</span><br><span class="line">  - hexo clean</span><br><span class="line">  - hexo generate             # Hexo 常规命令，执行清理和生成</span><br><span class="line"></span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">    - gh-pages # build gh-pages branch only</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  provider: pages</span><br><span class="line">  skip-cleanup: true</span><br><span class="line">  github-token: $GH_TOKEN</span><br><span class="line">  keep-history: true</span><br><span class="line">  on:</span><br><span class="line">    branch: gh-pages</span><br><span class="line">  local-dir: public</span><br><span class="line">  target-branch: master</span><br></pre></td></tr></table></figure><ol start="9"><li>将 .travis.yml 推送到 repository 中的gh-pages分支，Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 master 分支下<br><u>10. 在 GitHub 中前往你的 repository 的设置页面，修改 GitHub Pages 的部署分支为 gh-pages。</u> (非io仓库可以)</li><li>前往 https://&lt;你的 GitHub 用户名&gt;.github.io 查看你的站点是否可以访问。这可能需要一些时间。</li></ol><h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><h3 id="给博客换主题"><a href="#给博客换主题" class="headerlink" title="给博客换主题"></a>给博客换主题</h3><p><a href="https://hexo.io/themes/" target="_blank" rel="noopener">官网</a>,下载自己喜欢的主题。以next主题为例。</p><p>将_config.yml中的theme设置成下载的主题，本地运行没有问题，但是push到gh—pages时，就会发现themes下的next文件夹一直是空的。这时因为next主题有自己的.git。形成了git的submodule。</p><p>删掉.git，push，还是空的。</p><p>然后……  给next文件夹改个名字，如next1，可以push了……</p><p>这时_config.yml中的theme需要设置为next1，push，构建成功！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># Include &#x2F; Exclude file(s)</span><br><span class="line">## include:&#x2F;exclude: options only apply to the &#39;source&#x2F;&#39; folder</span><br><span class="line">include:</span><br><span class="line">exclude:</span><br><span class="line">ignore:</span><br><span class="line"></span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class="line">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class="line">theme: next1 &#x2F;&#x2F; 下载的主题，要改个名字</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;jingjing1205315&#x2F;jingjing1205315.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Back-Forward cache</title>
      <link href="/2020/07/06/Back-Forward%20cache/"/>
      <url>/2020/07/06/Back-Forward%20cache/</url>
      
        <content type="html"><![CDATA[<p>往返缓存（Back/Forward cache，下文中简称bfcache）是浏览器为了在用户页面间执行前进后退操作时拥有更加流畅体验的一种策略。该策略具体表现为，当用户前往新页面时，将当前页面的浏览器DOM状态保存到bfcache中；当用户点击后退按钮的时候，将页面直接从bfcache中加载，节省了网络请求的时间。</p><a id="more"></a><p>往返缓存（Back/Forward cache，下文中简称bfcache）是浏览器为了在用户页面间执行前进后退操作时拥有更加流畅体验的一种策略。该策略具体表现为，当用户前往新页面时，将当前页面的浏览器DOM状态保存到bfcache中；当用户点击后退按钮的时候，将页面直接从bfcache中加载，节省了网络请求的时间。</p><p>比如：二级页面有用户操作行为导致的状态变更，我们希望回退时一级页面有相应的体现。这时希望浏览器不要展现缓存页面。</p><p><strong>解决方案：</strong>根据<a href="https://github.com/LeuisKen/leuisken.github.io/issues/6" target="_blank" rel="noopener">浏览器往返缓存（Back/Forward cache）问题的分析与解决</a>，尝试用worker，无效果。</p><p>回退会触发：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">window.addEventListener(&#39;pageshow&#39;, event &#x3D;&gt; &#123;</span><br><span class="line">  if (event.persisted) &#123;</span><br><span class="line">    window.location.reload();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样页面会重新加载，但缓存的页面会闪现一下。如果页面有load动画，动画在闪现的缓存页面也会执行。</p><p><strong>解决方案：</strong>首页进入页面，动画执行完，移除动画dom，这样回退的时候，在缓存的页面就不会有动画。</p><p><strong>完美方案：</strong>缓存页面不闪现。（未解决）</p>]]></content>
      
      
      <categories>
          
          <category> PHONE </category>
          
          <category> IOS </category>
          
          <category> JS </category>
          
          <category> ACCUMULATION </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 复杂判断的更优雅写法</title>
      <link href="/2020/07/05/JavaScript%20%E5%A4%8D%E6%9D%82%E5%88%A4%E6%96%AD%E7%9A%84%E6%9B%B4%E4%BC%98%E9%9B%85%E5%86%99%E6%B3%95/"/>
      <url>/2020/07/05/JavaScript%20%E5%A4%8D%E6%9D%82%E5%88%A4%E6%96%AD%E7%9A%84%E6%9B%B4%E4%BC%98%E9%9B%85%E5%86%99%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>我们编写js代码时经常遇到复杂逻辑判断的情况，通常大家可以用if/else或者switch来实现多个条件判断，但这样会有个问题，随着逻辑复杂度的增加，代码中的if/else/switch会变得越来越臃肿，越来越看不懂，那么如何更优雅的写判断逻辑，本文带你试一下。</p><a id="more"></a><p>转载在<a href="https://mp.weixin.qq.com/s/JkZZbWOesqWDVGkUh2lRvg" target="_blank" rel="noopener">JavaScript 复杂判断的更优雅写法</a></p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>我们编写js代码时经常遇到复杂逻辑判断的情况，通常大家可以用if/else或者switch来实现多个条件判断，但这样会有个问题，随着逻辑复杂度的增加，代码中的if/else/switch会变得越来越臃肿，越来越看不懂，那么如何更优雅的写判断逻辑，本文带你试一下。</p><h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><p>先看一段代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">     * 按钮点击事件</span><br><span class="line">     * @param &#123;number&#125; status 活动状态：1 开团进行中 2 开团失败 3 商品售罄 4 开团成功 5 系统取消</span><br><span class="line">     *&#x2F;const onButtonClick &#x3D; (status)&#x3D;&gt;&#123;</span><br><span class="line">      if(status &#x3D;&#x3D; 1)&#123;</span><br><span class="line">        sendLog(&#39;processing&#39;)</span><br><span class="line">        jumpTo(&#39;IndexPage&#39;)</span><br><span class="line">      &#125;elseif(status &#x3D;&#x3D; 2)&#123;</span><br><span class="line">        sendLog(&#39;fail&#39;)</span><br><span class="line">        jumpTo(&#39;FailPage&#39;)</span><br><span class="line">      &#125;elseif(status &#x3D;&#x3D; 3)&#123;</span><br><span class="line">        sendLog(&#39;fail&#39;)</span><br><span class="line">        jumpTo(&#39;FailPage&#39;)</span><br><span class="line">      &#125;elseif(status &#x3D;&#x3D; 4)&#123;</span><br><span class="line">        sendLog(&#39;success&#39;)</span><br><span class="line">        jumpTo(&#39;SuccessPage&#39;)</span><br><span class="line">      &#125;elseif(status &#x3D;&#x3D; 5)&#123;</span><br><span class="line">        sendLog(&#39;cancel&#39;)</span><br><span class="line">        jumpTo(&#39;CancelPage&#39;)</span><br><span class="line">      &#125;else &#123;</span><br><span class="line">        sendLog(&#39;other&#39;)</span><br><span class="line">        jumpTo(&#39;Index&#39;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过代码可以看到这个按钮的点击逻辑：根据不同活动状态做两件事情，发送日志埋点和跳转到对应页面，大家可以很轻易的提出这段代码的改写方案，switch出场：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">     * 按钮点击事件</span><br><span class="line">     * @param &#123;number&#125; status 活动状态：1 开团进行中 2 开团失败 3 商品售罄 4 开团成功 5 系统取消</span><br><span class="line">     *&#x2F;const onButtonClick &#x3D; (status)&#x3D;&gt;&#123;</span><br><span class="line">      switch (status)&#123;</span><br><span class="line">        case1:</span><br><span class="line">          sendLog(&#39;processing&#39;)</span><br><span class="line">          jumpTo(&#39;IndexPage&#39;)</span><br><span class="line">          breakcase2:</span><br><span class="line">        case3:</span><br><span class="line">          sendLog(&#39;fail&#39;)</span><br><span class="line">          jumpTo(&#39;FailPage&#39;)</span><br><span class="line">          breakcase4:</span><br><span class="line">          sendLog(&#39;success&#39;)</span><br><span class="line">          jumpTo(&#39;SuccessPage&#39;)</span><br><span class="line">          breakcase5:</span><br><span class="line">          sendLog(&#39;cancel&#39;)</span><br><span class="line">          jumpTo(&#39;CancelPage&#39;)</span><br><span class="line">          breakdefault:</span><br><span class="line">          sendLog(&#39;other&#39;)</span><br><span class="line">          jumpTo(&#39;Index&#39;)</span><br><span class="line">          break</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>嗯，这样看起来比if/else清晰多了，细心的同学也发现了小技巧，case 2和case 3逻辑一样的时候，可以省去执行语句和break，则case 2的情况自动执行case 3的逻辑。</p><p>这时有同学会说，还有更简单的写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const actions &#x3D; &#123;</span><br><span class="line">      &#39;1&#39;: [&#39;processing&#39;,&#39;IndexPage&#39;],</span><br><span class="line">      &#39;2&#39;: [&#39;fail&#39;,&#39;FailPage&#39;],</span><br><span class="line">      &#39;3&#39;: [&#39;fail&#39;,&#39;FailPage&#39;],</span><br><span class="line">      &#39;4&#39;: [&#39;success&#39;,&#39;SuccessPage&#39;],</span><br><span class="line">      &#39;5&#39;: [&#39;cancel&#39;,&#39;CancelPage&#39;],</span><br><span class="line">      &#39;default&#39;: [&#39;other&#39;,&#39;Index&#39;],</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 按钮点击事件</span><br><span class="line">     * @param &#123;number&#125; status 活动状态：1开团进行中 2开团失败 3 商品售罄 4 开团成功 5 系统取消</span><br><span class="line">     *&#x2F;const onButtonClick &#x3D; (status)&#x3D;&gt;&#123;</span><br><span class="line">      let action &#x3D; actions[status] || actions[&#39;default&#39;],</span><br><span class="line">          logName &#x3D; action[0],</span><br><span class="line">          pageName &#x3D; action[1]</span><br><span class="line">      sendLog(logName)</span><br><span class="line">      jumpTo(pageName)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上面代码确实看起来更清爽了，这种方法的聪明之处在于：将判断条件作为对象的属性名，将处理逻辑作为对象的属性值，在按钮点击的时候，通过对象属性查找的方式来进行逻辑判断，这种写法特别适合一元条件判断的情况。</p><p>是不是还有其他写法呢？有的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const actions &#x3D; newMap([</span><br><span class="line">      [1, [&#39;processing&#39;,&#39;IndexPage&#39;]],</span><br><span class="line">      [2, [&#39;fail&#39;,&#39;FailPage&#39;]],</span><br><span class="line">      [3, [&#39;fail&#39;,&#39;FailPage&#39;]],</span><br><span class="line">      [4, [&#39;success&#39;,&#39;SuccessPage&#39;]],</span><br><span class="line">      [5, [&#39;cancel&#39;,&#39;CancelPage&#39;]],</span><br><span class="line">      [&#39;default&#39;, [&#39;other&#39;,&#39;Index&#39;]]</span><br><span class="line">    ])</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 按钮点击事件</span><br><span class="line">     * @param &#123;number&#125; status 活动状态：1 开团进行中 2 开团失败 3 商品售罄 4 开团成功 5 系统取消</span><br><span class="line">     *&#x2F;const onButtonClick &#x3D; (status)&#x3D;&gt;&#123;</span><br><span class="line">      let action &#x3D; actions.get(status) || actions.get(&#39;default&#39;)</span><br><span class="line">      sendLog(action[0])</span><br><span class="line">      jumpTo(action[1])</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样写用到了es6里的Map对象，是不是更爽了？Map对象和Object对象有什么区别呢？</p><ol><li>一个对象通常都有自己的原型，所以一个对象总有一个”prototype”键。</li><li>一个对象的键只能是字符串或者Symbols，但一个Map的键可以是任意值。</li><li>你可以通过size属性很容易地得到一个Map的键值对个数，而对象的键值对个数只能手动确认。</li></ol><p>我们需要把问题升级一下，以前按钮点击时候只需要判断status，现在还需要判断用户的身份：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">     * 按钮点击事件</span><br><span class="line">     * @param &#123;number&#125; status 活动状态：1开团进行中 2开团失败 3 开团成功 4 商品售罄 5 有库存未开团</span><br><span class="line">     * @param &#123;string&#125; identity 身份标识：guest客态 master主态</span><br><span class="line">     *&#x2F;const onButtonClick &#x3D; (status,identity)&#x3D;&gt;&#123;</span><br><span class="line">      if(identity &#x3D;&#x3D; &#39;guest&#39;)&#123;</span><br><span class="line">        if(status &#x3D;&#x3D; 1)&#123;</span><br><span class="line">          &#x2F;&#x2F;do sth</span><br><span class="line">        &#125;elseif(status &#x3D;&#x3D; 2)&#123;</span><br><span class="line">          &#x2F;&#x2F;do sth</span><br><span class="line">        &#125;elseif(status &#x3D;&#x3D; 3)&#123;</span><br><span class="line">          &#x2F;&#x2F;do sth</span><br><span class="line">        &#125;elseif(status &#x3D;&#x3D; 4)&#123;</span><br><span class="line">          &#x2F;&#x2F;do sth</span><br><span class="line">        &#125;elseif(status &#x3D;&#x3D; 5)&#123;</span><br><span class="line">          &#x2F;&#x2F;do sth</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">          &#x2F;&#x2F;do sth</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;elseif(identity &#x3D;&#x3D; &#39;master&#39;) &#123;</span><br><span class="line">        if(status &#x3D;&#x3D; 1)&#123;</span><br><span class="line">          &#x2F;&#x2F;do sth</span><br><span class="line">        &#125;elseif(status &#x3D;&#x3D; 2)&#123;</span><br><span class="line">          &#x2F;&#x2F;do sth</span><br><span class="line">        &#125;elseif(status &#x3D;&#x3D; 3)&#123;</span><br><span class="line">          &#x2F;&#x2F;do sth</span><br><span class="line">        &#125;elseif(status &#x3D;&#x3D; 4)&#123;</span><br><span class="line">          &#x2F;&#x2F;do sth</span><br><span class="line">        &#125;elseif(status &#x3D;&#x3D; 5)&#123;</span><br><span class="line">          &#x2F;&#x2F;do sth</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">          &#x2F;&#x2F;do sth</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>原谅我不写每个判断里的具体逻辑了，因为代码太冗长了。</p><p>原谅我又用了if/else，因为我看到很多人依然在用if/else写这种大段的逻辑判断。</p><p>从上面的例子我们可以看到，当你的逻辑升级为二元判断时，你的判断量会加倍，你的代码量也会加倍，这时怎么写更清爽呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">const actions &#x3D; newMap([</span><br><span class="line">      [&#39;guest_1&#39;, ()&#x3D;&gt;&#123;&#x2F;*do sth*&#x2F;&#125;],</span><br><span class="line">      [&#39;guest_2&#39;, ()&#x3D;&gt;&#123;&#x2F;*do sth*&#x2F;&#125;],</span><br><span class="line">      [&#39;guest_3&#39;, ()&#x3D;&gt;&#123;&#x2F;*do sth*&#x2F;&#125;],</span><br><span class="line">      [&#39;guest_4&#39;, ()&#x3D;&gt;&#123;&#x2F;*do sth*&#x2F;&#125;],</span><br><span class="line">      [&#39;guest_5&#39;, ()&#x3D;&gt;&#123;&#x2F;*do sth*&#x2F;&#125;],</span><br><span class="line">      [&#39;master_1&#39;, ()&#x3D;&gt;&#123;&#x2F;*do sth*&#x2F;&#125;],</span><br><span class="line">      [&#39;master_2&#39;, ()&#x3D;&gt;&#123;&#x2F;*do sth*&#x2F;&#125;],</span><br><span class="line">      [&#39;master_3&#39;, ()&#x3D;&gt;&#123;&#x2F;*do sth*&#x2F;&#125;],</span><br><span class="line">      [&#39;master_4&#39;, ()&#x3D;&gt;&#123;&#x2F;*do sth*&#x2F;&#125;],</span><br><span class="line">      [&#39;master_5&#39;, ()&#x3D;&gt;&#123;&#x2F;*do sth*&#x2F;&#125;],</span><br><span class="line">      [&#39;default&#39;, ()&#x3D;&gt;&#123;&#x2F;*do sth*&#x2F;&#125;],</span><br><span class="line">    ])</span><br><span class="line">    </span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 按钮点击事件</span><br><span class="line">     * @param &#123;string&#125; identity 身份标识：guest客态 master主态</span><br><span class="line">     * @param &#123;number&#125; status 活动状态：1 开团进行中 2 开团失败 3 开团成功 4 商品售罄 5 有库存未开团</span><br><span class="line">     *&#x2F;const onButtonClick &#x3D; (identity,status)&#x3D;&gt;&#123;</span><br><span class="line">      let action &#x3D; actions.get(&#96;$&#123;identity&#125;_$&#123;status&#125;&#96;) || actions.get(&#39;default&#39;)</span><br><span class="line">      action.call(this)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上述代码核心逻辑是：把两个条件拼接成字符串，并通过以条件拼接字符串作为键，以处理函数作为值的Map对象进行查找并执行，这种写法在多元条件判断时候尤其好用。</p><p>当然上述代码如果用Object对象来实现也是类似的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const actions &#x3D; &#123;</span><br><span class="line">      &#39;guest_1&#39;:()&#x3D;&gt;&#123;&#x2F;*do sth*&#x2F;&#125;,</span><br><span class="line">      &#39;guest_2&#39;:()&#x3D;&gt;&#123;&#x2F;*do sth*&#x2F;&#125;,</span><br><span class="line">      &#x2F;&#x2F;....</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    const onButtonClick &#x3D; (identity,status)&#x3D;&gt;&#123;</span><br><span class="line">      let action &#x3D; actions[&#96;$&#123;identity&#125;_$&#123;status&#125;&#96;] || actions[&#39;default&#39;]</span><br><span class="line">      action.call(this)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果有些同学觉得把查询条件拼成字符串有点别扭，那还有一种方案，就是用Map对象，以Object对象作为key：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const actions &#x3D; newMap([</span><br><span class="line">  [&#123;identity:&#39;guest&#39;,status:1&#125;,()&#x3D;&gt;&#123;&#x2F;*do sth*&#x2F;&#125;],</span><br><span class="line">  [&#123;identity:&#39;guest&#39;,status:2&#125;,()&#x3D;&gt;&#123;&#x2F;*do sth*&#x2F;&#125;],</span><br><span class="line">  &#x2F;&#x2F;...</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">const onButtonClick &#x3D; (identity,status)&#x3D;&gt;&#123;</span><br><span class="line">  let action &#x3D; [...actions].filter(([key,value])&#x3D;&gt;(key.identity &#x3D;&#x3D; identity &amp;&amp; key.status &#x3D;&#x3D; status))</span><br><span class="line">  action.forEach(([key,value])&#x3D;&gt;value.call(this))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是又高级了一点点？</p><p>这里也看出来Map与Object的区别，Map可以用任何类型的数据作为key。</p><p>我们现在再将难度升级一点点，假如guest情况下，status1-4的处理逻辑都一样怎么办，最差的情况是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const actions &#x3D; newMap([</span><br><span class="line">      [&#123;identity:&#39;guest&#39;,status:1&#125;,()&#x3D;&gt;&#123;&#x2F;* functionA *&#x2F;&#125;],</span><br><span class="line">      [&#123;identity:&#39;guest&#39;,status:2&#125;,()&#x3D;&gt;&#123;&#x2F;* functionA *&#x2F;&#125;],</span><br><span class="line">      [&#123;identity:&#39;guest&#39;,status:3&#125;,()&#x3D;&gt;&#123;&#x2F;* functionA *&#x2F;&#125;],</span><br><span class="line">      [&#123;identity:&#39;guest&#39;,status:4&#125;,()&#x3D;&gt;&#123;&#x2F;* functionA *&#x2F;&#125;],</span><br><span class="line">      [&#123;identity:&#39;guest&#39;,status:5&#125;,()&#x3D;&gt;&#123;&#x2F;* functionB *&#x2F;&#125;],</span><br><span class="line">      &#x2F;&#x2F;...</span><br><span class="line">    ])</span><br></pre></td></tr></table></figure><p>好一点的写法是将处理逻辑函数进行缓存：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const actions &#x3D; ()&#x3D;&gt;&#123;</span><br><span class="line">      const functionA &#x3D; ()&#x3D;&gt;&#123;&#x2F;*do sth*&#x2F;&#125;</span><br><span class="line">      const functionB &#x3D; ()&#x3D;&gt;&#123;&#x2F;*do sth*&#x2F;&#125;</span><br><span class="line">      returnnewMap([</span><br><span class="line">        [&#123;identity:&#39;guest&#39;,status:1&#125;,functionA],</span><br><span class="line">        [&#123;identity:&#39;guest&#39;,status:2&#125;,functionA],</span><br><span class="line">        [&#123;identity:&#39;guest&#39;,status:3&#125;,functionA],</span><br><span class="line">        [&#123;identity:&#39;guest&#39;,status:4&#125;,functionA],</span><br><span class="line">        [&#123;identity:&#39;guest&#39;,status:5&#125;,functionB],</span><br><span class="line">        &#x2F;&#x2F;...</span><br><span class="line">      ])</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    const onButtonClick &#x3D; (identity,status)&#x3D;&gt;&#123;</span><br><span class="line">      let action &#x3D; [...actions()].filter(([key,value])&#x3D;&gt;(key.identity &#x3D;&#x3D; identity &amp;&amp; key.status &#x3D;&#x3D; status))</span><br><span class="line">      action.forEach(([key,value])&#x3D;&gt;value.call(this))</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样写已经能满足日常需求了，但认真一点讲，上面重写了4次functionA还是有点不爽，假如判断条件变得特别复杂，比如identity有3种状态，status有10种状态，那你需要定义30条处理逻辑，而往往这些逻辑里面很多都是相同的，这似乎也是笔者不想接受的，那可以这样实现:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const actions &#x3D; ()&#x3D;&gt;&#123;</span><br><span class="line">      const functionA &#x3D; ()&#x3D;&gt;&#123;&#x2F;*do sth*&#x2F;&#125;</span><br><span class="line">      const functionB &#x3D; ()&#x3D;&gt;&#123;&#x2F;*do sth*&#x2F;&#125;</span><br><span class="line">      returnnewMap([</span><br><span class="line">        [&#x2F;^guest_[1-4]$&#x2F;,functionA],</span><br><span class="line">        [&#x2F;^guest_5$&#x2F;,functionB],</span><br><span class="line">        &#x2F;&#x2F;...</span><br><span class="line">      ])</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    const onButtonClick &#x3D; (identity,status)&#x3D;&gt;&#123;</span><br><span class="line">      let action &#x3D; [...actions()].filter(([key,value])&#x3D;&gt;(key.test(&#96;$&#123;identity&#125;_$&#123;status&#125;&#96;)))</span><br><span class="line">      action.forEach(([key,value])&#x3D;&gt;value.call(this))</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里Map的优势更加凸显，可以用正则类型作为key了，这样就有了无限可能，假如需求变成，凡是guest情况都要发送一个日志埋点，不同status情况也需要单独的逻辑处理，那我们可以这样写:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const actions &#x3D; ()&#x3D;&gt;&#123;</span><br><span class="line">      const functionA &#x3D; ()&#x3D;&gt;&#123;&#x2F;*do sth*&#x2F;&#125;</span><br><span class="line">      const functionB &#x3D; ()&#x3D;&gt;&#123;&#x2F;*do sth*&#x2F;&#125;</span><br><span class="line">      const functionC &#x3D; ()&#x3D;&gt;&#123;&#x2F;*send log*&#x2F;&#125;</span><br><span class="line">      returnnewMap([</span><br><span class="line">        [&#x2F;^guest_[1-4]$&#x2F;,functionA],</span><br><span class="line">        [&#x2F;^guest_5$&#x2F;,functionB],</span><br><span class="line">        [&#x2F;^guest_.*$&#x2F;,functionC],</span><br><span class="line">        &#x2F;&#x2F;...</span><br><span class="line">      ])</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    const onButtonClick &#x3D; (identity,status)&#x3D;&gt;&#123;</span><br><span class="line">      let action &#x3D; [...actions()].filter(([key,value])&#x3D;&gt;(key.test(&#96;$&#123;identity&#125;_$&#123;status&#125;&#96;)))</span><br><span class="line">      action.forEach(([key,value])&#x3D;&gt;value.call(this))</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>也就是说利用数组循环的特性，符合正则条件的逻辑都会被执行，那就可以同时执行公共逻辑和单独逻辑，因为正则的存在，你可以打开想象力解锁更多的玩法，本文就不赘述了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文已经教你了8种逻辑判断写法，包括：</p><p>if/else<br>switch<br>一元判断时：存到Object里<br>一元判断时：存到Map里<br>多元判断时：将condition拼接成字符串存到Object里<br>多元判断时：将condition拼接成字符串存到Map里<br>多元判断时：将condition存为Object存到Map里<br>多元判断时：将condition写作正则存到Map里<br>至此，本文也将告一段落，愿你未来的人生里，不只是有if/else/switch。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js防抖和节流</title>
      <link href="/2020/07/04/js%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
      <url>/2020/07/04/js%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p>在进行窗口的resize、scroll，输入框内容校验等操作时，如果事件处理函数调用的频率无限制，会加重浏览器的负担，导致用户体验非常糟糕。此时我们可以采用debounce（防抖）和throttle（节流）的方式来减少调用频率，同时又不影响实际效果。</p><a id="more"></a><h2 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h2><p>函数防抖（debounce）：当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。如下图，持续触发scroll事件时，并不执行handle函数，当1000毫秒内没有触发scroll事件时，才会延时触发scroll事件。</p><p>一起来实现个简单的debounce~</p><p>防抖debounce代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 防抖</span><br><span class="line"><span class="keyword">function</span> debounce(fn, <span class="built_in">wait</span>) &#123;    </span><br><span class="line">    var timeout = null;    </span><br><span class="line">    <span class="built_in">return</span> <span class="function"><span class="title">function</span></span>() &#123;        </span><br><span class="line">        <span class="keyword">if</span>(timeout !== null)   clearTimeout(timeout);        </span><br><span class="line">        timeout = setTimeout(fn, <span class="built_in">wait</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 处理函数</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">handle</span></span>() &#123;    </span><br><span class="line">    console.log(Math.random()); </span><br><span class="line">&#125;</span><br><span class="line">// 滚动事件</span><br><span class="line">window.addEventListener(<span class="string">'scroll'</span>, debounce(handle, 1000));</span><br></pre></td></tr></table></figure><p>当持续触发scroll事件时，事件处理函数handle只在停止滚动1000毫秒之后才会调用一次，也就是说在持续触发scroll事件的过程中，事件处理函数handle一直没有执行。</p><h2 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h2><p>函数节流（throttle）：当持续触发事件时，保证一定时间段内只调用一次事件处理函数。节流通俗解释就比如我们水龙头放水，阀门一打开，水哗哗的往下流，秉着勤俭节约的优良传统美德，我们要把水龙头关小点，最好是如我们心意按照一定规律在某个时间间隔内一滴一滴的往下滴。如下图，持续触发scroll事件时，并不立即执行handle函数，每隔1000毫秒才会执行一次handle函数。</p><p>函数节流主要有两种实现方法：时间戳和定时器。接下来分别用两种方法实现throttle~</p><p>节流throttle代码（时间戳）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var throttle &#x3D; function(func, delay) &#123;            </span><br><span class="line">　　var prev &#x3D; Date.now();            </span><br><span class="line">　　return function() &#123;                </span><br><span class="line">　　　　var context &#x3D; this;                </span><br><span class="line">　　　　var args &#x3D; arguments;                </span><br><span class="line">　　　　var now &#x3D; Date.now();                </span><br><span class="line">　　　　if (now - prev &gt;&#x3D; delay) &#123;                    </span><br><span class="line">　　　　　　func.apply(context, args);                    </span><br><span class="line">　　　　　　prev &#x3D; Date.now();                </span><br><span class="line">　　　　&#125;            </span><br><span class="line">　　&#125;        </span><br><span class="line">&#125;        </span><br><span class="line">function handle() &#123;            </span><br><span class="line">　　console.log(Math.random());        </span><br><span class="line">&#125;        </span><br><span class="line">window.addEventListener(&#39;scroll&#39;, throttle(handle, 1000));</span><br></pre></td></tr></table></figure><p>当高频事件触发时，第一次会立即执行（给scroll事件绑定函数与真正触发事件的间隔一般大于delay，如果你非要在网页加载1000毫秒以内就去滚动网页的话，我也没办法o(╥﹏╥)o），而后再怎么频繁地触发事件，也都是每delay时间才执行一次。而当最后一次事件触发完毕后，事件也不会再被执行了 （最后一次触发事件与倒数第二次触发事件的间隔小于delay，为什么小于呢？因为大于就不叫高频了呀(<em>╹▽╹</em>)）。</p><p>节流throttle代码（定时器）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 节流throttle代码（定时器）：</span><br><span class="line">var throttle &#x3D; function(func, delay) &#123;            </span><br><span class="line">    var timer &#x3D; null;            </span><br><span class="line">    return function() &#123;                </span><br><span class="line">        var context &#x3D; this;               </span><br><span class="line">        var args &#x3D; arguments;                </span><br><span class="line">        if (!timer) &#123;                    </span><br><span class="line">            timer &#x3D; setTimeout(function() &#123;                        </span><br><span class="line">                func.apply(context, args);                        </span><br><span class="line">                timer &#x3D; null;                    </span><br><span class="line">            &#125;, delay);                </span><br><span class="line">        &#125;            </span><br><span class="line">    &#125;        </span><br><span class="line">&#125;        </span><br><span class="line">function handle() &#123;            </span><br><span class="line">    console.log(Math.random());        </span><br><span class="line">&#125;        </span><br><span class="line">window.addEventListener(&#39;scroll&#39;, throttle(handle, 1000));</span><br></pre></td></tr></table></figure><p>当触发事件的时候，我们设置一个定时器，再次触发事件的时候，如果定时器存在，就不执行，直到delay时间后，定时器执行执行函数，并且清空定时器，这样就可以设置下个定时器。当第一次触发事件时，不会立即执行函数，而是在delay秒后才执行。而后再怎么频繁触发事件，也都是每delay时间才执行一次。当最后一次停止触发后，由于定时器的delay延迟，可能还会执行一次函数。</p><p>节流中用时间戳或定时器都是可以的。更精确地，可以用时间戳+定时器，当第一次触发事件时马上执行事件处理函数，最后一次触发事件后也还会执行一次事件处理函数。</p><p>节流throttle代码（时间戳+定时器）：</p><figure class="highlight plain"><figcaption><span>节流throttle代码（时间戳+定时器）：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var throttle &#x3D; function(func, delay) &#123;     </span><br><span class="line">    var timer &#x3D; null;     </span><br><span class="line">    var startTime &#x3D; Date.now();     </span><br><span class="line">    return function() &#123;             </span><br><span class="line">        var curTime &#x3D; Date.now();             </span><br><span class="line">        var remaining &#x3D; delay - (curTime - startTime);             </span><br><span class="line">        var context &#x3D; this;             </span><br><span class="line">        var args &#x3D; arguments;             </span><br><span class="line">        clearTimeout(timer);              </span><br><span class="line">        if (remaining &lt;&#x3D; 0) &#123;                    </span><br><span class="line">            func.apply(context, args);                    </span><br><span class="line">            startTime &#x3D; Date.now();              </span><br><span class="line">        &#125; else &#123;                    </span><br><span class="line">            timer &#x3D; setTimeout(func, remaining);              </span><br><span class="line">        &#125;      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function handle() &#123;      </span><br><span class="line">    console.log(Math.random());</span><br><span class="line">&#125; </span><br><span class="line">window.addEventListener(&#39;scroll&#39;, throttle(handle, 1000));</span><br></pre></td></tr></table></figure><p>在节流函数内部使用开始时间startTime、当前时间curTime与delay来计算剩余时间remaining，当remaining&lt;=0时表示该执行事件处理函数了（保证了第一次触发事件就能立即执行事件处理函数和每隔delay时间执行一次事件处理函数）。如果还没到时间的话就设定在remaining时间后再触发 （保证了最后一次触发事件后还能再执行一次事件处理函数）。当然在remaining这段时间中如果又一次触发事件，那么会取消当前的计时器，并重新计算一个remaining来判断当前状态。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>函数防抖：将几次操作合并为一此操作进行。原理是维护一个计时器，规定在delay时间后触发函数，但是在delay时间内再次触发的话，就会取消之前的计时器而重新设置。这样一来，只有最后一次操作能被触发。</p><p>函数节流：使得一定时间内只触发一次函数。原理是通过判断是否到达一定时间来触发函数。</p><p>区别： 函数节流不管事件触发有多频繁，都会保证在规定时间内一定会执行一次真正的事件处理函数，而函数防抖只是在最后一次事件后才触发一次函数。 比如在页面的无限加载场景下，我们需要用户在滚动页面时，每隔一段时间发一次 Ajax 请求，而不是在用户停下滚动页面操作时才去请求数据。这样的场景，就适合用节流技术来实现。</p><p> 转载自：<a href="https://www.cnblogs.com/momo798/p/9177767.html" target="_blank" rel="noopener">js防抖和节流</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Web Worker 使用教程</title>
      <link href="/2020/07/04/web%20worker%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2020/07/04/web%20worker%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>JavaScript 语言采用的是单线程模型，也就是说，所有任务只能在一个线程上完成，一次只能做一件事。前面的任务没做完，后面的任务只能等着。随着电脑计算能力的增强，尤其是多核 CPU 的出现，单线程带来很大的不便，无法充分发挥计算机的计算能力。</p><p>Web Worker 的作用，就是为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程，将一些任务分配给后者运行。在主线程运行的同时，Worker 线程在后台运行，两者互不干扰。等到 Worker 线程完成计算任务，再把结果返回给主线程。这样的好处是，一些计算密集型或高延迟的任务，被 Worker 线程负担了，主线程（通常负责 UI 交互）就会很流畅，不会被阻塞或拖慢。</p><a id="more"></a><p>转载自<a href="http://www.ruanyifeng.com/blog/2018/07/web-worker.html" target="_blank" rel="noopener">阮一峰</a></p><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>JavaScript 语言采用的是单线程模型，也就是说，所有任务只能在一个线程上完成，一次只能做一件事。前面的任务没做完，后面的任务只能等着。随着电脑计算能力的增强，尤其是多核 CPU 的出现，单线程带来很大的不便，无法充分发挥计算机的计算能力。</p><p>Web Worker 的作用，就是为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程，将一些任务分配给后者运行。在主线程运行的同时，Worker 线程在后台运行，两者互不干扰。等到 Worker 线程完成计算任务，再把结果返回给主线程。这样的好处是，一些计算密集型或高延迟的任务，被 Worker 线程负担了，主线程（通常负责 UI 交互）就会很流畅，不会被阻塞或拖慢。</p><p>Worker 线程一旦新建成功，就会始终运行，不会被主线程上的活动（比如用户点击按钮、提交表单）打断。这样有利于随时响应主线程的通信。但是，这也造成了 Worker 比较耗费资源，不应该过度使用，而且一旦使用完毕，就应该关闭。</p><p>Web Worker 有以下几个使用注意点。</p><p>（1）同源限制</p><p>分配给 Worker 线程运行的脚本文件，必须与主线程的脚本文件同源。</p><p>（2）DOM 限制</p><p>Worker 线程所在的全局对象，与主线程不一样，无法读取主线程所在网页的 DOM 对象，也无法使用document、window、parent这些对象。但是，Worker 线程可以navigator对象和location对象。</p><p>（3）通信联系</p><p>Worker 线程和主线程不在同一个上下文环境，它们不能直接通信，必须通过消息完成。</p><p>（4）脚本限制</p><p>Worker 线程不能执行alert()方法和confirm()方法，但可以使用 XMLHttpRequest 对象发出 AJAX 请求。</p><p>（5）文件限制</p><p>Worker 线程无法读取本地文件，即不能打开本机的文件系统（file://），它所加载的脚本，必须来自网络。</p><h2 id="二、基本用法"><a href="#二、基本用法" class="headerlink" title="二、基本用法"></a>二、基本用法</h2><h3 id="2-1-主线程"><a href="#2-1-主线程" class="headerlink" title="2.1 主线程"></a>2.1 主线程</h3><p>主线程采用new命令，调用Worker()构造函数，新建一个 Worker 线程。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var worker = new Worker(<span class="string">'work.js'</span>);</span><br></pre></td></tr></table></figure><p>Worker()构造函数的参数是一个脚本文件，该文件就是 Worker 线程所要执行的任务。由于 Worker 不能读取本地文件，所以这个脚本必须来自网络。如果下载没有成功（比如404错误），Worker 就会默默地失败。</p><p>然后，主线程调用worker.postMessage()方法，向 Worker 发消息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">worker.postMessage(<span class="string">'Hello World'</span>);</span><br><span class="line">worker.postMessage(&#123;method: <span class="string">'echo'</span>, args: [<span class="string">'Work'</span>]&#125;);</span><br></pre></td></tr></table></figure><p>worker.postMessage()方法的参数，就是主线程传给 Worker 的数据。它可以是各种数据类型，包括二进制数据。</p><p>接着，主线程通过worker.onmessage指定监听函数，接收子线程发回来的消息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">worker.onmessage &#x3D; function (event) &#123;</span><br><span class="line">  console.log(&#39;Received message &#39; + event.data);</span><br><span class="line">  doSomething();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function doSomething() &#123;</span><br><span class="line">  &#x2F;&#x2F; 执行任务</span><br><span class="line">  worker.postMessage(&#39;Work done!&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，事件对象的data属性可以获取 Worker 发来的数据。</p><p>Worker 完成任务以后，主线程就可以把它关掉。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">worker.terminate();</span><br></pre></td></tr></table></figure><h3 id="2-2-Worker-线程"><a href="#2-2-Worker-线程" class="headerlink" title="2.2 Worker 线程"></a>2.2 Worker 线程</h3><p>Worker 线程内部需要有一个监听函数，监听message事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(&#39;message&#39;, function (e) &#123;</span><br><span class="line">  self.postMessage(&#39;You said: &#39; + e.data);</span><br><span class="line">&#125;, false);</span><br></pre></td></tr></table></figure><p>上面代码中，self代表子线程自身，即子线程的全局对象。因此，等同于下面两种写法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 写法一</span><br><span class="line">this.addEventListener(&#39;message&#39;, function (e) &#123;</span><br><span class="line">  this.postMessage(&#39;You said: &#39; + e.data);</span><br><span class="line">&#125;, false);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 写法二</span><br><span class="line">addEventListener(&#39;message&#39;, function (e) &#123;</span><br><span class="line">  postMessage(&#39;You said: &#39; + e.data);</span><br><span class="line">&#125;, false);</span><br></pre></td></tr></table></figure><p>除了使用self.addEventListener()指定监听函数，也可以使用self.onmessage指定。监听函数的参数是一个事件对象，它的data属性包含主线程发来的数据。self.postMessage()方法用来向主线程发送消息。</p><p>根据主线程发来的数据，Worker 线程可以调用不同的方法，下面是一个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(&#39;message&#39;, function (e) &#123;</span><br><span class="line">  var data &#x3D; e.data;</span><br><span class="line">  switch (data.cmd) &#123;</span><br><span class="line">    case &#39;start&#39;:</span><br><span class="line">      self.postMessage(&#39;WORKER STARTED: &#39; + data.msg);</span><br><span class="line">      break;</span><br><span class="line">    case &#39;stop&#39;:</span><br><span class="line">      self.postMessage(&#39;WORKER STOPPED: &#39; + data.msg);</span><br><span class="line">      self.close(); &#x2F;&#x2F; Terminates the worker.</span><br><span class="line">      break;</span><br><span class="line">    default:</span><br><span class="line">      self.postMessage(&#39;Unknown command: &#39; + data.msg);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;, false);</span><br></pre></td></tr></table></figure><p>上面代码中，self.close()用于在 Worker 内部关闭自身。</p><h3 id="2-3-Worker-加载脚本"><a href="#2-3-Worker-加载脚本" class="headerlink" title="2.3 Worker 加载脚本"></a>2.3 Worker 加载脚本</h3><p>Worker 内部如果要加载其他脚本，有一个专门的方法importScripts()。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">importScripts(&#39;script1.js&#39;);</span><br></pre></td></tr></table></figure><p>该方法可以同时加载多个脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">importScripts(&#39;script1.js&#39;, &#39;script2.js&#39;);</span><br></pre></td></tr></table></figure><h3 id="2-4-错误处理"><a href="#2-4-错误处理" class="headerlink" title="2.4 错误处理"></a>2.4 错误处理</h3><p>主线程可以监听 Worker 是否发生错误。如果发生错误，Worker 会触发主线程的error事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">worker.onerror(function (event) &#123;</span><br><span class="line">  console.log([</span><br><span class="line">    &#39;ERROR: Line &#39;, e.lineno, &#39; in &#39;, e.filename, &#39;: &#39;, e.message</span><br><span class="line">  ].join(&#39;&#39;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 或者</span><br><span class="line">worker.addEventListener(&#39;error&#39;, function (event) &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Worker 内部也可以监听error事件。</p><h3 id="2-5-关闭-Worker"><a href="#2-5-关闭-Worker" class="headerlink" title="2.5 关闭 Worker"></a>2.5 关闭 Worker</h3><p>使用完毕，为了节省系统资源，必须关闭 Worker。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 主线程</span><br><span class="line">worker.terminate();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Worker 线程</span><br><span class="line">self.close();</span><br></pre></td></tr></table></figure><h2 id="三、数据通信"><a href="#三、数据通信" class="headerlink" title="三、数据通信"></a>三、数据通信</h2><p>前面说过，主线程与 Worker 之间的通信内容，可以是文本，也可以是对象。需要注意的是，这种通信是拷贝关系，即是传值而不是传址，Worker 对通信内容的修改，不会影响到主线程。事实上，浏览器内部的运行机制是，先将通信内容串行化，然后把串行化后的字符串发给 Worker，后者再将它还原。</p><p>主线程与 Worker 之间也可以交换二进制数据，比如 File、Blob、ArrayBuffer 等类型，也可以在线程之间发送。下面是一个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 主线程</span><br><span class="line">var uInt8Array &#x3D; new Uint8Array(new ArrayBuffer(10));</span><br><span class="line">for (var i &#x3D; 0; i &lt; uInt8Array.length; ++i) &#123;</span><br><span class="line">  uInt8Array[i] &#x3D; i * 2; &#x2F;&#x2F; [0, 2, 4, 6, 8,...]</span><br><span class="line">&#125;</span><br><span class="line">worker.postMessage(uInt8Array);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Worker 线程</span><br><span class="line">self.onmessage &#x3D; function (e) &#123;</span><br><span class="line">  var uInt8Array &#x3D; e.data;</span><br><span class="line">  postMessage(&#39;Inside worker.js: uInt8Array.toString() &#x3D; &#39; + uInt8Array.toString());</span><br><span class="line">  postMessage(&#39;Inside worker.js: uInt8Array.byteLength &#x3D; &#39; + uInt8Array.byteLength);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但是，拷贝方式发送二进制数据，会造成性能问题。比如，主线程向 Worker 发送一个 500MB 文件，默认情况下浏览器会生成一个原文件的拷贝。为了解决这个问题，JavaScript 允许主线程把二进制数据直接转移给子线程，但是一旦转移，主线程就无法再使用这些二进制数据了，这是为了防止出现多个线程同时修改数据的麻烦局面。这种转移数据的方法，叫做Transferable Objects。这使得主线程可以快速把数据交给 Worker，对于影像处理、声音处理、3D 运算等就非常方便了，不会产生性能负担。</p><p>如果要直接转移数据的控制权，就要使用下面的写法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Transferable Objects 格式</span><br><span class="line">worker.postMessage(arrayBuffer, [arrayBuffer]);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 例子</span><br><span class="line">var ab &#x3D; new ArrayBuffer(1);</span><br><span class="line">worker.postMessage(ab, [ab]);</span><br></pre></td></tr></table></figure><h2 id="四、同页面的-Web-Worker"><a href="#四、同页面的-Web-Worker" class="headerlink" title="四、同页面的 Web Worker"></a>四、同页面的 Web Worker</h2><p>通常情况下，Worker 载入的是一个单独的 JavaScript 脚本文件，但是也可以载入与主线程在同一个网页的代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;script id&#x3D;&quot;worker&quot; type&#x3D;&quot;app&#x2F;worker&quot;&gt;</span><br><span class="line">      addEventListener(&#39;message&#39;, function () &#123;</span><br><span class="line">        postMessage(&#39;some message&#39;);</span><br><span class="line">      &#125;, false);</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>上面是一段嵌入网页的脚本，注意必须指定&lt;script&gt;标签的type属性是一个浏览器不认识的值，上例是app/worker。</p><p>然后，读取这一段嵌入页面的脚本，用 Worker 来处理。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var blob &#x3D; new Blob([document.querySelector(&#39;#worker&#39;).textContent]);</span><br><span class="line">var url &#x3D; window.URL.createObjectURL(blob);</span><br><span class="line">var worker &#x3D; new Worker(url);</span><br><span class="line"></span><br><span class="line">worker.onmessage &#x3D; function (e) &#123;</span><br><span class="line">  &#x2F;&#x2F; e.data &#x3D;&#x3D;&#x3D; &#39;some message&#39;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面代码中，先将嵌入网页的脚本代码，转成一个二进制对象，然后为这个二进制对象生成 URL，再让 Worker 加载这个 URL。这样就做到了，主线程和 Worker 的代码都在同一个网页上面。</p><h2 id="五、实例：Worker-线程完成轮询"><a href="#五、实例：Worker-线程完成轮询" class="headerlink" title="五、实例：Worker 线程完成轮询"></a>五、实例：Worker 线程完成轮询</h2><p>有时，浏览器需要轮询服务器状态，以便第一时间得知状态改变。这个工作可以放在 Worker 里面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">function createWorker(f) &#123;</span><br><span class="line">  var blob &#x3D; new Blob([&#39;(&#39; + f.toString() +&#39;)()&#39;]);</span><br><span class="line">  var url &#x3D; window.URL.createObjectURL(blob);</span><br><span class="line">  var worker &#x3D; new Worker(url);</span><br><span class="line">  return worker;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var pollingWorker &#x3D; createWorker(function (e) &#123;</span><br><span class="line">  var cache;</span><br><span class="line"></span><br><span class="line">  function compare(new, old) &#123; ... &#125;;</span><br><span class="line"></span><br><span class="line">  setInterval(function () &#123;</span><br><span class="line">    fetch(&#39;&#x2F;my-api-endpoint&#39;).then(function (res) &#123;</span><br><span class="line">      var data &#x3D; res.json();</span><br><span class="line"></span><br><span class="line">      if (!compare(data, cache)) &#123;</span><br><span class="line">        cache &#x3D; data;</span><br><span class="line">        self.postMessage(data);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">pollingWorker.onmessage &#x3D; function () &#123;</span><br><span class="line">  &#x2F;&#x2F; render data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pollingWorker.postMessage(&#39;init&#39;);</span><br></pre></td></tr></table></figure><p>上面代码中，Worker 每秒钟轮询一次数据，然后跟缓存做比较。如果不一致，就说明服务端有了新的变化，因此就要通知主线程。</p><h2 id="六、实例：-Worker-新建-Worker"><a href="#六、实例：-Worker-新建-Worker" class="headerlink" title="六、实例： Worker 新建 Worker"></a>六、实例： Worker 新建 Worker</h2><p>Worker 线程内部还能再新建 Worker 线程（目前只有 Firefox 浏览器支持）。下面的例子是将一个计算密集的任务，分配到10个 Worker。</p><p>主线程代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var worker &#x3D; new Worker(&#39;worker.js&#39;);</span><br><span class="line">worker.onmessage &#x3D; function (event) &#123;</span><br><span class="line">  document.getElementById(&#39;result&#39;).textContent &#x3D; event.data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Worker 线程代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; worker.js</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; settings</span><br><span class="line">var num_workers &#x3D; 10;</span><br><span class="line">var items_per_worker &#x3D; 1000000;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; start the workers</span><br><span class="line">var result &#x3D; 0;</span><br><span class="line">var pending_workers &#x3D; num_workers;</span><br><span class="line">for (var i &#x3D; 0; i &lt; num_workers; i +&#x3D; 1) &#123;</span><br><span class="line">  var worker &#x3D; new Worker(&#39;core.js&#39;);</span><br><span class="line">  worker.postMessage(i * items_per_worker);</span><br><span class="line">  worker.postMessage((i + 1) * items_per_worker);</span><br><span class="line">  worker.onmessage &#x3D; storeResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; handle the results</span><br><span class="line">function storeResult(event) &#123;</span><br><span class="line">  result +&#x3D; event.data;</span><br><span class="line">  pending_workers -&#x3D; 1;</span><br><span class="line">  if (pending_workers &lt;&#x3D; 0)</span><br><span class="line">    postMessage(result); &#x2F;&#x2F; finished!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，Worker 线程内部新建了10个 Worker 线程，并且依次向这10个 Worker 发送消息，告知了计算的起点和终点。计算任务脚本的代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; core.js</span><br><span class="line">var start;</span><br><span class="line">onmessage &#x3D; getStart;</span><br><span class="line">function getStart(event) &#123;</span><br><span class="line">  start &#x3D; event.data;</span><br><span class="line">  onmessage &#x3D; getEnd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var end;</span><br><span class="line">function getEnd(event) &#123;</span><br><span class="line">  end &#x3D; event.data;</span><br><span class="line">  onmessage &#x3D; null;</span><br><span class="line">  work();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function work() &#123;</span><br><span class="line">  var result &#x3D; 0;</span><br><span class="line">  for (var i &#x3D; start; i &lt; end; i +&#x3D; 1) &#123;</span><br><span class="line">    &#x2F;&#x2F; perform some complex calculation here</span><br><span class="line">    result +&#x3D; 1;</span><br><span class="line">  &#125;</span><br><span class="line">  postMessage(result);</span><br><span class="line">  close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、API"><a href="#七、API" class="headerlink" title="七、API"></a>七、API</h2><h3 id="7-1-主线程"><a href="#7-1-主线程" class="headerlink" title="7.1 主线程"></a>7.1 主线程</h3><p>浏览器原生提供Worker()构造函数，用来供主线程生成 Worker 线程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var myWorker &#x3D; new Worker(jsUrl, options);</span><br></pre></td></tr></table></figure><p>Worker()构造函数，可以接受两个参数。第一个参数是脚本的网址（必须遵守同源政策），该参数是必需的，且只能加载 JS 脚本，否则会报错。第二个参数是配置对象，该对象可选。它的一个作用就是指定 Worker 的名称，用来区分多个 Worker 线程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 主线程</span><br><span class="line">var myWorker &#x3D; new Worker(&#39;worker.js&#39;, &#123; name : &#39;myWorker&#39; &#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Worker 线程</span><br><span class="line">self.name &#x2F;&#x2F; myWorker</span><br></pre></td></tr></table></figure><p>Worker()构造函数返回一个 Worker 线程对象，用来供主线程操作 Worker。Worker 线程对象的属性和方法如下。</p><ul><li>Worker.onerror：指定 error 事件的监听函数。</li><li>Worker.onmessage：指定 message 事件的监听函数，发送过来的数据在Event.data属性中。</li><li>Worker.onmessageerror：指定 messageerror 事件的监听函数。发送的数据无法序列化成字符串时，会触发这个事件。</li><li>Worker.postMessage()：向 Worker 线程发送消息。</li><li>Worker.terminate()：立即终止 Worker 线程。</li></ul><h3 id="7-2-Worker-线程"><a href="#7-2-Worker-线程" class="headerlink" title="7.2 Worker 线程"></a>7.2 Worker 线程</h3><p>Web Worker 有自己的全局对象，不是主线程的window，而是一个专门为 Worker 定制的全局对象。因此定义在window上面的对象和方法不是全部都可以使用。</p><p>Worker 线程有一些自己的全局属性和方法。</p><ul><li>self.name： Worker 的名字。该属性只读，由构造函数指定。</li><li>self.onmessage：指定message事件的监听函数。</li><li>self.onmessageerror：指定 messageerror 事件的监听函数。发送的数据无法序列化成字符串时，会触发这个事件。</li><li>self.close()：关闭 Worker 线程。</li><li>self.postMessage()：向产生这个 Worker 线程发送消息。</li><li>self.importScripts()：加载 JS 脚本。</li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
